<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决docker镜像拉取问题</title>
      <link href="/2024/11/05/%E8%A7%A3%E5%86%B3docker%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96%E9%97%AE%E9%A2%98/"/>
      <url>/2024/11/05/%E8%A7%A3%E5%86%B3docker%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>docker拉取镜像的时候经常断，之前解决过一次，结果忘了，又折腾一遍。所以写个短小的笔记记录一下</p><p>首先遇到了这个问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ailed to solve: nginx:alpine: failed to copy: httpReadSeeker: failed open: failed to do request: Get &quot;https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/cb/cb8f91112b6b50ead202f48bbf81cec4b34c254417254efd94c803f7dd718045/data?verify=1730801617-FU3heZxDeHwA43OyZBn3i%2BkKwM0%3D&quot;: dialing production.cloudflare.docker.com:443 matches manual override exclude: connecting to 173.252.108.3:443: dial tcp 173.252.108.3:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</span><br></pre></td></tr></table></figure><p>或者是此类问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: failed to solve: DeadlineExceeded: context deadline exceeded</span><br></pre></td></tr></table></figure><p>一个比较容易想到的解决办法是在docker desktop里面设置</p><p><img src="https://raw.githubusercontent.com/tctco/ImgHosting/master/20241105173052.png" alt="docker engine desktop proxy settings"></p><p>但是试了下不知道为啥不能用，可能是得在wsl里面设置？遂用如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">host_ip=$(ip route show | grep -i default | awk <span class="string">&#x27;&#123; print $3&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;http://<span class="variable">$host_ip</span>:10809&quot;</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;http://<span class="variable">$host_ip</span>:10809&quot;</span></span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;http://<span class="variable">$host_ip</span>:10809&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ALL_PROXY</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&quot;export ALL_PROXY=http://<span class="variable">$host_ip</span>:10809; export HTTPS_PROXY=http://<span class="variable">$host_ip</span>:10809; export HTTP_PROXY=http://<span class="variable">$host_ip</span>:10809&quot;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&quot;unset ALL_PROXY; unset HTTPS_PROXY; unset HTTP_PROXY&quot;</span></span><br></pre></td></tr></table></figure><p>这里还有个需要注意的地方，就是只设置<code>ALL_PROXY</code>是不管用的，docker似乎会拉取<code>HTTP(S)_PROXY</code>的值，所以还必须把他俩设置了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在WSL2中安装SPM12 Standalone</title>
      <link href="/2024/10/30/%E5%9C%A8WSL2%E4%B8%AD%E5%AE%89%E8%A3%85SPM12-Standalone/"/>
      <url>/2024/10/30/%E5%9C%A8WSL2%E4%B8%AD%E5%AE%89%E8%A3%85SPM12-Standalone/</url>
      
        <content type="html"><![CDATA[<ol><li>在<a href="https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/MCR/">这个链接</a>下载MATLAB Compiler Runtime</li><li>在<a href="https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/spm12/">这个连接</a>下载SPM Standalone</li><li>运行<code>./MCRInstaller.bin</code>的时候遇到 No Java Runtime Environment(JRE) was found on this system. 使用<code>sudo apt install openjdk-11-jre</code>尝试解决，发现解决不了！可以去看<a href="https://www.jiscmail.ac.uk/cgi-bin/webadmin?A2=SPM;302f92a5.2002">这个讨论</a></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>绝妙口诀一览</title>
      <link href="/2024/10/08/%E7%BB%9D%E5%A6%99%E5%8F%A3%E8%AF%80%E4%B8%80%E8%A7%88/"/>
      <url>/2024/10/08/%E7%BB%9D%E5%A6%99%E5%8F%A3%E8%AF%80%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网罗医学绝妙口诀</p></blockquote><p><strong>头孢代数口诀</strong></p><ul><li><p>坐着拉大便</p><ul><li>坐：头孢唑林</li><li>拉：头孢拉定</li><li>便：头孢氨苄、头孢羟氨苄</li></ul></li><li><p><strong>克夫多可惜</strong></p><ul><li>克：头孢克洛</li><li>夫：头孢呋辛</li><li>多：头孢孟多</li></ul></li><li><p><strong>他派我去出差</strong></p><ul><li>他：头孢他啶</li><li>派：头孢哌酮</li><li>我：头孢克肟</li><li>去：头孢曲松</li></ul></li><li><p><strong>比我厉害</strong></p><ul><li>比我：头孢吡肟、头孢匹罗</li></ul></li></ul><p><strong>脑出血MRI信号转变3-7法则</strong>：I Bleed, I Die, Bleed Die, Bleed Bleed, Die Die</p><table><thead><tr><th>分期</th><th>出血时间</th><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>超急性期</td><td>&lt;7h</td><td>等信号Isointense, I</td><td>高信号Bright, B</td></tr><tr><td>急性期</td><td>3h-3d</td><td>I</td><td>D</td></tr><tr><td>亚急性早期</td><td>3d-7d</td><td>B</td><td>D</td></tr><tr><td>亚急性晚期</td><td>7d-3w</td><td>B</td><td>B</td></tr><tr><td>慢性期</td><td>&gt;3w</td><td>D</td><td>D</td></tr></tbody></table><h1>影像征象</h1><ul><li>牛眼征：转移性肝癌典型表现</li></ul><h1>儿科</h1><p>运动：二抬四翻六会坐，七滚八爬周会走，二岁会跳三岁跑</p><p>解剖结构关闭：六月卵圆八周脐，三月导管一年闭</p><p>小儿体重公式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3.25</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>m</mi><mo>+</mo><mn>9</mn></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>9</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mi>y</mi><mo>+</mo><mn>8</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>≤</mo><mi>y</mi><mo>≤</mo><mn>6</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mn>7</mn><mi>y</mi><mo>−</mo><mn>5</mn></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mo>≤</mo><mi>y</mi><mo>≤</mo><mn>12</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> w = \begin{cases} 3.25 &amp; m = 0\\ \frac{m+9}{2} &amp; 3 \le m \le 9\\  2y+8 &amp; 1\le y\le 6\\\frac{7y-5}{2} &amp; 7\le y\le 12 \end{cases} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.916em' style='width:0.8889em' viewBox='0 0 888.89 916' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V916 H384z M384 0 H504 V916 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.916em' style='width:0.8889em' viewBox='0 0 888.89 916' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V916 H384z M384 0 H504 V916 H384z'/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3.25</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">8</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8972em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">9</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">7</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">12</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>低体重新生儿：&lt;2.5kg</p><iframe src="https://www.desmos.com/calculator/0amwc6jz7h?embed" width="500" height="500" style="border: 1px solid #ccc" frameborder="0"></iframe><p>小儿身高公式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>50</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>75</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>12</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mi>y</mi><mo>+</mo><mn>75</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mo>≤</mo><mi>y</mi><mo>≤</mo><mn>6</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>6</mn><mi>y</mi><mo>+</mo><mn>80</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mo>≤</mo><mi>y</mi><mo>≤</mo><mn>10</mn><mtext> </mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> h = \begin{cases} 50 &amp; m=0\\ 75 &amp; 3\le m \le 12\\  7y+75 &amp; 2\le y\le 6\\6y+80 &amp; 7\le y\le 10\ \end{cases} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.916em' style='width:0.8889em' viewBox='0 0 888.89 916' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V916 H384z M384 0 H504 V916 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.916em' style='width:0.8889em' viewBox='0 0 888.89 916' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V916 H384z M384 0 H504 V916 H384z'/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">50</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">75</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">7</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">75</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">80</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">12</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">7</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">10</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>头围</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>34</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>40</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>46</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mn>12</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>48</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>54</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mn>15</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> c = \begin{cases} 34 &amp; m = 0\\ 40 &amp; m = 3\\ 46 &amp; m = 12\\  48 &amp; y = 2\\54 &amp; y = 15 \end{cases} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:7.2em;vertical-align:-3.35em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-1.366em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='1.816em' style='width:0.8889em' viewBox='0 0 888.89 1816' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V1816 H384z M384 0 H504 V1816 H384z'/></svg></span></span><span style="top:-3.816em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.958em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='1.816em' style='width:0.8889em' viewBox='0 0 888.89 1816' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V1816 H384z M384 0 H504 V1816 H384z'/></svg></span></span><span style="top:-6.766em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.85em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">34</span></span></span><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">40</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">46</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">48</span></span></span><span style="top:-0.09em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">54</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.85em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">12</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span></span></span><span style="top:-0.09em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">15</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>一岁后：胸围-头围 = y-1</p><p>3m：左右抬头，颈椎前凸</p><p>6m：坐，胸椎后凸</p><p>1y：走，腰椎前凸</p><h1>常用检查值</h1><ul><li><p>血尿素氮：3-7.5</p></li><li><p>PaO2 80~100mmHg</p></li><li><p>PaCO2 35~45mmHg</p></li><li><p>总蛋白 60~80g/L</p></li><li><p>白蛋白 35~50g/L</p></li><li><p>中性粒细胞比率 40-75%</p><ul><li>儿童4-6d ~ 4-6y反常淋巴细胞增高</li></ul></li><li><p>红细胞平均体积MCV 86~100fl</p></li><li><p>平均红细胞血红蛋白含量MCH 27~34pg</p></li></ul><h1>肾病</h1><p>肾病综合征</p><ul><li>大量蛋白尿</li><li>低蛋白血症</li><li>高脂血症</li><li>明显水肿</li></ul><h1>循环系统疾病</h1><p>动脉导管未闭</p><ul><li>吲哚美辛（非甾体抗炎药）80%治愈</li></ul><h1>感染性疾病</h1><p>流脑</p><ul><li>脑膜炎奈瑟菌</li><li>败血症期广泛出现瘀斑</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ADNI学习笔记</title>
      <link href="/2024/07/23/ADNI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/23/ADNI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>有关诊断相关的内容，可以参考这个<a href="https://adni.loni.usc.edu/wp-content/uploads/2012/08/instruction-about-data.pdf">链接</a>或者前往<a href="https://adni.bitbucket.io/index.html">ADNIMERGE</a>搜索对应的表格。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一次tf缺少cuDNN dll的问题</title>
      <link href="/2024/07/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1tf%E7%BC%BA%E5%B0%91cuDNN-dll%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/07/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1tf%E7%BC%BA%E5%B0%91cuDNN-dll%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>使用<code>tensorflow</code>的时候遇到了这个问题：Loaded cuDNN version 8302 Could not load library cudnn_cnn_infer64_8.dll. Error code 126</p><p>但实际上我已经把<code>cudnn_cnn_infer64_8.dll</code>加到环境变量中去了。</p><p>这可能是由于<code>tf</code>和<code>cuDNN</code>版本不匹配造成的问题。</p><p>可以考虑强行引入动态链接库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">ctypes.WinDLL(<span class="string">&#x27;path/to/cudnn_cnn_infer64_8.dll&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样<code>tf</code>就可以正常训练啦！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动Centiloid计算工具笔记</title>
      <link href="/2024/06/03/%E8%87%AA%E5%8A%A8Centiloid%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/03/%E8%87%AA%E5%8A%A8Centiloid%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为做科研需要大量计算Centiloid指标，遂尝试编写一款简单的portable小程序，研究发现技术栈用cpp比较合适，研究过程记录如下。</p></blockquote><blockquote><p>关键步骤重点参考了CMU的课程<a href="https://www.cs.cmu.edu/~galeotti/methods_course/">Methods in (Bio)Medical Image Analysis</a></p></blockquote><h1>编译SimpleITK</h1><p>编译SITK可以参考下面两篇文章</p><ul><li><a href="https://simpleitk.readthedocs.io/en/master/buildingWindows.html">SITK官网教程</a></li><li><a href="https://www.cs.cmu.edu/~galeotti/methods_course/ITK_Getting_Started.pdf">CMU入门课程</a></li></ul><p>下面开始进行SimpleITK的安装</p><ol><li><p><code>git clone https://github.com/SimpleITK/SimpleITK.git</code>到本地</p></li><li><p>根目录名称不能太长，Windows下对路径有最大长度限制（~260），而SITK里面嵌套的目录很长</p></li><li><p>C++的包管理似乎都是在本地的，不像python有<code>pip</code>那么方便</p></li><li><p>进行<code>out-of-tree-build</code></p></li><li><p>简单说，<code>in-tree-build</code>就是先写代码，然后吧代码跟<code>sitk</code>一起编译，这种方法可以修改<code>sitk</code>原始代码，但是容器引起混乱</p></li><li><p><code>out-of-tree-build</code>是先把代码编译成二进制，然后再使用</p></li><li><p><code>sitk</code>源码路径<code>./SimpleITK</code></p></li><li><p>目标编译路径<code>./SITKBin</code></p></li><li><p>启动CMake，设置SOURCE directory为<code>./SimpleITK/SuperBuild</code></p></li><li><p>选择BINARY directory<code>./SITKBin</code></p></li><li><blockquote><p>Tips: 不小心弄错了可以在CMake里选<code>File/Delete Cache</code></p></blockquote></li><li><p>按下Configure按钮，选择合适的编译器（我的是Visual Studio 2019）开始Configure</p></li><li><p>将SITK的CMake选项配置成下图所示的状态：<img src="https://raw.githubusercontent.com/tctco/ImgHosting/master/20240603172837.png" alt=""></p></li><li><p>依次点击<code>Configure</code>（如果有红的选项就需要点）、<code>Generate</code>、<code>Open Project</code></p></li><li><p>在Visual Studio中选<code>生成/生成ALL_BUILD</code></p></li></ol><pre><code>1. ALL_BUILD是专属CMake的生成选项，生成解决方案会按照 Visual Studio 解决方案的配置来构建所有项目，而生成ALL_BUILD是根据 CMake 生成的构建目标进行构建。</code></pre><ol start="3"><li><p>测试ITK编译是否成功</p></li><li><p>把<code>.\SITKBin\ITK\Examples\Installation</code>下的文件拷贝出来，作为源码</p></li><li><p>创建一个新的编译路径，如<code>.\HelloWorldBin</code></p></li><li><p>用CMake重复上面的动作，不过可能需要手动指定<code>ITK_DIR=path\to\SITKBin\ITK-build</code></p></li><li><p>最后在VS中生成HelloWorld即可</p></li></ol><h1>编写自己的SITK C++项目</h1><ol><li>使用Visual Studio新建一个CMake项目</li><li>首先需要配置一下<code>CMakeLists.txt</code>文件</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(ITK REQUIRED)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;ITK_USE_FILE&#125;</span>)</span><br><span class="line"><span class="keyword">find_package</span>(SimpleITK REQUIRED)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;SimpleITK_USE_FILE&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (CentiloidCalculator <span class="string">&quot;CentiloidCalculator.cpp&quot;</span> <span class="string">&quot;CentiloidCalculator.h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(CentiloidCalculator <span class="variable">$&#123;ITK_LIBRARIES&#125;</span> <span class="variable">$&#123;SimpleITK_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p>如果这时候找不到ITK或SimpleITK的话，需要在<code>项目/CentiloidCalculator的CMake设置</code>里手动添加CMake变量和缓存。</p><p>有一个坑爹的地方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> monai.transforms <span class="keyword">import</span> GaussianSmoothd</span><br><span class="line"></span><br><span class="line">GaussianSmoothd(keys=[<span class="string">&quot;image&quot;</span>], sigma=<span class="number">1</span>),</span><br></pre></td></tr></table></figure><p>这里的<code>sigma=1</code>感觉好像不太对。在<code>itk</code>里相似结果需要设置<code>sigma=4</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ImageType = itk::Image&lt;<span class="type">float</span>, <span class="number">3</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">ImageType::Pointer <span class="title">GaussianSmooth</span><span class="params">(ImageType::Pointer image, <span class="type">double</span> sigma)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> SmoothingFilterType =</span><br><span class="line">      itk::SmoothingRecursiveGaussianImageFilter&lt;ImageType, ImageType&gt;;</span><br><span class="line"></span><br><span class="line">  SmoothingFilterType::Pointer smoothingFilter = SmoothingFilterType::<span class="built_in">New</span>();</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetInput</span>(image);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetSigma</span>(sigma);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">Update</span>();</span><br><span class="line">  <span class="keyword">return</span> smoothingFilter-&gt;<span class="built_in">GetOutput</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">image = <span class="built_in">GaussianSmooth</span>(inputImage, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>但是经过仔细调查，发现还是不对劲，正确的做法是这样的！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ImageType::Pointer <span class="title">GaussianSmooth</span><span class="params">(ImageType::Pointer image, <span class="type">double</span> sigma)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> SmoothingFilterType =</span><br><span class="line">    itk::DiscreteGaussianImageFilter&lt;ImageType, ImageType&gt;;</span><br><span class="line">  <span class="keyword">using</span> BoundaryConditionType = itk::ConstantBoundaryCondition&lt;ImageType&gt;;</span><br><span class="line">  SmoothingFilterType::Pointer smoothingFilter = SmoothingFilterType::<span class="built_in">New</span>();</span><br><span class="line">  BoundaryConditionType boundaryCondition;</span><br><span class="line">  boundaryCondition.<span class="built_in">SetConstant</span>(<span class="number">-0.1</span>);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetInputBoundaryCondition</span>(&amp;boundaryCondition);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetMaximumKernelWidth</span>(<span class="number">9</span>);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetInput</span>(image);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetUseImageSpacingOff</span>();</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">SetVariance</span>(sigma * sigma);</span><br><span class="line">  smoothingFilter-&gt;<span class="built_in">Update</span>();</span><br><span class="line">  <span class="keyword">return</span> smoothingFilter-&gt;<span class="built_in">GetOutput</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，不应该用<code>SmoothingRecursiveGaussianImageFilter</code>这个类，因为它默认使用的单位是物理空间单位，而不是体素单位！需要使用的是<code>DiscreteGaussianImageFilter</code>。</p><h1>如何使用ONNXRuntime在C++中使用Pytorch模型</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 载入模型</span></span><br><span class="line">Ort::SessionOptions sessionOptions;</span><br><span class="line">sessionOptions.<span class="built_in">SetIntraOpNumThreads</span>(<span class="number">1</span>);</span><br><span class="line">std::wstring w_modelPath = std::<span class="built_in">wstring</span>(modelPath.<span class="built_in">begin</span>(), modelPath.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;session = <span class="keyword">new</span> Ort::<span class="built_in">Session</span>(env, w_modelPath.<span class="built_in">c_str</span>(), sessionOptions);</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> Ort::Exception &amp;e) &#123;</span><br><span class="line"></span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Error loading model:&quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Failed to load model.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>记录一个Pytorch到itk的坑点</h1><p>由于需要把图像展平成一维向量送给onnxruntime，因此需要提取itk图像的像素信息</p><p>最开始我是这样做的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">float</span>&gt;imageData;</span><br><span class="line">imageData.<span class="built_in">reserve</span>(image-&gt;<span class="built_in">GetLargestPossibleRegion</span>().<span class="built_in">GetNumberOfPixels</span>());</span><br><span class="line"><span class="function">itk::ImageRegionIterator&lt;ImageType&gt; <span class="title">imageIterator</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    image, image-&gt;GetLargestPossibleRegion())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (imageIterator.<span class="built_in">GoToBegin</span>(); !imageIterator.<span class="built_in">IsAtEnd</span>(); ++imageIterator) &#123;</span><br><span class="line">  imageData.<span class="built_in">push_back</span>(imageIterator.<span class="built_in">Get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样是不行的，因为体素在内存中的排列顺序不对，正确的方法应该是这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExtractImageData</span><span class="params">(ImageType::Pointer image, std::vector&lt;<span class="type">float</span>&gt;&amp; imageData)</span> </span>&#123;</span><br><span class="line">  ImageType::RegionType region = image-&gt;<span class="built_in">GetLargestPossibleRegion</span>();</span><br><span class="line">  ImageType::SizeType size = region.<span class="built_in">GetSize</span>();</span><br><span class="line"></span><br><span class="line">  imageData.<span class="built_in">resize</span>(size[<span class="number">0</span>] * size[<span class="number">1</span>] * size[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> z = <span class="number">0</span>; z &lt; size[<span class="number">0</span>]; ++z) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> y = <span class="number">0</span>; y &lt; size[<span class="number">1</span>]; ++y) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">size_t</span> x = <span class="number">0</span>; x &lt; size[<span class="number">2</span>]; ++x) &#123;</span><br><span class="line">        ImageType::IndexType index = &#123; &#123;x, y, z&#125; &#125;;</span><br><span class="line">        <span class="type">float</span> pixelValue = image-&gt;<span class="built_in">GetPixel</span>(index);</span><br><span class="line">        imageData[x * size[<span class="number">0</span>] * size[<span class="number">1</span>] + y * size[<span class="number">0</span>] + z] = pixelValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">float</span>&gt;imageData;</span><br><span class="line">imageData.<span class="built_in">reserve</span>(image-&gt;<span class="built_in">GetLargestPossibleRegion</span>().<span class="built_in">GetNumberOfPixels</span>());</span><br><span class="line"><span class="built_in">ExtractImageData</span>(image, imageData);</span><br></pre></td></tr></table></figure><p>最外层的z实际上才是变化最快的那一个！</p><h1>Slicer Extension</h1><p>如何安装一个其他开发者开发的插件？Developer Tools - Extension Wizard - Select Extension，然后找到插件目录安装就可以了</p><p><img src="https://raw.githubusercontent.com/tctco/ImgHosting/master/Screenshot%202024-08-01%20133706.png" alt="示意图"></p><h1>检测cpp项目依赖情况</h1><p>开始页面打开Developer Command Prompt</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpbin /dependents cpp-program.exe</span><br></pre></td></tr></table></figure><h1>记录一下cpp中使用itk的坑点</h1><p>我编译了CentiloidCalculator之后，发现换个电脑执行不了，在PythonSlicer的环境里也会发生内存错误！经过痛苦的debug之后发现是下面的问题：</p><ol><li>编译的程序需要一些动态链接库，比如通过<code>dumpbin</code>分析动态链接库的依赖，有MSVCP140.dll（后面带D的表示Debug），在没有MSVC dll库的环境里是不能运行的！因此需要把dll文件拷贝到exe文件同目录下</li><li>单纯使用VS的创建CMAKE项目是不太好用的！写完代码之后，记得用CMAKE_GUI重新Configure + Generate一下，然后再用VS打开项目！这个时候编译才符合一般CMAKE项目的编译方式</li><li>sitk的ALL_BUILD记得选Release模式（当然也可以选别的），否则CentiloidCalculator就只能用Debug策略编译（这个很好理解，上游项目是Debug模式编译的）</li></ol><p>下面的是批处理脚本，用于把各个关键的运行时库（和一些其他组件）打包在一起。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 创建绿色软件包目录</span></span><br><span class="line"><span class="built_in">mkdir</span> CentiloidCalculator_green</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 复制可执行文件</span></span><br><span class="line"><span class="built_in">copy</span> .\Release\CentiloidCalculator.exe CentiloidCalculator_green\</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 复制 onnxruntime DLL</span></span><br><span class="line"><span class="built_in">copy</span> E:\projects\sitk\SITKExample\onnxruntime-win-x64-<span class="number">1</span>.<span class="number">18</span>.<span class="number">0</span>\lib\onnxruntime.dll CentiloidCalculator_green\</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 复制发布版本的VC++运行时库</span></span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\MSVCP140.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\VCRUNTIME140.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\VCRUNTIME140_1.dll CentiloidCalculator_green\</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 复制 API-MS-WIN-CRT-XXX.dll 文件</span></span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-runtime-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-math-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-heap-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-stdio-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-filesystem-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-string-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-environment-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-<span class="built_in">convert</span>-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-<span class="built_in">time</span>-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-locale-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\api-ms-win-crt-utility-l1-<span class="number">1</span>-<span class="number">0</span>.dll CentiloidCalculator_green\</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 复制模型文件</span></span><br><span class="line"><span class="built_in">copy</span> ..\x64-Debug\CentiloidCalculator\<span class="number">2</span>head-pib-noise-gelu-<span class="number">64</span>channel.onnx CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> ..\x64-Debug\CentiloidCalculator\rigid.onnx CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> ..\x64-Debug\CentiloidCalculator\affine_voxelmorph.onnx CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> ..\x64-Debug\CentiloidCalculator\voi_WhlCbl_2mm.nii CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> ..\x64-Debug\CentiloidCalculator\voi_ctx_2mm.nii CentiloidCalculator_green\</span><br><span class="line"><span class="built_in">copy</span> ..\x64-Debug\CentiloidCalculator\paddedTemplate.nii CentiloidCalculator_green\</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 绿色软件包已经创建在 CentiloidCalculator_green 目录中</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MOT格式笔记</title>
      <link href="/2024/05/08/MOT%E6%A0%BC%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/08/MOT%E6%A0%BC%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>需要注意的是</p><ul><li>MOT的标准格式为frame, id, x, y, w, h, …</li><li>mmdetection/segTracker的返回一般为xyxy</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SuStaIn学习笔记</title>
      <link href="/2024/01/19/SuStaIn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/19/SuStaIn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>问题</h1><p>对于慢性病而言，疾病有自身的亚型差异与演进过程。</p><p>然而，横断面研究只能捕获某一瞬间某个个体的患病情况。</p><p>我们该如何根据许多个横断面，同时推测人群中的个体所患疾病的亚型，以及疾病的演进过程？</p><h1>SuStaIn</h1><p>我们定义，如果某种疾病的某些标志物以某一种特定形式演进，那它就构成一种亚型。</p><p>对于个体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>，我们可以测量生物标志物<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>，得到观测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，我们的数据集可以表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mrow><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi mathvariant="normal">∣</mi><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>I</mi><mo separator="true">,</mo><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>J</mi></mrow></mrow><annotation encoding="application/x-tex">X{x_{ij}|i=1, \cdots, I,j=1, \cdots, J}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span></span>。如果生物标志物<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>提示了异常（或者指示了某个事件），就记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">E_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>我们想计算在这个群体中事件发生的顺序<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>，可以使下面的式子概率最大</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>J</mi></munderover><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>I</mi></munderover><mrow><mo fence="true">(</mo><mi>P</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi mathvariant="normal">∣</mi><msub><mi>E</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mi>I</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">¬</mi><msub><mi>E</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">P(X|S) = \prod_{j=1}^J\left[\sum_{k=0}^I\left(P(k)\prod_{i=1}^kP\left(x_{ij}|E_i\right)\prod_{i=k+1}^IP(x_{ij}|\neg E_i)\right)\right] </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2499em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.09618em;">J</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3604em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣¬</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>表示阶段，在阶段<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>⋯</mo><msub><mi>E</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">E_{k+1}\cdots E_{I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>还是尚未发生的事件。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信生存指南</title>
      <link href="/2023/12/27/%E7%94%9F%E4%BF%A1%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/"/>
      <url>/2023/12/27/%E7%94%9F%E4%BF%A1%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1>Gene Ontology Analysis</h1><p>GO分析用于回答一个简单而关键的问题：</p><blockquote><p>“Given a list of genes found to be differentially expressed in my phenotype (e.g. disease) vs. control (e.g. healthy), what are the biological processes, cellular components and molecular functions that are implicated in this phenotype?”</p></blockquote><p>GO富集分析：假如我有200个基因，我去数据库里找这200个基因都有什么功能。假如200个基因里160都跟细胞分裂有关，就有一定把握认为，这种疾病可能与细胞分裂有关。</p><p>需要注意的是，不能简单的用计数方法来评判哪些生物过程更重要，因为不同生物过程复杂程度不一样，一些生物过程可能涉及海量基因，另一些可能只涉及几个基因！</p><p>Gene Set Enrichment Analysis（GSEA）分析：假如你在研究某种心脏病（例如畸形），你从病人身上取了一块标本，做了个测序。然后跟正常的心肌组织比较了一下表达差异，发现有200个基因有差异。于是你在MSigDB这个数据库里搜基因集。所谓基因集就是一组跟某个特定功能或生物过程相关的基因集合。在你的这种研究背景下，你的基因集可以设置为心脏发育和功能相关的基因集。随后执行GSEA算法过程</p><ol><li>对你手上的200个基因排序：有些在疾病中差异非常大，有些则很小。把这些基因按差异从大到小排序。排前面的可能对疾病更关键。</li><li>依次遍历你手上排序的200个基因，如果命中你预定的基因集就加分，否则就扣分，最后计算离原点最远加了多少分。如果说你手上的200个基因和和心脏发育和功能没什么关系，那就会一直扣分，否则在最开始会不断加分。</li><li>假如按照标准排序，你手上的200个基因分数很高，也不能说明你手上的基因就跟心脏发育和功能强相关，因为这个基因集可能超级大，随便挑200个基因都能拿到高分。因此需要一种Bootstrap的方式来证明这200个基因确实与心脏发育和功能有关。方法是随机打乱基因顺序，如果分数显著降低了，就表明这200个基因确实是跟心脏发育和功能有关，因为排名靠前的基因全在这个集合里。</li></ol><p>注意事项：选择合理的背景十分重要！假如你只测了1000个基因，发现200个基因差异表达了，基因差异表达率为20%。对某个生物过程，总共有100个基因参与，在这100个基因里，有30个与你发现的200个差异表达基因重合。如果这个生物过程与你研究的表型无关，理论上你会发现20%属于这个生物过程的基因，也就是20个。但实际上你发现了30个，于是你可以计算一下因为偶然误差不小心多发现了10个属于这个生物过程的差异表达基因的概率，这个概率还是有一些的。</p><p>但有时候，你会在软件里设置背景为&quot;全基因组测序&quot;，但你实际上只测了1000个。假如全基因组有30000个基因，你发现200个差异表达，差异表达率仅0.0066%，在这种条件下，如果生物过程与表型无关，那你只能期望发现大约1个属于这个生物过程的差异表达基因！这种情况下，如果你一口气发现了30个与这个生物过程相关的差异表达基因，那P值将接近0！然而事实情况并不是这样的。</p><blockquote><p>从上面的例子可以看到，整个富集分析的原理就是<strong>超几何分布</strong>。</p></blockquote><h1>一个基于cBioPort的具体分析实例</h1><ol><li>在cBioPortal中找到对应的研究数据Mesothelioma (TCGA, PanCancer Atlas)，在summary界面下载数据</li><li>根据病人生存期Overall Survival (Months)不同，将数据分为高生存期和低生存期，生成<code>Sample ID</code>或其他ID</li><li>使用<code>Custom Selection</code>选项选择一组，然后在<code>Group</code>选项中新建两个组，再选Compare</li><li>在Compare里可以选择</li></ol><h1>多样性α分析</h1><h1>RNAseq bulk</h1><p>内参，通常用于Western blot确认：</p><ul><li>GAPDH：糖酵解反应中的一个酶，广泛分布于各种组织中的细胞</li><li>β-actin：广泛分布于细胞浆内，表达量非常丰富</li></ul><p>Ct：反应扩增次数</p><ul><li>PCR实验中，要在反应系统中加入荧光素，经过Ct个循环之后荧光素耗尽</li></ul>]]></content>
      
      
      <categories>
          
          <category> Bioinformatics </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/2023/12/23/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/23/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>访问者模式可以将算法与其操作的对象类进行解耦。这种模式通过构建一个新的Visitor类，以防止新功能被整合进已有的类中（至少以更小的代价被整合进已有类中）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* v)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Shape</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dot</span>: <span class="keyword">public</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* v)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    v-&gt;<span class="built_in">visitDot</span>(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* v)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    v-&gt;<span class="built_in">visitCircle</span>(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* v)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    v-&gt;<span class="built_in">visitRectangle</span>(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompoundShape</span>: <span class="keyword">public</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* v)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    v-&gt;<span class="built_in">visitCompoundShape</span>(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">visitDot</span><span class="params">(Dot* d)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">visitCircle</span><span class="params">(Circle* c)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">visitRectangle</span><span class="params">(Rectangle* r)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">visitCompoundShape</span><span class="params">(CompoundShape* cs)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XMLExportVisitor</span>: <span class="keyword">public</span> Visitor &#123;</span><br><span class="line">  <span class="function">std::string <span class="title">visitDot</span><span class="params">(Dot* d)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// export the dot coords in xml format</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::string <span class="title">visitCircle</span><span class="params">(Circle* c)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  std::vector&lt;Shape*&gt; shapes;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  XMLExportVisitor exportVisitor = <span class="keyword">new</span> <span class="built_in">XMLExportVisitor</span>();</span><br><span class="line">  <span class="keyword">for</span> (Shape* s: shapes) &#123;</span><br><span class="line">    s-&gt;<span class="built_in">accept</span>(exportVisitor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> exportVisitor;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/2023/12/22/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/22/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>模板方法允许程序员实现一种算法骨架，在具体算法中实现骨架中的每个具体步骤而不改变骨架本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GameAI</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">   std::vector&lt;Structure*&gt; builtStructures;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">collectResources</span>();</span><br><span class="line">      <span class="built_in">buildStructures</span>();</span><br><span class="line">      <span class="built_in">buildUnits</span>();</span><br><span class="line">      <span class="built_in">attack</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">collectResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Structure* s: builtStructures) &#123;</span><br><span class="line">        s-&gt;<span class="built_in">collect</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">buildStructures</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">buildUnits</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Enemy* e = <span class="built_in">closestEnemy</span>();</span><br><span class="line">      Map* m = <span class="built_in">getMap</span>();</span><br><span class="line">      <span class="keyword">if</span> (e == <span class="literal">nullptr</span>) <span class="built_in">sendScouts</span>(m-&gt;center);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">sendWarriors</span>(e-&gt;position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">sendScouts</span><span class="params">(Coords pos)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">sendWarriors</span><span class="params">(Coords pos)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrcsAI</span>: <span class="keyword">public</span> GameAI &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">buildStructures</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">resourceAvailable</span>()) &#123;</span><br><span class="line">      <span class="comment">// build things</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">buildUnits</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// build some units</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// also implement sendScouts and sendWarriors</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterAI</span>: <span class="keyword">public</span> GameAI &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">collectResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// monsters don&#x27;t collect resources</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">buildStructures</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// monsters don&#x27;t build structures</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">buildUnits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// monsters don&#x27;t build units</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态机模式</title>
      <link href="/2023/12/20/%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/20/%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>状态机模式允许一个类在内部状态发生变化时更改其行为，仿佛它转变为另一个类一样。状态机模式与有限状态机密切相关。</p><p>通常的状态机实现随着类所能具有的状态数量增加而显著增加。状态机模式建议将所有所有模式转化为不同的类，并将所有与状态有关的操作封装在这些类当中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AudioPlayer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    State* state;</span><br><span class="line">    Song* currentSong;</span><br><span class="line">    <span class="type">int</span> volume;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AudioPlayer</span>() &#123;</span><br><span class="line">      state = <span class="keyword">new</span> <span class="built_in">ReadyState</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">AudioPlayer</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (state) <span class="keyword">delete</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">changeState</span><span class="params">(State* s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (state) <span class="keyword">delete</span> state;</span><br><span class="line">      state = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clickLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      state-&gt;<span class="built_in">clickLock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clickPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      state-&gt;<span class="built_in">clickPlay</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clickNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      state-&gt;<span class="built_in">clickNext</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clickPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      state-&gt;<span class="built_in">clickPrevious</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">startPlayback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// a service method independent of state</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stopPlayback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">previousSong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fastForward</span><span class="params">(<span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rewind</span><span class="params">(<span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// more service methods independent of state...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    AudioPlayer* player;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">State</span>(AudioPlayer* p): <span class="built_in">player</span>(p) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clickLock</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clickPlay</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clickNext</span><span class="params">(std::string e)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clickPrevious</span><span class="params">(std::string e)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadyState</span>: <span class="keyword">public</span> State &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickLock</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    player-&gt;<span class="built_in">changeState</span>(<span class="keyword">new</span> <span class="built_in">LockedState</span>(player));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickPlay</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    player-&gt;<span class="built_in">changeState</span>(<span class="keyword">new</span> <span class="built_in">PlayingState</span>(player));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickNext</span><span class="params">(std::string e)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    player-&gt;<span class="built_in">nextSong</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickPrevious</span><span class="params">(std::string e)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    player-&gt;<span class="built_in">previousSong</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayingState</span>: <span class="keyword">public</span> State &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickLock</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    player-&gt;<span class="built_in">changeState</span>(<span class="keyword">new</span> <span class="built_in">LockedState</span>(player));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickPlay</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    player-&gt;<span class="built_in">changeState</span>(<span class="keyword">new</span> <span class="built_in">ReadyState</span>(player));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickNext</span><span class="params">(std::string e)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="string">&quot;doubleClick&quot;</span>) player-&gt;<span class="built_in">nextSong</span>();</span><br><span class="line">    <span class="keyword">else</span> player-&gt;<span class="built_in">fastForward</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clickPrevious</span><span class="params">(std::string e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="string">&quot;doubleClick&quot;</span>) player-&gt;<span class="built_in">previous</span>();</span><br><span class="line">    <span class="keyword">else</span> player-&gt;<span class="built_in">rewind</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2023/12/18/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/18/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>观察者模式是一种订阅机制：观察者对象可以第一时间收到其观察对象变化的通知</p><ul><li>一个包含所有订阅者对象的表</li><li>几个用于订阅和取消订阅的方法</li></ul><p>必要时，被订阅者将遍历订阅表，并调用每个观察者的特定方法以通知对应的观察者。</p><p>总结起来，观察者模式有一个<code>EventManager</code>，通过它维护订阅关系。消息发布者调用其<code>notify</code>方法，来通知所有订阅者。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventManager</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::map&lt;std::string, std::vector&lt;EventListener*&gt;&gt; listeners;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">subscribe</span><span class="params">(std::string eventType, EventListener* l)</span> </span>&#123;</span><br><span class="line">      listeners[eventType].<span class="built_in">push_back</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unsubscribe</span><span class="params">(std::string eventType, EventListener* l)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (std::vector&lt;EventListener*&gt;::iterator it = listeners[eventType].<span class="built_in">begin</span>(); it != listeners[eventType].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*it == l) &#123;</span><br><span class="line">          listeners[eventType].<span class="built_in">erase</span>(it);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(std::string eventType, std::string data)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (EventListener* l : listeners[eventType]) &#123;</span><br><span class="line">        l-&gt;<span class="built_in">update</span>(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    File* file;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    EventManager* events;</span><br><span class="line">    <span class="built_in">Editor</span>() &#123;</span><br><span class="line">      events = <span class="keyword">new</span> <span class="built_in">EventManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Editor</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (events) <span class="keyword">delete</span> events;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">openFile</span><span class="params">(std::string path)</span> </span>&#123;</span><br><span class="line">      file = <span class="keyword">new</span> <span class="built_in">File</span>(path);</span><br><span class="line">      events-&gt;<span class="built_in">notify</span>(<span class="string">&quot;open&quot;</span>, file-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">saveFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      file-&gt;<span class="built_in">write</span>();</span><br><span class="line">      events-&gt;<span class="built_in">notify</span>(<span class="string">&quot;save&quot;</span>, file-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">EventListener</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(std::string filename)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingListener</span>: <span class="keyword">public</span> EventListener &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    File* log;</span><br><span class="line">    std::string msg;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LoggingListener</span>(std::string logFilename, std::string message) &#123;</span><br><span class="line">      log = <span class="keyword">new</span> <span class="built_in">File</span>(logFilename);</span><br><span class="line">      msg = message;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">LoggingListener</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (log) <span class="keyword">delete</span> log;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(std::string filename)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      log-&gt;<span class="built_in">write</span>(filename, msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailAlertsListener</span>: <span class="keyword">public</span> EventListener &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::string email;</span><br><span class="line">    std::string msg;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">EmailAlertsListener</span>(std::string em, std::string message): <span class="built_in">email</span>(em), <span class="built_in">msg</span>(message) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(std::string filename)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      system.<span class="built_in">email</span>(email, filename, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> editor = <span class="keyword">new</span> <span class="built_in">Editor</span>();</span><br><span class="line">  <span class="keyword">auto</span> logger = <span class="keyword">new</span> <span class="built_in">LoggingListener</span>(<span class="string">&quot;./log.txt&quot;</span>, <span class="string">&quot;file opened&quot;</span>);</span><br><span class="line">  editor-&gt;events-&gt;<span class="built_in">subscribe</span>(<span class="string">&quot;open&quot;</span>, logger);</span><br><span class="line">  <span class="keyword">auto</span> emailAlerts = <span class="keyword">new</span> <span class="built_in">EmailAlertsListener</span>(<span class="string">&quot;xx@xx.com&quot;</span>, <span class="string">&quot;file changed&quot;</span>);</span><br><span class="line">  editor-&gt;events-&gt;<span class="built_in">subscribe</span>(<span class="string">&quot;save&quot;</span>, emailAlerts);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2023/12/17/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/17/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>允许在不暴露对象实现细节的情况下，将对象恢复到之前的状态。</p><ul><li>快照对象应该是不可变对象，仅被初始化一次</li></ul><p>快照发起者可以实现<code>restore(Momento* m)</code>方法，也可以由快照实现<code>restore()</code>方法。后者可以将快照对象与照看者对象（CareTaker）解耦。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::string text;</span><br><span class="line">    <span class="type">int</span> curX, curY, selectionWidth;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setText</span><span class="params">(std::string t)</span> </span>&#123;</span><br><span class="line">      text = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setCursor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">      curX = x;</span><br><span class="line">      curY = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setSelectionWdith</span><span class="params">(<span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">      selectionWidth = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Snapshot* <span class="title">createSnapshot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Snapshot</span>(<span class="keyword">this</span>, text, curX, curY, selectionWidth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snapshot</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Editor* editor;</span><br><span class="line">    std::string text;</span><br><span class="line">    <span class="type">int</span> curX, curY, selectionWidth;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Snapshot</span>(Editor* e, std::string t, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w): <span class="built_in">editor</span>(e), <span class="built_in">text</span>(t), <span class="built_in">curX</span>(x), <span class="built_in">curY</span>(y), <span class="built_in">selectionWidth</span>(w) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">restore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      editor-&gt;<span class="built_in">setText</span>(text);</span><br><span class="line">      editor-&gt;<span class="built_in">setCursor</span>(curX, curY);</span><br><span class="line">      editor-&gt;<span class="built_in">setSelectionWidth</span>(selectionWidth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Snapshot* backup;</span><br><span class="line">    Editor* editor;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Command</span>(Editor* e): <span class="built_in">editor</span>(e), <span class="built_in">backup</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeBackup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      backup = editor-&gt;<span class="built_in">createSnapshot</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (backup) backup-&gt;<span class="built_in">restore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CopyCommand</span>: <span class="keyword">public</span> Command &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// execute something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2023/12/16/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/16/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>组件之间存在复杂依赖的时候，可以构造一个中介者统一管理组件之间的通讯。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Mediator</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">notify</span><span class="params">(Component* sender, std::string event)</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthenticationDialog</span>: <span class="keyword">public</span> Mediator &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::string title;</span><br><span class="line">    Checkbox *loginOrRegisterChkBx;</span><br><span class="line">    Textbox *loginUsername, *loginPassword;</span><br><span class="line">    Textbox *registrationUsername, *registrationPassword, *registrationEmail;</span><br><span class="line">    Button *okBtn, *cancelBtn;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AuthenticationDialog</span>() &#123;</span><br><span class="line">      <span class="comment">// create all components by pasing the current</span></span><br><span class="line">      <span class="comment">// mediator into their constructors to establish links</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(Component* sender, std::string event)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (sender == loginOrRegisterChkBx &amp;&amp; event == <span class="string">&quot;check&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (loginOrRegisterChkBx-&gt;checked) title = <span class="string">&quot;Log in&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> title = <span class="string">&quot;Register&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (sender == okBtn &amp;&amp; event == <span class="string">&quot;click&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (loginOrRegister-&gt;checked) &#123;</span><br><span class="line">          <span class="comment">// try to find the user</span></span><br><span class="line">          <span class="keyword">if</span> (!found) <span class="comment">// show error msg</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// create user account and log that user in</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  Mediator* dialog;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Component</span>(Mediator* m): <span class="built_in">dialog</span>(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      dialog-&gt;<span class="built_in">notify</span>(<span class="keyword">this</span>, <span class="string">&quot;click&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      dialog-&gt;<span class="built_in">notify</span>(<span class="keyword">this</span>, <span class="string">&quot;keypress&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>: <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Textbox</span>: <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Checkbox</span>: <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">void</span> check &#123;</span><br><span class="line">      dialog-&gt;<span class="built_in">notify</span>(<span class="keyword">this</span>, <span class="string">&quot;check&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2023/12/15/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/15/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>迭代器模式用于访问组合对象。迭代器知晓组合对象的内部结构，将迭代的实现细节屏蔽在迭代器内部，而组合对象本身不负责遍历。</p><p>迭代器模式允许外部遍历整个对象而不暴露组合对象的内部实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SocialNetwork</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ProfileIterator* <span class="title">createFriendsIterator</span><span class="params">(<span class="type">int</span> profileId)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ProfileIterator* <span class="title">createCoworkersIterator</span><span class="params">(<span class="type">int</span> profileId)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">SocialNetwork</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Facebook</span>: <span class="keyword">public</span> SocialNetwork &#123;</span><br><span class="line">  <span class="function">ProfileIterator* <span class="title">createFriendsIterator</span><span class="params">(<span class="type">int</span> profileId)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FacebookIterator</span>(<span class="keyword">this</span>, profileId, <span class="string">&quot;friends&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">ProfileIterator* <span class="title">createCoworkersIterator</span><span class="params">(<span class="type">int</span> profileId)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FacebookIterator</span>(<span class="keyword">this</span>, profileId, <span class="string">&quot;coworkers&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProfileIterator</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Profile* <span class="title">getNext</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">hasMore</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FacebookIterator</span>: <span class="keyword">public</span> ProfileIterator &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Facebook* facebook;</span><br><span class="line">    <span class="type">int</span> profileId;</span><br><span class="line">    std::string type;</span><br><span class="line">    <span class="type">int</span> currentPosition;</span><br><span class="line">    std::vector&lt;Profile*&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lazyInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (cache.<span class="built_in">size</span>() == <span class="number">0</span>) </span><br><span class="line">        cache = facebook-&gt;<span class="built_in">socialGraphRequest</span>(profileId, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FacebookIterator</span>(Facebook* fb, <span class="type">int</span> id, std::string t): <span class="built_in">facebook</span>(fb), <span class="built_in">profileId</span>(id), <span class="built_in">type</span>(t), <span class="built_in">currentPosition</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Profile* <span class="title">getNext</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">hasMore</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> result = cache[currentPosition];</span><br><span class="line">        currentPosition++;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasMore</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="built_in">lazyInit</span>();</span><br><span class="line">      <span class="keyword">return</span> currentPosition &lt; cache.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SocialSpammer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">send</span><span class="params">(ProfileIterator* iterator, std::string&amp; message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span>(iterator-&gt;<span class="built_in">hasMore</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> profile = iterator-&gt;<span class="built_in">getNext</span>();</span><br><span class="line">        System.<span class="built_in">sendEmail</span>(profile-&gt;<span class="built_in">getEmail</span>(), message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SocialSpammer spammer;</span><br><span class="line">  Facebook facebook;</span><br><span class="line">  FacebookIterator* iterator = facebook.<span class="built_in">createFriendsIterator</span>(<span class="number">1</span>);</span><br><span class="line">  spammer.<span class="built_in">send</span>(iterator, <span class="string">&quot;some spam&quot;</span>);</span><br><span class="line">  <span class="keyword">delete</span> iterator;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，C++中还有一种泛型写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="comment">// T: 普通对象类型，U：组合对象类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::vector&lt;T&gt;::iterator iter_type;</span><br><span class="line">    <span class="built_in">Iterator</span>(U* p_data, <span class="type">bool</span> reverse = <span class="literal">false</span>): <span class="built_in">m_p_data_</span>(p_data) &#123;</span><br><span class="line">      m_it_ = m_p_data_-&gt;m_data_.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">First</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      m_it_ = m_p_data_-&gt;m_data_.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      m_it_++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (m_it_ == m_p_data_-&gt;m_data_.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iter_type <span class="title">Current</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m_it_;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    U* m_p_data_;</span><br><span class="line">    iter_type m_it_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2023/12/13/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/13/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>把请求封装成一个对象，从而分离请求发起和执行。发起者和执行者之间通过命令对象进行沟通，便于请求对象的储存、传递、调用、增加和管理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    Application* app_;</span><br><span class="line">    Editor* editor_;</span><br><span class="line">    std::string backup_;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Command</span>(Application* app, Editor* editor): <span class="built_in">app_</span>(app), <span class="built_in">editor_</span>(editor) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">saveBackup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      backup_ = editor_-&gt;text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      editor_-&gt;<span class="built_in">setText</span>(backup_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CopyCommand</span>: <span class="keyword">public</span> Command &#123;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    app_-&gt;<span class="built_in">setClipboard</span>(editor_-&gt;<span class="built_in">getSelection</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CutCommand</span>: <span class="keyword">public</span> Command &#123;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">saveBackup</span>();</span><br><span class="line">    app_-&gt;<span class="built_in">setClipboard</span>(editor_-&gt;<span class="built_in">getSelection</span>());</span><br><span class="line">    editor_-&gt;<span class="built_in">deleteSelection</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasteCommand</span>: <span class="keyword">public</span> Command &#123;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">saveBackup</span>();</span><br><span class="line">    editor_-&gt;<span class="built_in">replaceSelection</span>(app-&gt;<span class="built_in">getClipboard</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UndoCommand</span>: <span class="keyword">public</span> Command &#123;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    app_-&gt;<span class="built_in">undo</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommandHistory</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Command*&gt; history_;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Command* c)</span> </span>&#123;</span><br><span class="line">      history_.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Command* <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (history_.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      Comman* cmd = history_.<span class="built_in">back</span>();</span><br><span class="line">      history_.<span class="built_in">pop_back</span>();</span><br><span class="line">      <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::string text_;</span><br><span class="line">    <span class="function">std::string <span class="title">getSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// get copy of selected text</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// delete selected text</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">replaceSelection</span><span class="params">(std::string text)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// insert the contents at the current position</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::string clipboard_;</span><br><span class="line">    std::vector&lt;Editor*&gt; editors_;</span><br><span class="line">    Editor* activeEditor_;</span><br><span class="line">    CommandHistory history;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> createUI &#123;</span><br><span class="line">      <span class="comment">// create necessary elements</span></span><br><span class="line"></span><br><span class="line">      std::function&lt;<span class="type">void</span>()&gt; copy = [<span class="keyword">this</span>]() &#123;</span><br><span class="line">        <span class="built_in">executeCommand</span>(<span class="keyword">new</span> <span class="built_in">CopyCommand</span>(<span class="keyword">this</span>, activeEditor_));</span><br><span class="line">      &#125;</span><br><span class="line">      copyButton.<span class="built_in">setCommand</span>(copy);</span><br><span class="line">      shortcuts.<span class="built_in">onKeyPress</span>(<span class="string">&quot;ctrl+c&quot;</span>, copy);</span><br><span class="line"></span><br><span class="line">      std::function&lt;<span class="type">void</span>()&gt; cut = [<span class="keyword">this</span>]() &#123;</span><br><span class="line">        <span class="built_in">executeCommand</span>(<span class="keyword">new</span> <span class="built_in">CutCommand</span>(<span class="keyword">this</span>, activeEditor_));</span><br><span class="line">      &#125;</span><br><span class="line">      cutButton.<span class="built_in">setCommand</span>(cut);</span><br><span class="line">      shortcuts.<span class="built_in">onKeyPress</span>(<span class="string">&quot;ctrl+x&quot;</span>, cut);</span><br><span class="line"></span><br><span class="line">      std::function&lt;<span class="type">void</span>()&gt; undo = [<span class="keyword">this</span>]() &#123;</span><br><span class="line">        <span class="built_in">executeCommand</span>(<span class="keyword">new</span> <span class="built_in">UndoCommand</span>(<span class="keyword">this</span>, activeEditor_));</span><br><span class="line">      &#125;</span><br><span class="line">      undoButton.<span class="built_in">setCommand</span>(undo);</span><br><span class="line">      shortcuts.<span class="built_in">onKeyPress</span>(<span class="string">&quot;ctrl+z&quot;</span>, undo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">executeCommand</span><span class="params">(Command* c)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (c-&gt;<span class="built_in">execute</span>()) history.<span class="built_in">push</span>(c);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">delete</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">auto</span> command = history.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">if</span> (command) command-&gt;<span class="built_in">undo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2023/12/12/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/12/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>通常而言，责任链模式涉及到一个共同的接口或抽象类，各个实际处理类继承该接口并持有下一个处理器的引用。</p><p>但是下面这个例子将给出一个在GUI设计中的特殊责任链实现模式，通过子组件对父组件的继承关系自然形成引用。下面的设计通过<code>Container* container</code>指针实现了链路，同时，向上传递的过程被抽象出来，安插在<code>Component</code>类中。</p><blockquote><p>这种实现方式是将所有业务逻辑全部包含在类内部的思路，它更加清晰，但同时也缺乏可扩展性。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ComponentWithContextualHelp</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showHelp</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ComponentWithContextualHelp</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span>: <span class="keyword">public</span> ComponentWithContextualHelp &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    Container* container;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::string tooltipText;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showHelp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!tooltipText.<span class="built_in">empty</span>()) <span class="comment">// show tooltip</span></span><br><span class="line">      <span class="keyword">else</span> container-&gt;<span class="built_in">showHelp</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setContainer</span><span class="params">(Container* pContainer)</span> </span>&#123;</span><br><span class="line">      container = pContainer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>: <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    std::vector&lt;Component*&gt; components;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Component* child)</span> </span>&#123;</span><br><span class="line">      components.<span class="built_in">push_back</span>(child);</span><br><span class="line">      child-&gt;<span class="built_in">setContainer</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>: <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Panel</span>: <span class="keyword">public</span> Container &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::string modalHelpText;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showHelp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!modalHelpText.<span class="built_in">empty</span>()) <span class="comment">// show modal window for help</span></span><br><span class="line">      <span class="keyword">else</span> Container::<span class="built_in">showHelp</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog</span>: <span class="keyword">public</span> Container &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::string wikiPageUrl;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showHelp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!wikiPageUrl.<span class="built_in">empty</span>()) <span class="comment">// show wiki help page</span></span><br><span class="line">      <span class="keyword">else</span> Container::<span class="built_in">showHelp</span>(); </span><br><span class="line">      <span class="comment">// 或者也可以更显式地调用而非通过继承: container-&gt;showHelp()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/2023/12/11/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/11/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>flyweight pattern</p></blockquote><p>实例的属性可分为两种：</p><ul><li>内在状态intrinsic state：可以被共享的状态</li><li>外在状态extrinsic state：不可被共享的状态，经常被外部实例更改</li></ul><p>享元模式的本质是，抽取公共属性作为单独的类，以静态形式存储。每个实例都拥有这个公共属性的指针。也即“共享”一部分“元数据”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeType</span> &#123;</span><br><span class="line">  std::string name_;</span><br><span class="line">  std::string color_;</span><br><span class="line">  std::string texture_;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TreeType</span>(std::string name, std::string color, Texture texture): <span class="built_in">name_</span>(name), <span class="built_in">color_</span>(color), <span class="built_in">texture_</span>(texture) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">const</span> Canvas&amp; c, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// draw with the intrinsic color &amp; texture + extrinsic xy coord</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeFactory</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> std::unordered_map&lt;std::string, std::shared_ptr&lt;TreeType&gt;&gt; treeTypes_;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;TreeType&gt; <span class="title">getTreeType</span><span class="params">(<span class="type">const</span> std::string name, <span class="type">static</span> <span class="type">const</span> std::string color, <span class="type">const</span> std::string texture)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">auto</span> it = treeTypes_.<span class="built_in">find</span>(name);</span><br><span class="line">      <span class="keyword">if</span> (it != treeTypes_.<span class="built_in">end</span>()) <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">      <span class="keyword">auto</span> t = std::<span class="built_in">make_shared</span>&lt;TreeType&gt;(name, color, texture);</span><br><span class="line">      treeTypes_[name] = t;</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::unordered_map&lt;std::string, std::shared_ptr&lt;TreeType&gt;&gt; TreeFactory::treeTypes_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">  <span class="type">int</span> x_;</span><br><span class="line">  <span class="type">int</span> y_;</span><br><span class="line">  std::shared_ptr&lt;TreeType&gt; type_; <span class="comment">// 享元模式的核心。type_在相同种类的树之间是共享的。此处必须使用指针，而不是实例！否则存储的将是副本，而不是共享对象。</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Tree</span>(<span class="type">int</span> x, <span class="type">int</span> y, std::shared_ptr&lt;TreeType&gt; type): <span class="built_in">x_</span>(x), <span class="built_in">y_</span>(y), <span class="built_in">type_</span>(type) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">const</span> Canvas&amp; c)</span> </span>&#123;</span><br><span class="line">      type_-&gt;<span class="built_in">draw</span>(c, x_, y_);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Forest</span> &#123;</span><br><span class="line">  std::vector&lt;Tree&gt; trees_;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">plantTree</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, std::string name, std::string color, std::string texture)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> type = TreeFactory::<span class="built_in">getTreeType</span>(name, color, texture);</span><br><span class="line">    Tree tree = <span class="built_in">Tree</span>(x, y, type);</span><br><span class="line">    trees_.<span class="built_in">push_back</span>(tree);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">const</span> Canvas&amp; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; trees_.<span class="built_in">size</span>(); i++) trees_[i].<span class="built_in">draw</span>(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2023/12/11/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/11/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>外观/门面facade模式可以将应用与一个复杂的第三方库简单地连接起来，尤其是应用只依赖于复杂第三方库的一小部分功能的时候。它有四个部分</p><ul><li>Facade</li><li>Additional Facade: 继承Facade并为Facade添加一些其他功能，而不改变Facade这一简单接口本身</li><li>The Complex system</li><li>client</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a complex 3rd party video conversion framework</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoFile</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OggCompressionCodec</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MPEG4CompressionCodec</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodecFactory</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BitrateReader</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioMixer</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// here is the facade class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoConverter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">File <span class="title">convert</span><span class="params">(std::string&amp; filename, std::string&amp; format)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 返回裸指针不是一个好习惯，文档中必须清晰说明谁拥有这个指针并负责其生命周期</span></span><br><span class="line">      <span class="comment">// 直接返回File(result)将使用编译器的返回值优化功能，安全且高效</span></span><br><span class="line">      VideoFile file = <span class="built_in">VideoFile</span>(filename);</span><br><span class="line">      CodecFactory codecfactory = <span class="built_in">CodecFactory</span>();</span><br><span class="line">      Codec* sourceCodec = codecfactory.<span class="built_in">extract</span>(file);</span><br><span class="line">      Codec* destinationCodec = <span class="literal">nullptr</span>;</span><br><span class="line">      <span class="keyword">if</span> (format == <span class="string">&quot;mp4&quot;</span>) destinationCodec = <span class="built_in">MPEG4CompressionCodec</span>();</span><br><span class="line">      <span class="keyword">else</span> destinationCodec = <span class="built_in">OggCompressionCodec</span>();</span><br><span class="line">      Buffer buffer = BitrateReader::<span class="built_in">read</span>(filename, sourceCodec);</span><br><span class="line">      Buffer result = BitrateReader::<span class="built_in">convert</span>(buffer, destinationCodec);</span><br><span class="line">      AutoMixer mixer = <span class="built_in">AutoMixer</span>();</span><br><span class="line">      result = mixer.<span class="built_in">fix</span>(result);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">delete</span> destinationCodec;</span><br><span class="line">      <span class="keyword">delete</span> sourceCodec;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">File</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>(<span class="type">int</span> argc, <span class="type">char</span>* argv[]) &#123;</span><br><span class="line">  VideoConverter converter = <span class="built_in">VideoConverter</span>();</span><br><span class="line">  File mp4 = converter-&gt;<span class="built_in">convert</span>(<span class="string">&quot;some.ogg&quot;</span>, <span class="string">&quot;mp4&quot;</span>);</span><br><span class="line">  mp4.<span class="built_in">save</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>桥梁模式</title>
      <link href="/2023/12/09/%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/09/%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>将“抽象化Abstraction”与“实现化Implementation”解耦。抽象的本意是将强耦合（继承）转换为弱耦合（聚合）。这里的抽象与实现不是一般程序设计下的抽象与实现</p><ul><li>抽象：主要指高层的控制层，定义了基于“实现”的操作，如“遥控器”操作“电视机”。但是遥控器只负责发射指令，不关心指令的具体实现。</li><li>实现：抽象行为的具体执行者，比如“电视机”接受“遥控器”发出的关机指令。电视机接收指令，并负责关闭自己。</li></ul><p>如此一来，抽象与实现就可以解耦，分别维护。</p><blockquote><p>个人感觉最直观的还是类多维度解耦最直观：比如设备有电视、收音机；遥控器有基本遥控器、高级遥控器。如果用vanilla OOP的角度，需要设计4个类：电视基本遥控器、电视高级遥控器……但是使用桥接模式可以把实现（机器）绑定（聚合）给抽象（遥控器）。机器、遥控器实现相同的接口即可。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteControl</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    Device device_;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RemoteControl</span>(Device&amp; device): <span class="built_in">device_</span>(device) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">togglePower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (device_.<span class="built_in">isEnabled</span>()) device_.<span class="built_in">disable</span>();</span><br><span class="line">      <span class="keyword">else</span> device_.<span class="built_in">enable</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">volumeDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      device_.<span class="built_in">setVolume</span>(device_.<span class="built_in">getVolume</span>() - <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">volumeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      device_.<span class="built_in">setVolume</span>(device_.<span class="built_in">getVolume</span>() + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">channelDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      device_.<span class="built_in">setChannel</span>(device_.<span class="built_in">getChannel</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">channelUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      device_.<span class="built_in">setChannel</span>(device_.<span class="built_in">getChannel</span>() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedRemoteControl</span>: <span class="keyword">public</span> RemoteControl &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      device_.<span class="built_in">setVolume</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Device</span> &#123; <span class="comment">// interface, provides only primitive operations</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> enabled_;</span><br><span class="line">    <span class="type">int</span> volume_;</span><br><span class="line">    <span class="type">int</span> channel_;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">isEnabled</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">enable</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">disable</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getVolume</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setVolume</span><span class="params">(<span class="type">int</span> percent)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getChannel</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// all devices follow the same interface</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span>: <span class="keyword">public</span> Device &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Radio</span>: <span class="keyword">public</span> Device &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  TV* tv = <span class="keyword">new</span> <span class="built_in">TV</span>();</span><br><span class="line">  Remote* remote = <span class="keyword">new</span> <span class="built_in">RemoteControl</span>(*tv);</span><br><span class="line">  remote.<span class="built_in">togglePower</span>();</span><br><span class="line"></span><br><span class="line">  Radio* radio = <span class="keyword">new</span> <span class="built_in">Radio</span>();</span><br><span class="line">  AdvancedRemote* advancedRemote = <span class="keyword">new</span> <span class="built_in">AdvancedRemoteControl</span>(*radio);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> tv;</span><br><span class="line">  <span class="keyword">delete</span> remote;</span><br><span class="line">  <span class="keyword">delete</span> radio;</span><br><span class="line">  <span class="keyword">delete</span> advancedRemote;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2023/12/09/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/09/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>代理模式感觉也是套一层壳。</p><blockquote><p>适配器模式主要关注于解决接口的不兼容性问题，而代理模式主要关注于控制对其它对象的访问</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThirdPartyYouTubeLib</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::vector&lt;Video&gt; <span class="title">listVideos</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Video <span class="title">getVideoInfo</span><span class="params">(<span class="type">int</span> videoId)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">downloadVideo</span><span class="params">(<span class="type">int</span> videoId)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThirdPartyYouTubeClass</span>: <span class="keyword">public</span> ThirdPartyYouTubeLib &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::vector&lt;Video&gt; <span class="title">listVideos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// return list of videos</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Video <span class="title">getVideoInfo</span><span class="params">(<span class="type">int</span> videoId)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// return VideoInfo by videoId</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">downloadVideo</span><span class="params">(<span class="type">int</span> videoId)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// download a video</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CachedYouTubeClass</span>: <span class="keyword">public</span> ThirdPartyYouTubeLib &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    ThirdPartyYouTubeLib* service;</span><br><span class="line">    std::vector&lt;Video&gt;* listCache;</span><br><span class="line">    Video* videoCache;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> needReset;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CachedYouTubeClass</span>(ThirdPartyYouTubeLib* service): <span class="built_in">service</span>(service), <span class="built_in">needReset</span>(<span class="literal">false</span>), <span class="built_in">listCache</span>(<span class="literal">nullptr</span>), <span class="built_in">videoCache</span>(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!service) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;service cannot be nullptr&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">CachedYouTubeClass</span>() &#123;</span><br><span class="line">      <span class="keyword">delete</span> listCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;Video&gt; <span class="title">listVideos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      std::vector&lt;Video&gt; videos;</span><br><span class="line">      <span class="keyword">if</span> (listCache == <span class="literal">nullptr</span> || needReset) &#123;</span><br><span class="line">        <span class="keyword">delete</span> listCache;</span><br><span class="line">        listCache = <span class="keyword">new</span> std::vector&lt;Video&gt;;</span><br><span class="line">        videos = service-&gt;<span class="built_in">listVideos</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; videos.<span class="built_in">size</span>(); i++)</span><br><span class="line">          listCache-&gt;<span class="built_in">push_back</span>(videos[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listCache-&gt;<span class="built_in">size</span>(); i++)</span><br><span class="line">          videos.<span class="built_in">push_back</span>(*listCache[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> videos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Video <span class="title">getVideoInfo</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (videoCache == <span class="literal">nullptr</span> || needReset) &#123;</span><br><span class="line">        <span class="keyword">delete</span> videoCache;</span><br><span class="line">      &#125;</span><br><span class="line">      Video newVideo = service-&gt;<span class="built_in">getVideoInfo</span>(id)</span><br><span class="line">      videoCache = <span class="keyword">new</span> <span class="built_in">Video</span>(newVideo);</span><br><span class="line">      <span class="keyword">return</span> *videoCache; <span class="comment">// 存在破坏封装性的风险，考虑返回一个副本更妥当</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">downloadVideo</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">videoExists</span>(id) || needReset)</span><br><span class="line">        service-&gt;<span class="built_in">downloadVideo</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/2023/12/06/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/06/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>经典装饰器模式，装饰器本身是一种聚合aggregation。装饰器类和被装饰对象应该有共同接口（比如<code>read</code>和<code>write</code>）。在实现这些接口的时候，应该调用被装饰对象的方法。</p><p>方法可以被装饰（Python常见），同时类也可以被装饰！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">DataSource</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">writeData</span><span class="params">(std::string&amp; data)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">readData</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileDataSource</span>: <span class="keyword">public</span> DataSource &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FileDataSource</span>(std::string&amp; filename) &#123;</span><br><span class="line">        <span class="comment">// get this file</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeData</span><span class="params">(std::string&amp; data)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write data to file</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">readData</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// read data from file</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataSourceDecorator</span>: <span class="keyword">public</span> DataSource &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    DataSource* wrappee;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DataSourceDecorator</span>(DataSource* datasource): <span class="built_in">wrappee</span>(datasource) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!datasource) &#123;</span><br><span class="line">          <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;DataSource cannot be nullptr&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeData</span><span class="params">(std::string&amp; data)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      wrappee-&gt;<span class="built_in">writeData</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">readData</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> wrappee-&gt;<span class="built_in">readData</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">DataSourceDecorator</span>() &#123;</span><br><span class="line">      <span class="keyword">delete</span> wrappee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncryptionDecorator</span>: <span class="keyword">public</span> DataSourceDecorator &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">writeData</span><span class="params">(std::string&amp; data)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// encrypt the data</span></span><br><span class="line">    std::string encryptedData = <span class="built_in">encrypt</span>(data);</span><br><span class="line">    wrappee-&gt;<span class="built_in">writeData</span>(encryptedData);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::string <span class="title">readData</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// decrypt data</span></span><br><span class="line">    std::string data = wrappee-&gt;<span class="built_in">readData</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decrypt</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompressionDecorator</span>: <span class="keyword">public</span> DataSourceDecorator &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">writeData</span><span class="params">(std::string&amp; data)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// compress the data</span></span><br><span class="line">    std::string encryptedData = <span class="built_in">compress</span>(data);</span><br><span class="line">    wrappee-&gt;<span class="built_in">writeData</span>(encryptedData);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::string <span class="title">readData</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// decompress data</span></span><br><span class="line">    std::string data = wrappee-&gt;<span class="built_in">readData</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decompress</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  FileDataSource* source = <span class="keyword">new</span> <span class="built_in">FileDataSource</span>(<span class="string">&quot;file.dat&quot;</span>);</span><br><span class="line">  source-&gt;<span class="built_in">writeData</span>(<span class="string">&quot;salary records&quot;</span>);</span><br><span class="line">  source = <span class="keyword">new</span> <span class="built_in">CompressionDecorator</span>(source);</span><br><span class="line">  source-&gt;<span class="built_in">writeData</span>(<span class="string">&quot;another salary records&quot;</span>);</span><br><span class="line">  source = <span class="keyword">new</span> <span class="built_in">EncryptionDecorator</span>(source);</span><br><span class="line">  source-&gt;<span class="built_in">writeData</span>(<span class="string">&quot;last salary records&quot;</span>);</span><br><span class="line">  <span class="keyword">delete</span> source;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组合模式</title>
      <link href="/2023/12/06/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/06/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>组合模式是一种树形结构，有两种重要节点：叶节点和组合节点。组合节点可以包含叶节点或子组合节点。但是无论叶节点还是组合节点，<strong>都有相同的接口</strong>，只不过叶节点执行具体的操作，而组合节点执行遍历，并将操作传递给子节点。</p><p>组合模式的树形结构有一些独特的优势，例如，你可以任意选择若干个子树，然后重新组合，成为一个新的树而不干扰现有的结构！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graphic</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">(Canvas&amp; c)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Graphic</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dot</span>: <span class="keyword">public</span> Graphic &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x_;</span><br><span class="line">    <span class="type">int</span> y_;</span><br><span class="line">    <span class="built_in">Dot</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x_</span>(x), <span class="built_in">y_</span>(y) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">      x_ += x;</span><br><span class="line">      y_ += y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(Canvas&amp; c)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// draw dot on the canvas</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Dot &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> radius_;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> r): <span class="built_in">Dot</span>(x, y), <span class="built_in">radius_</span>(r) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(Canvas&amp; c)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// draw a circle on the canvas</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompoundGraphic</span>: <span class="keyword">public</span> Graphic &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::vector&lt;Graphic*&gt; children;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Graphic* child)</span> </span>&#123;</span><br><span class="line">      children.<span class="built_in">push_back</span>(child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Graphic* child)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// delete from children</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; children.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        children[i]-&gt;<span class="built_in">move</span>(x, y);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(Canvas&amp; c)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// for each child component, draw the component</span></span><br><span class="line">      <span class="comment">// also draw the bounding boxes</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    CompoundGraphic all_;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      all_ = <span class="built_in">CompoundGraphic</span>();</span><br><span class="line">      all_.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">Dot</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">      all_.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">Circle</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">groupSelected</span><span class="params">(std::vector&lt;Graphic*&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">      CompoundGraphic* group = <span class="keyword">new</span> <span class="built_in">CompoundGraphic</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        group.<span class="built_in">add</span>(arr[i]);</span><br><span class="line">        all_.<span class="built_in">remove</span>(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      all_.<span class="built_in">add</span>(group);</span><br><span class="line">      all_.<span class="built_in">draw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意，上面的代码存在内存管理问题！只是一个示例！改成这样或许能够缓解内存管理问题：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Graphic* child)</span> </span>&#123;</span><br><span class="line">  children.<span class="built_in">push_back</span>(std::<span class="built_in">unique_ptr</span>&lt;Graphic&gt;(child));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>脑区解剖分割笔记</title>
      <link href="/2023/12/03/%E8%84%91%E5%8C%BA%E8%A7%A3%E5%89%96%E5%88%86%E5%89%B2%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/12/03/%E8%84%91%E5%8C%BA%E8%A7%A3%E5%89%96%E5%88%86%E5%89%B2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li>background</li><li>第三脑室3rd-Ventricle</li><li>第四脑室4th-Ventricle</li><li>伏隔核✅Right-Accumbens-Area：在大脑的快乐中枢对诸如食物、性、毒品等刺激有反应</li><li>Left-Accumbens-Area</li><li>杏仁核Right-Amygdala</li><li>Left-Amygdala</li><li>Brain-Stem</li><li>尾状核✅Right-Caudate</li><li>Left-Caudate</li><li>Right-Cerebellum-Exterior</li><li>Left-Cerebellum-Exterior</li><li>Right-Cerebellum-White-Matter</li><li>Left-Cerebellum-White-Matter</li><li>Right-Cerebral-White-Matter</li><li>Left-Cerebral-White-Matter</li><li>Right-Hippocampus</li><li>Left-Hippocampus</li><li>Right-Inf-Lat-Vent</li><li>Left-Inf-Lat-Vent</li><li>Right-Lateral-Ventricle</li><li>Left-Lateral-Ventricle</li><li>苍白球Right-Pallidum</li><li>Left-Pallidum</li><li>壳核Right-Putamen</li><li>Left-Putamen</li><li>丘脑Right-Thalamus-Proper</li><li>Left-Thalamus-Proper</li><li>腹侧间脑（非解剖结构）Right-Ventral-DC</li><li>Left-Ventral-DC</li><li>小脑蚓部Cerebellar-Vermal-Lobules-I-V</li><li>Cerebellar-Vermal-Lobules-VI-VII</li><li>Cerebellar-Vermal-Lobules-VIII-X</li><li>基底前脑Left-Basal-Forebrain</li><li>Right-Basal-Forebrai</li><li>扣带回Right-ACgG–anterior-cingulate-gyrus</li><li>Left-ACgG–anterior-cingulate-gyrus</li><li>岛叶Right-AIns–anterior-insula</li><li>眶回Left-AIns–anterior-insula</li><li>眶回Right-AOrG–anterior-orbital-gyrus</li><li>Left-AOrG–anterior-orbital-gyrus</li><li>角回Right-AnG—angular-gyrus</li><li>Left-AnG—angular-gyrus</li><li>距状沟Right-Calc–calcarine-cortex</li><li>Left-Calc–calcarine-cortex</li><li>颞叶岛盖？Right-CO----central-operculum</li><li>Left-CO----central-operculum</li><li>楔叶Right-Cun—cuneus</li><li>Left-Cun—cuneus</li><li>内嗅区Right-Ent—entorhinal-area</li><li>Left-Ent—entorhinal-area</li><li>额叶岛盖Right-FO----frontal-operculum</li><li>Left-FO----frontal-operculum 53 : Right-FRP—frontal-pole 54 : Left-FRP—frontal-pole</li><li>枕颞内侧回/discontinuous occipitotemporal gyrus/梭状回Right-FuG—fusiform-gyrus</li><li>Left-FuG—fusiform-gyrus 57 : Right-GRe—gyrus-rectus 58 : Left-GRe—gyrus-rectus 59 : Right-IOG—inferior-occipital-gyrus , 60 : Left-IOG—inferior-occipital-gyrus 61 : Right-ITG—inferior-temporal-gyrus 62 : Left-ITG—inferior-temporal-gyrus 63 : Right-LiG—lingual-gyrus 64 : Left-LiG—lingual-gyrus 65 : Right-LOrG–lateral-orbital-gyrus 66 : Left-LOrG–lateral-orbital-gyrus 67 : Right-MCgG–middle-cingulate-gyrus 68 : Left-MCgG–middle-cingulate-gyrus 69 : Right-MFC—medial-frontal-cortex 70 : Left-MFC—medial-frontal-cortex 71 : Right-MFG—middle-frontal-gyrus 72 : Left-MFG—middle-frontal-gyrus 73 : Right-MOG—middle-occipital-gyrus 74 : Left-MOG—middle-occipital-gyrus 75 : Right-MOrG–medial-orbital-gyrus 76 : Left-MOrG–medial-orbital-gyrus 77 : Right-MPoG–postcentral-gyrus 78 : Left-MPoG–postcentral-gyrus 79 :</li><li>中央前回Right-MPrG–precentral-gyrus</li><li>Left-MPrG–precentral-gyrus</li><li>额上回Right-MSFG–superior-frontal-gyrus</li><li>Left-MSFG–superior-frontal-gyrus 83 : Right-MTG—middle-temporal-gyrus 84 : Left-MTG—middle-temporal-gyrus 85 : Right-OCP—occipital-pole 86 : Left-OCP—occipital-pole 87 : Right-OFuG–occipital-fusiform-gyrus 88 : Left-OFuG–occipital-fusiform-gyrus 89 : Right-OpIFG-opercular-part-of-the-IFG 90 : Left-OpIFG-opercular-part-of-the-IFG 91 : Right-OrIFG-orbital-part-of-the-IFG 92 : Left-OrIFG-orbital-part-of-the-IFG 93 : Right-PCgG–posterior-cingulate-gyrus 94 : Left-PCgG–posterior-cingulate-gyrus</li><li>楔前叶✅：Right-PCu—precuneus</li><li>Left-PCu—precuneus 97 : Right-PHG—parahippocampal-gyrus 98 : Left-PHG—parahippocampal-gyrus 99 : Right-PIns–posterior-insula 100 : Left-PIns–posterior-insula</li><li>顶叶岛盖Right-PO----parietal-operculum 102 : Left-PO----parietal-operculum 103 : Right-PoG—postcentral-gyrus 104 : Left-PoG—postcentral-gyrus 105 : Right-POrG–posterior-orbital-gyrus 106 : Left-POrG–posterior-orbital-gyrus 107 : Right-PP----planum-polare 108 : Left-PP----planum-polare 109 : Right-PrG—precentral-gyrus 110 : Left-PrG—precentral-gyrus 111 : Right-PT----planum-temporale 112 : Left-PT----planum-temporale 113 : Right-SCA—subcallosal-area 114 : Left-SCA—subcallosal-area 115 : Right-SFG—superior-frontal-gyrus 116 : Left-SFG—superior-frontal-gyrus 117 : Right-SMC—supplementary-motor-cortex 118 : Left-SMC—supplementary-motor-cortex 119 : Right-SMG—supramarginal-gyrus 120 : Left-SMG—supramarginal-gyrus 121 : Right-SOG—superior-occipital-gyrus 122 : Left-SOG—superior-occipital-gyrus 123 : Right-SPL—superior-parietal-lobule 124 : Left-SPL—superior-parietal-lobule</li><li>颞上回Right-STG—superior-temporal-gyrus</li><li>Left-STG—superior-temporal-gyrus 127 : Right-TMP—temporal-pole 128 : Left-TMP—temporal-pole 129 : Right-TrIFG-triangular-part-of-the-IFG 130 : Left-TrIFG-triangular-part-of-the-IFG 131 :</li><li>颞横回Right-TTG—transverse-temporal-gyrus</li><li>Left-TTG—transverse-temporal-gyrus</li></ol><h1>ADNI数据库笔记</h1><p>显像剂</p><ul><li>18F-FDG</li><li>11C-PIB Abeta</li><li>18F-AV45 Abeta</li><li>18F-FBB/18F-Florbetaben Abeta</li><li>Florbetapir Abeta</li><li>18F-NAV4694 Abeta</li><li>Neuraceq Abeta</li><li>18F-AV1451/T807 tau</li><li>18F-MK6240 tau</li><li>AV1451 tau</li><li>Flortaucipir tau</li></ul><p><img src="https://raw.githubusercontent.com/tctco/ImgHosting/master/20240725171001.png" alt="ADNI Abeta显像剂勾选表"></p><p>疾病分期</p><ul><li>EMCI（Early Mild Cognitive Impairment）：早期轻度认知障碍。这个术语用于描述那些认知功能有轻微下降但尚未达到痴呆程度的个体。这种轻度的认知障碍可能是正常衰老的一部分，但也可能是阿尔茨海默病等神经退行性疾病早期的征兆。在EMCI阶段，个体可能在某些认知任务上表现出轻微的困难，但这通常不会严重影响日常生活。</li><li>LMCI（Late Mild Cognitive Impairment）：晚期轻度认知障碍。这个术语用于描述认知功能下降更为明显的个体，他们的症状比EMCI阶段的个体更严重，但仍未达到痴呆的程度。在LMCI阶段，个体可能在记忆、思维、语言和其他认知功能上有显著障碍，这些障碍可能开始影响日常生活。</li><li>CN Cognitively Normal</li></ul><h1>影像序列参数意义</h1><ul><li>NAC non-attenuation correction</li><li>MAC mri-attenuation correction</li><li>ZTE 利用极短的回波时间的校正</li></ul><h1>量表</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/354587174">ADAS-cog</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2023/12/03/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/03/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>构造函数可能非常复杂，例如：一个蛋糕，可能有各种形状、口味、尺寸、奶油、水果……构造函数需要接收大量参数，执行复杂的初始化过程（例如，需要大量条件判断这些参数是否为空）。为了解决这个问题，引入建造者模式，简化构造函数。</p><p>建造者模式需要三个关键组件</p><ul><li>目标类：比如<code>class Car</code></li><li>建造者：比如<code>class CarBuilder</code>，包含了构造车的各种方法</li><li>监督者</li></ul><blockquote><p>构造者模式用于建造非常复杂的对象，因此，这个目标对象可能不遵循相同的接口</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    std::vector&lt;std::string&gt; parts_; <span class="comment">// 下划线用于区分成员变量和参数/局部变量</span></span><br><span class="line">    <span class="comment">// std::unordered_map&lt;std::string, std::string&gt; parts_;</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">listParts</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;Car parts: &quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; parts_.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == parts_.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">          std::cout &lt;&lt; parts_[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          std::cout &lt;&lt; parts_[i] &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setSeats</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setEngine</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setTripComputer</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setGPS</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarBuilder</span> : <span class="keyword">public</span> Builder &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Car* car_;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CarBuilder</span>(): <span class="built_in">car_</span>(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (car_) <span class="keyword">delete</span> car_;</span><br><span class="line">      car_ = <span class="keyword">new</span> <span class="built_in">Car</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setSeats</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// set num of seats in the car</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setEngine</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// set engine type</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTripComputer</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// set Trip computer type</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setGPS</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// install GPS</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Car* <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Car* car = car_;</span><br><span class="line">      <span class="built_in">reset</span>();</span><br><span class="line">      <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Car* <span class="title">constructSportsCar</span><span class="params">(Builder&amp; builder)</span> </span>&#123;</span><br><span class="line">      builder.<span class="built_in">reset</span>();</span><br><span class="line">      builder.<span class="built_in">setSeats</span>(<span class="number">2</span>);</span><br><span class="line">      builder.<span class="built_in">setEngine</span>(<span class="string">&quot;someEngine&quot;</span>);</span><br><span class="line">      builder.<span class="built_in">setTripComputer</span>(<span class="literal">true</span>);</span><br><span class="line">      builder.<span class="built_in">setGPS</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">return</span> builder.<span class="built_in">getProduct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Car* <span class="title">constructSUV</span><span class="params">(Builder&amp; builder)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// steps to build an SUV</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  CarBuilder builder = <span class="built_in">CarBuilder</span>();</span><br><span class="line">  Director director = <span class="built_in">Director</span>();</span><br><span class="line">  Car* newCar = director.<span class="built_in">constructSportsCar</span>(builder);</span><br><span class="line">  newCar-&gt;<span class="built_in">listParts</span>();</span><br><span class="line">  <span class="keyword">delete</span> newCar;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MONAI label学习笔记</title>
      <link href="/2023/12/03/MONAI-label%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/12/03/MONAI-label%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>图片配准</h1><blockquote><p>模板记得选nii格式的。下面的代码可以帮助配准PET/MR图像，PET图像使用MR图像的相同变换模式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ants</span><br><span class="line"></span><br><span class="line">mr_image = ants.image_read(<span class="string">&#x27;./abeta/mr.nrrd&#x27;</span>)</span><br><span class="line">mni_template = ants.image_read(<span class="string">&#x27;./mni305_lin_nifti/average305_t1_tal_lin.nii&#x27;</span>)</span><br><span class="line">mr_to_mni_transform = ants.registration(fixed=mni_template, moving=mr_image, type_of_transform=<span class="string">&#x27;Affine&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pet_image = ants.image_read(<span class="string">&#x27;./abeta/pet.nrrd&#x27;</span>)</span><br><span class="line">pet_to_mni = ants.apply_transforms(fixed=mni_template, moving=pet_image, transformlist=mr_to_mni_transform[<span class="string">&#x27;fwdtransforms&#x27;</span>])</span><br><span class="line"></span><br><span class="line">ants.image_write(mr_to_mni_transform[<span class="string">&#x27;warpedmovout&#x27;</span>], <span class="string">&#x27;./registered_mr_image.nii&#x27;</span>)</span><br><span class="line">ants.image_write(pet_to_mni, <span class="string">&#x27;./registered_pet_image.nii&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>MONAI</h1><ol><li>monailabel</li><li>运行自定义模型（model zoo中的），需要先安装<code>bundleapp</code>：<code>monailabel apps --name monaibundle --download --output .</code>，这里的output可以选你希望的位置</li><li>运行服务器：<code>monailabel start_server --app .\monaibundle\ --studies .\datasets\brain\ --conf models wholeBrainSeg_Large_UNEST_segmentation_v0.2.3</code>；其中<code>studies</code>是需要标注和检索的图像数据（可以是<code>nii</code>格式）</li><li>3dslicer中需要安装monailabel的插件。在<code>Modules-&gt;Active Learning</code>中可以找到，也可以在<code>Edit-&gt;Application Settings-&gt;Modules</code>把插件加入到快捷栏</li><li>设置MONAI Label Server：本地的就是<code>http://127.0.0.1:8000/</code></li><li>选<code>Next Sample</code>从服务器端下载</li><li>在<code>Auto Segmentation</code>里选择模型，并点击<code>Run</code></li></ol><h1>读取mask</h1><p>通过3DSlicer得到segm文件之后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nrrd</span><br><span class="line">data, header = nrrd.read(<span class="string">&#x27;./mask.nii.seg.nrrd&#x27;</span>)</span><br><span class="line"><span class="comment"># print(header)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> monai</span><br><span class="line">fig = monai.visualize.utils.matshow3d(volume=data.T, </span><br><span class="line">                                title=<span class="string">&#x27;Brain Segm&#x27;</span>, </span><br><span class="line">                                figsize=(<span class="number">20</span>,<span class="number">20</span>),</span><br><span class="line">                                frames_per_row=<span class="number">6</span>, </span><br><span class="line">                                frame_dim=-<span class="number">3</span>,</span><br><span class="line">                                every_n=<span class="number">5</span>,</span><br><span class="line">                                vmin=<span class="number">0</span>, vmax=<span class="number">133</span>,</span><br><span class="line">                                cmap=<span class="string">&#x27;Greys&#x27;</span>,</span><br><span class="line">                                fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Radiomics </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2023/12/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>可以帮助拷贝已存在的实例而使代码不依赖于类的定义。</p><blockquote><p>本质上就是为了提供一个.copy/.deepcopy方法。如果没有这一方法，就需要创建一个新的空对象，然后遍历旧实例的所有属性。</p><p>Python中使用<code>copy.copy (self.__copy__)</code>和<code>copy.deepcopy (self.__deepcopy__)</code>实现原型模式。注意：<code>__deepcopy__(self, memo=None)</code>的memo参数用于防止递归拷贝。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">class Animal &#123;4</span><br><span class="line">    +mammalChild: Mammal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Mammal &#123;</span><br><span class="line">    +animalParent: Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal --o Mammal</span><br><span class="line">Mammal --o Animal</span><br></pre></td></tr></table></figure><p>上面的例子是一个存在递归拷贝的问题：拷贝<code>animal</code>会拷贝<code>mammalChild</code>，拷贝<code>mammalChild</code>时又需要拷贝<code>animalParent</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    std::string color;</span><br><span class="line">    <span class="built_in">Shape</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> std::string&amp; color): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">color</span>(color) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Shape* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Shape</span>() &#123;&#125; <span class="comment">// 具有虚函数的基类中应该提供虚析构函数，确保通过基类指针删除派生类对象时，能够调用派生类析构函数！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> std::string color&amp;, <span class="type">int</span> width, <span class="type">int</span> height): <span class="built_in">Shape</span>(x, y, color), <span class="built_in">width</span>(width), <span class="built_in">height</span>(height)&#123;&#125;</span><br><span class="line">    <span class="function">Rectangle* <span class="title">clone</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Rectangle</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Shape &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> radius;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> std::string color&amp;, <span class="type">int</span> radius): <span class="built_in">Shape</span>(x, y, color), <span class="built_in">radius</span>(radius)&#123;&#125;</span><br><span class="line">    <span class="function">Circle* <span class="title">clone</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Circle</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Circle c = <span class="built_in">Circle</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&quot;#FFF&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  Circle* pAnotherCircle = c.<span class="built_in">clone</span>();</span><br><span class="line">  <span class="keyword">delete</span> pAnotherCirlce;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，cpp存在若干个特殊成员函数</p><ul><li>默认构造函数：不接受任何参数，用于创建类的对象时不提供任何参数的情况</li><li>拷贝构造函数：接受一个对同类型对象的常量引用<code>const Type&amp;</code>作为参数，用于创建新副本（按位的浅拷贝）<ul><li>在本例中，<code>new Circle(*this)</code>实际上执行了拷贝构造函数。如果存在指针字段，那就需要手动重载进行深拷贝了</li></ul></li><li>拷贝赋值运算符，类似拷贝构造函数，只不过重载了<code>=</code>，<code>return *this</code></li><li>析构函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2023/12/01/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/01/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Singleton：确保每一类只有一个实例，并且提供对这个实例的全局访问</p><ol><li>通常用于需要共享的资源。例如数据库对象</li><li>Singleton还是一种有效保护使变量免遭改写的技术</li></ol></blockquote><p>实现方法</p><ul><li>构造函数私有化</li><li>用一个静态函数作为constructor，通过它创建一个新对象并存储在一个静态空间里</li></ul><p>Python中的实现有一些魔法，其中一个就是Python中任何东西都是对象，包括类本身也是对象。<code>type</code>本质上不是类，而是一个元类。<code>type(1)</code>输出结果是<code>&lt;class 'int'&gt;</code>，表明它创建了一个类！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>实际上也可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># type(name, bases, dict)</span></span><br><span class="line"><span class="built_in">type</span>(Foo, (<span class="built_in">object</span>,), &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>使用元类的目的：控制类的产生过程和对象的产生过程。继承<code>type</code>就可以产生元类。例如可以控制一个类必须要有文档（<a href="https://blog.csdn.net/qdPython/article/details/129302665">参考</a>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, class_name, class_bases, class_dic</span>):</span><br><span class="line">        <span class="keyword">if</span> class_dic.get(<span class="string">&#x27;__doc__&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> \</span><br><span class="line">                <span class="built_in">len</span>(class_dic.get(<span class="string">&#x27;__doc__&#x27;</span>).strip()) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;This class must have docstring!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> class_name.istitle():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;First letter in class name should be capitalized!&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases,</span><br><span class="line">                                     class_dic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="built_in">object</span>, metaclass=Mymeta):</span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><blockquote><p>判断一个对象最好的办法是<code>isinstance</code>，因为可以用来处理子类的情况：<code>isinstance(True, int) == True</code>！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">            instance = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">            cls._instances[cls] = instance</span><br><span class="line">        <span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span>(metaclass=SingletonMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, db_conn: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.db = DBConn(db_conn)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, sql:<span class="built_in">str</span></span>):</span><br><span class="line">        session = self.db.create_session()</span><br><span class="line">        <span class="keyword">return</span> session.query(sql)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    db = Database(<span class="string">&quot;mysql://database&quot;</span>)</span><br><span class="line">    db.query(<span class="string">&quot;SELECT ...&quot;</span>)</span><br><span class="line">    db = Database(<span class="string">&quot;mysql://database&quot;</span>)</span><br><span class="line">    db.query(<span class="string">&quot;SELECT ...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>cpp中关于<code>static</code>的用法说明：</p><ul><li>修饰静态成员变量：需要在类外部定义和初始化，因为它们不是在对象被创建时实例化的，而是在程序开始运行时（在进入 main 函数之前）就已经分配好了内存。</li><li>修饰静态成员函数：是类的一部分，但它们不依赖于类的特定实例。这意味着它们不能访问类的非静态成员变量或调用非静态成员函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Database* pdatabase_;</span><br><span class="line">    <span class="type">static</span> std::mutex mutex_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">Database</span>(<span class="type">const</span> std::string dbconn) : <span class="built_in">dbconn_</span>(dbconn) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Database</span>() &#123;&#125;</span><br><span class="line">    std::string dbconn_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Database</span>(Database &amp;other) = <span class="keyword">delete</span>; <span class="comment">// =delete表示禁用此函数</span></span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">const</span> Database &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> Database* <span class="title">GetInstance</span><span class="params">(<span class="type">const</span> std::string&amp; dbconn)</span></span>;</span><br><span class="line">    <span class="function">ReturnType <span class="title">query</span><span class="params">(std::string sql)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// query sql</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保类静态成员在整个生命周期仅初始化一次</span></span><br><span class="line">Database* Database::pdatabase_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">std::mutex Database::mutex_;</span><br><span class="line"></span><br><span class="line"><span class="function">Database* <span class="title">Database::GetInstance</span><span class="params">(<span class="type">const</span> std::string&amp; dbconn)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在这里检查是否要创建一个新的实例</span></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (pdatabase_ == <span class="literal">nullptr</span>) pdatabase_ = <span class="keyword">new</span> <span class="built_in">Database</span>(dbconn);</span><br><span class="line">  <span class="keyword">return</span> pdatabase_；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="built_in">ThreadFoo</span>() &#123;</span><br><span class="line">  std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1000</span>));</span><br><span class="line">  Database* db = Database::<span class="built_in">GetInstance</span>(<span class="string">&quot;sql://cool&quot;</span>);</span><br><span class="line">  std::cout &lt;&lt; db-&gt;<span class="built_in">query</span>(<span class="string">&quot;SELECT ...&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1000</span>));</span><br><span class="line">  Database* db = Database::<span class="built_in">GetInstance</span>(<span class="string">&quot;sql://another_cool&quot;</span>);</span><br><span class="line">  std::cout &lt;&lt; db-&gt;<span class="built_in">query</span>(<span class="string">&quot;SELECT ...&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">  <span class="function">std::thread <span class="title">t1</span><span class="params">(ThreadFoo)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t2</span><span class="params">(ThreadBar)</span></span>; <span class="comment">// should query the same database</span></span><br><span class="line">  t1.<span class="built_in">join</span>();</span><br><span class="line">  t2.<span class="built_in">join</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>肺的分叶与分段</title>
      <link href="/2023/12/01/%E8%82%BA%E7%9A%84%E5%88%86%E5%8F%B6%E4%B8%8E%E5%88%86%E6%AE%B5/"/>
      <url>/2023/12/01/%E8%82%BA%E7%9A%84%E5%88%86%E5%8F%B6%E4%B8%8E%E5%88%86%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1>右肺</h1><ul><li>上叶<ul><li>尖段：主动脉弓以上，</li><li>前段：右肺上叶前段支气管</li><li>后段：右肺上叶后段支气管</li></ul></li><li>中叶：水平裂与斜裂之间<ul><li>外侧段：右肺中叶外侧段支气管</li><li>内侧段：右肺中叶内侧段支气管</li></ul></li><li>下叶<ul><li>背段：右肺下叶背段支气管</li><li>内基底段：右肺下叶内基底段支气管</li><li>前基底段：右肺下叶前基底段支气管</li><li>外基底段：与后基底段支气管来自同一段支气管</li><li>后基底段</li></ul></li></ul><h1>左肺</h1><ul><li>上叶<ul><li>尖后段</li><li>前段：找对应支气管</li><li>舌段<ul><li>上舌段</li><li>下舌段</li></ul></li></ul></li><li>下叶<ul><li>背段</li><li>内前基底段</li><li>外基底段</li><li>后基底段</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuclear Medicine 肿瘤显像</title>
      <link href="/2023/12/01/Nuclear-Medicine-%E8%82%BF%E7%98%A4%E6%98%BE%E5%83%8F/"/>
      <url>/2023/12/01/Nuclear-Medicine-%E8%82%BF%E7%98%A4%E6%98%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1>PET/CT</h1><p>18F-FDG类似天然葡萄糖结构，示踪葡萄糖摄取和磷酸化过程。</p><ul><li>2号-OH取代为18F</li><li>能被葡萄糖转运蛋白识别</li><li>能被己糖激酶磷酸化生成18F-FDG-6-PO4</li><li>不能被磷酸果糖激酶识别，糖酵解终止</li><li>18F-FDG蓄积在细胞内</li></ul><p>瓦博格效应Warbug effect：肿瘤细胞比正常细胞有更高的糖酵解和乳酸分泌水平。</p><p>适应症</p><ul><li>肿瘤分期与治疗后再分期</li><li>疗效检测和评价</li><li>良恶性鉴别</li><li>复发和转移</li><li>治疗残余与治疗后纤维化鉴别</li><li>寻找原发灶</li><li>不明原因发热、副肿瘤综合征、肿瘤标志物异常升高</li><li>指导放疗，提供靶容积信息</li><li>指导活检和介入</li><li>新药与新技术评价</li><li>恶性肿瘤预后评估和生物学评价</li></ul><p>显像方法</p><ul><li>患者准备</li><li>采集病史</li><li>注射显像剂：3.7-5.55mbq/kg（成人）</li><li>图像采集：注射后45-60min</li><li>图像处理：OSEM 最大密度投影MIP等</li><li>图像分析<ul><li>定性</li><li>半定量：T/NT，标准化摄取值SUV，肿瘤代谢体积MTV，糖酵解总量TLG</li><li>SUV：(ROI平均放射性活度MBq/ml) / (注入放射性活度MBq/体重g)<ul><li>平均标准摄取值SUVmean：对ROI勾画敏感。一般以最大像素摄取40%为阈值，进而勾画感兴趣区大小</li><li>最大标准摄取值SUVmax：对噪声敏感</li><li>峰值标准摄取值SUVpeak：活动性最高的体素周围的一组体素SUV平均值，即小区域(1.2cm3)SUV平均值</li><li>代谢体积MTV：反应异常代谢肿瘤数量</li><li>糖酵解总量TLG：代谢活性+代谢体积的综合参数</li></ul></li></ul></li></ul><h2 id="影像特点">影像特点</h2><p><strong>正常图像</strong></p><ul><li>脑灰质最高</li><li>肝、脾、骨髓通常弥漫性轻中度摄取</li><li>胃肠道可见不同程度显像剂摄取分布，连续性，与消化道一致</li><li>肾、输尿管、膀胱尿液潴留，呈高显像剂分布</li><li>心肌组织：不同生理状况下可呈现低到高不同程度分布</li><li>眼部肌肉、声带、咬肌、舌肌等面部肌肉，胸锁乳突肌、椎前肌等运动紧张可呈现高显像剂摄取分布</li></ul><p><strong>异常图像</strong></p><ul><li>与类型、分化程度有关</li><li>大部分（非小细胞肺癌、结直肠癌、恶性淋巴肿瘤）高摄取</li><li>部分低级别胶质瘤、高分化原发性肝细胞癌、分化前列腺癌、低级别肾透明细胞癌低摄取</li><li>部分良性肿瘤（甲状腺乳头状癌、腮腺肿瘤、结肠腺瘤样息肉、绒毛腺瘤、平滑肌瘤等）高摄取</li><li>急性炎症、肉芽组织增生为主的（结节病、真菌病、结核）、免疫异常所致慢性炎症（溃疡性结肠炎、全身淋巴结病）高摄取</li></ul><h2 id="其他代谢显像">其他代谢显像</h2><p>氨基酸</p><ul><li>11C蛋氨酸（11C-MET）：唯一含S必需氨基酸，是蛋白合成和转甲基化作用必须成分，同型半胱氨酸前体<ul><li>肿瘤细胞缺乏蛋氨酸补救合成途径？（什么是蛋氨酸补救合成途径），表现为外源性依赖</li><li>分布：胰腺、肝脏&gt;唾液腺、扁桃腺、骨髓；颅内垂体较高，正常脑实质少；双肺、纵膈、脂肪、肌肉摄取低</li></ul></li><li>18F-谷氨酰胺（18F-GLN）：细胞增殖重要；可补充三羧酸循环；可提供氮源；肿瘤细胞的必需氨基酸</li></ul><p>脂肪代谢：脂质合成代谢相关酶如ACLY、ACC、FASN表达高，主要利用脂肪酸从头合成途径</p><ul><li>11C-乙酸：肿瘤内线粒体乙酰CoA 一半来自血液乙酸盐<ul><li>部分原发性肝细胞癌、前列腺癌、肾细胞癌和多发性骨髓瘤表现为高摄取</li><li>用于低摄取葡萄糖恶性肿瘤联合诊断</li></ul></li></ul><p>胆碱代谢</p><ul><li>11C-胆碱：细胞膜合成有关<ul><li>1-5min大部分脏器显像而后降低；一般10-15min开始采集</li><li>脑肿瘤和前列腺癌诊断有高特异性</li></ul></li></ul><p>核苷酸代谢显像</p><ul><li>18F-FLT氟代胸腺嘧啶，被胸腺激酶1 TK-1磷酸化，不能进一步参与DNA合成而滞留<ul><li>肿瘤细胞DNA补救途径高</li></ul></li></ul><p>乏氧代谢</p><ul><li>硝基咪唑类：亲脂，在细胞内酶（黄嘌呤氧化酶）作用下还原产生自由基阴离子，能被氧化而扩散到细胞外。乏氧则滞留。<ul><li>18F-FMISO：乏氧结合率为正常的28x</li><li>18F-FAZA、18F-FETA</li></ul></li><li>非硝基咪唑类<ul><li>64Cu-ATSM：乏氧滞留。可能与肿瘤细胞异常线粒体还原功能相关。</li><li>99mTc-HL91等</li></ul></li></ul><h2 id="受体显像">受体显像</h2><ul><li>整合素受体：αvβ3在许多肿瘤细胞即肿瘤新生血管内皮细胞表达增加，精氨酸-甘氨酸-天冬氨酸RGD能结合肿瘤细胞</li><li>生长抑素受体：SSTR2在大多神经内分泌肿瘤（垂体、胰岛细胞瘤、外分泌性胰腺癌、小细胞肺癌、类癌、神经母细胞癌）<ul><li>68Ga、18F、99mTc标记奥曲肽</li><li>目前常用68Ga-DOTATATE与SSTR2有高亲和力，指导神经内分泌肿瘤</li></ul></li><li>雌激素受体：乳腺、卵巢、前列腺等；与胃癌、结直肠癌也有关<ul><li>18F-FES与ER结合</li></ul></li><li>血管活性肠肽VIP</li><li>胰高血糖素样多肽GLP-1<ul><li>68Ga-Exendin-4胰岛细胞瘤定位</li></ul></li></ul><h2 id="放射免疫显像">放射免疫显像</h2><p>标记抗体的可有</p><ul><li>卤族元素</li><li>VIIB族元素</li><li>锕族元素</li></ul><p>前列腺特异性膜抗原PSMA：存在前列腺腺上皮细胞膜的一种糖蛋白，可作为前列腺组织特异性标志物</p><ul><li>111In、68Ga、18F标记PSMA抗体</li><li>比前列腺特异性抗原PSA（前列腺肿瘤标志物）效果更好</li></ul><h1>18F-FDG PET</h1><ul><li>卵巢可生理高摄取</li><li>宫颈炎症、感染、结核等可高摄取</li><li>原发性肝癌可联合11C-乙酸</li><li>结直肠腺瘤、息肉可高摄取</li><li>胃有生理的弥漫性或局灶性摄取，容易导致假阳性，与早期胃癌难鉴别</li><li>膀胱癌需速尿介入水化延迟现象；TURBT术后炎症导致假阳性，推荐3m后再做PETCT</li></ul>]]></content>
      
      
      <categories>
          
          <category> Medicine </category>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2023/12/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简言之，就是业务逻辑需要创造<strong>一套套对应的组件</strong>。在不同条件下，需要的配套组件不同，但是这些组件都执行相似的功能。调用者直接接收一个工厂类，这个工厂类对应了一系列组件。不同的工厂制造不同的组件，但都遵循相同的接口。</p><p>换句话说，工厂实际上是对产品的一种打包！抽象工厂提供了对工厂的多态支持。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Button* <span class="title">createButton</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Checkbox* <span class="title">createCheckbox</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinFactory</span>: <span class="keyword">public</span> GUIFactory &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Button* <span class="title">createButton</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">WinButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Checkbox* <span class="title">createCheckbox</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">WinCheckbox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacFactory</span>: <span class="keyword">public</span> GUIFactory &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Button* <span class="title">createButton</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">MacButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Checkbox* <span class="title">createCheckbox</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">MacCheckbox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">paint</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinButton</span>: <span class="keyword">public</span> Button &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="comment">// render a windows button</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacButton</span>: <span class="keyword">public</span> Button &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="comment">// render a mac button</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">paint</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinCheckbox</span>: <span class="keyword">public</span> Checkbox &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="comment">// render a windows button</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacCheckbox</span>: <span class="keyword">public</span> Checkbox &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="comment">// render a mac button</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    GUIFactory* factory;</span><br><span class="line">    Button* button;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Application</span>(GUIFactory* factory): <span class="built_in">factory</span>(factory), <span class="built_in">button</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Application</span>() &#123;<span class="keyword">delete</span> button;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">createUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">delete</span> button; <span class="comment">// 避免重复创建button</span></span><br><span class="line">      button = factory-&gt;<span class="built_in">createButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      button-&gt;<span class="built_in">paint</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationConfigurator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    GUIFactory* factory;</span><br><span class="line">    Application* app;</span><br><span class="line">    <span class="built_in">ApplicationConfigurator</span>(): <span class="built_in">factory</span>(<span class="literal">nullptr</span>), <span class="built_in">app</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">ApplicationConfigurator</span>() &#123;</span><br><span class="line">      <span class="keyword">delete</span> factory;</span><br><span class="line">      <span class="keyword">delete</span> app;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Config config = <span class="built_in">readConfigFile</span>();</span><br><span class="line">      <span class="keyword">if</span> (config.OS == <span class="string">&quot;Win&quot;</span>) factory = <span class="keyword">new</span> WinFactory;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (config.OS == <span class="string">&quot;Mac&quot;</span>) factory = <span class="keyword">new</span> MacFactory;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;invalid config.OS&quot;</span>);</span><br><span class="line"></span><br><span class="line">      app = <span class="keyword">new</span> <span class="built_in">Application</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!app) <span class="built_in">setup</span>();</span><br><span class="line">      app-&gt;<span class="built_in">createUI</span>();</span><br><span class="line">      app-&gt;<span class="built_in">paint</span>();</span><br><span class="line">      <span class="comment">// other ui things...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3DSlicer 笔记</title>
      <link href="/2023/11/30/3DSlicer-%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/11/30/3DSlicer-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>Segmentation</h1><ul><li>generate from seed 很好用</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuclear Medicine 药物与显像技术</title>
      <link href="/2023/11/30/Nuclear-Medicine-%E8%8D%AF%E7%89%A9%E4%B8%8E%E6%98%BE%E5%83%8F%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/11/30/Nuclear-Medicine-%E8%8D%AF%E7%89%A9%E4%B8%8E%E6%98%BE%E5%83%8F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1>放射性药物</h1><p>体外放射分析用试剂盒不属于放射性药物，而应归类为试剂</p><p>基本特性</p><ul><li>放射性</li><li>体内效应取决于被标记物特性</li><li>脱标与辐射自分解<ul><li>radiotion self-decomposition 某些被标记物对射线作用敏感，射线作用下可发生化学结构变化或生物活性消失，导致放射性药物体内生物学行为改变</li></ul></li><li>计量单位：放射性活度，而非化学量（物质的量）<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mrow><mn>99</mn><mi mathvariant="normal">m</mi></mrow></msup><mi mathvariant="normal">T</mi><mi mathvariant="normal">c</mi></mrow><annotation encoding="application/x-tex">\rm {}^{99m}Tc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">99m</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Tc</span></span></span></span></span>标记，一次370MBq（10mCi），化学量仅e-10~e-9mol</li></ul></li><li>有效使用期</li></ul><p>诊断用放射性药物</p><ul><li>衰变方式：<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mrow><mn>99</mn><mi mathvariant="normal">m</mi></mrow></msup><mi mathvariant="normal">T</mi><mi mathvariant="normal">c</mi></mrow><annotation encoding="application/x-tex">\rm {}^{99m}Tc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">99m</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Tc</span></span></span></span></span>：同质异能衰变，γ</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>201</mn></msup><mi mathvariant="normal">T</mi><mi mathvariant="normal">l</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>111</mn></msup><mi mathvariant="normal">I</mi><mi mathvariant="normal">n</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>67</mn></msup><mi mathvariant="normal">G</mi><mi mathvariant="normal">a</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>123</mn></msup><mi mathvariant="normal">I</mi></mrow><annotation encoding="application/x-tex">\rm {}^{201}Tl, {}^{111}In, {}^{67}Ga, {}^{123}I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">201</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Tl</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">111</span></span></span></span></span></span></span></span></span><span class="mord mathrm">In</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">67</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Ga</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">123</span></span></span></span></span></span></span></span></span><span class="mord mathrm">I</span></span></span></span></span>：电子俘获衰变，发射特征X线或γ</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>11</mn></msup><mi mathvariant="normal">C</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>15</mn></msup><mi mathvariant="normal">O</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>13</mn></msup><mi mathvariant="normal">N</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>18</mn></msup><mi mathvariant="normal">F</mi></mrow><annotation encoding="application/x-tex">\rm {}^{11}C, {}^{15}O, {}^{13}N, {}^{18}F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">11</span></span></span></span></span></span></span></span></span><span class="mord mathrm">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">15</span></span></span></span></span></span></span></span></span><span class="mord mathrm">O</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">13</span></span></span></span></span></span></span></span></span><span class="mord mathrm">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">18</span></span></span></span></span></span></span></span></span><span class="mord mathrm">F</span></span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>β</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\beta^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9658em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></li><li>带电荷射线电离能力强，容易对组织造成损伤，穿透能力弱</li></ul></li><li>光子能量：<ul><li>SPECT 100-250keV，能量过高会穿透晶体；不在此范围可加用适当准直器</li></ul></li><li>有效半衰期：检查过程用时1.5倍左右最合理</li><li>靶/非靶比值（T/NT）</li></ul><p>治疗用放射性药物</p><ul><li>衰变方式<ul><li>β-衰变和α衰变，电离密度大</li><li>俄歇电子射程仅纳米水平</li></ul></li><li>射线能量：一般认为β-最大能量在1MeV以上比较理想</li><li>有效半衰期：数小时至数天</li><li>T/NT<ul><li>放射性药物选择靶向作用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>89</mn></msup><mi mathvariant="normal">S</mi><mi mathvariant="normal">r</mi></mrow><annotation encoding="application/x-tex">\rm {}^{89}Sr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">89</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Sr</span></span></span></span></span> 在骨转移肿瘤中摄取比正常骨组织大36x</li><li>作用有一定范围</li></ul></li></ul><h2 id="放射性核素来源">放射性核素来源</h2><ul><li>核反应堆</li><li>回旋加速器：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>11</mn></msup><mi mathvariant="normal">C</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>13</mn></msup><mi mathvariant="normal">N</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>15</mn></msup><mi mathvariant="normal">O</mi><mo separator="true">,</mo><msup><mrow></mrow><mn>18</mn></msup><mi mathvariant="normal">F</mi></mrow><annotation encoding="application/x-tex">\rm{}^{11}C, {}^{13}N, {}^{15}O, {}^{18}F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">11</span></span></span></span></span></span></span></span></span><span class="mord mathrm">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">13</span></span></span></span></span></span></span></span></span><span class="mord mathrm">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">15</span></span></span></span></span></span></span></span></span><span class="mord mathrm">O</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">18</span></span></span></span></span></span></span></span></span><span class="mord mathrm">F</span></span></span></span></span><ul><li>发射β+或γ射线</li><li>一些正电子核素半衰期短</li><li>比活度高</li><li>用途广</li></ul></li><li>放射性核素发生器：长半衰期的放射性母体核素中分离出较短半衰期的子体<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>99</mn></msup><mi mathvariant="normal">M</mi><mi mathvariant="normal">o</mi><mo>−</mo><msup><mrow></mrow><mrow><mn>99</mn><mi mathvariant="normal">m</mi></mrow></msup><mi mathvariant="normal">T</mi><mi mathvariant="normal">c</mi></mrow><annotation encoding="application/x-tex">\rm {}^{99}Mo-{}^{99m}Tc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">99</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Mo</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">99m</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Tc</span></span></span></span></span>发生器：色谱柱型</li><li>钼-锝发生器</li></ul></li></ul><h2 id="放射性药物制备及质量控制">放射性药物制备及质量控制</h2><ul><li>同位素交换法：AX+BX* =&gt; AX* + BX，所用于I、P、S</li><li>化学合成法：11C和131I标记多肽、蛋白质等大分子<ul><li>11C：逐步合成</li><li>131I：取代法，离子I氧化为单质I，与蛋白质或多肽中酪氨酸、组氨酸或色氨酸残基上苯环/咪唑环反应，取代H</li></ul></li><li>生物合成法：单克隆抗体</li><li>金属络合法</li></ul><p>质量控制</p><ul><li>物理鉴定<ul><li>性状：大多数无色澄清。可有颜色、颗粒（Tc聚合物）</li><li>放射性核素纯度：放射性核素活度/总活度（含有放射性杂质）</li><li>放射性活度：Bq，一般标示值±10%，治疗用±5%</li><li>放射性浓度：1ml标记产物，Bq/ml</li></ul></li><li>化学<ul><li>pH：3-9均可，但理想7.4</li><li>标记率：标记物放射性/总投入放射性<ul><li>放射性纸层析、薄层层析、高效液相色谱</li></ul></li><li>稳定性：体外（PBS或人血清），薄层色谱等放射性纯度模拟标记物体内稳定性</li><li>放射化学纯度：以特定形式存在的放射性活度/总活度，一般不低于90-95%</li><li>放射性比活度：单位质量的某种放射性物质的放射性活度，Bq/g、Bq/mol、Bq/mmol</li><li>化学纯度：与放射性无关</li></ul></li></ul><h2 id="使用">使用</h2><p>不良反应</p><ul><li>变态反应</li><li>热原反应</li><li>药物毒性反应</li></ul><h1>核素示踪与显像技术</h1><p>方法学原理</p><ul><li>特异性结合</li><li>合成代谢：131I、18F</li><li>细胞吞噬：99mTc-硫胶体静脉注入体内，被单核巨噬细胞吞噬，分布于肝（中等颗粒大小）、脾（500-1000nm）、骨髓（&lt;20nm）</li><li>循环通路：静脉弹丸注射，腔静脉-右心房-右心室-肺血管床-左心房-左心室-升主动脉-主动脉弓-降主动脉<ul><li>大于红细胞直径10um的99mTc-MAA随血液循环流经肺毛细血管前动脉和毛细血管床用于观察肺血流</li></ul></li><li>选择性浓聚：99mTc-PYP可渗入结合急性心梗坏死心肌组织而不被正常细胞摄取</li><li>选择性排泄<ul><li>肾小管分泌99mTc-EC</li><li>肾小管滤过99mTc-DTPA</li><li>肝多角细胞分泌到毛细胆管并排泄到肠道99mTc-HIDA</li></ul></li><li>通透弥散<ul><li>133Xe流经肺组织从血液弥散到肺泡内：肺灌注+通气</li><li>无电荷脂溶性小分子99mTc-HMPAO透过正常血脑屏障并长期留滞脑组织，评估灌注</li></ul></li><li>离子交换与化学吸附<ul><li>85Sr、18F是Ca2+和OH-类似物，可与羟基磷灰石的Ca2+和OH-离子交换</li><li>99mTc膦酸盐类化合物如99mTC-MDP主要吸附于骨无机物中，少量与有机物结合</li></ul></li></ul><p>显像类型</p><ul><li>静态</li><li>动态</li><li>骨三相：静脉注射骨骼显像剂动态显像获得局部骨灌注和病变部位血池影像-延迟3h骨盐代谢显像</li></ul><p>其他</p><ul><li>局部</li><li>全身</li><li>平面</li><li>断层</li></ul><p>获取时间</p><ul><li>早期显像：&lt;2h，脏器血流灌注、血管床和早期功能状况</li><li>延迟显像：&gt;2h，或常规显像时间之后延迟数小时至数十小时<ul><li>99mTc-MIBI可同时被正常甲状腺和亢进甲状腺摄取，但清除速率不同。2-3h延迟显像可见甲状腺减淡</li></ul></li></ul><p>亲和力</p><ul><li>阳性显像</li><li>阴性显像：病变不摄取</li></ul><p>负荷</p><ul><li>静息显像</li><li>负荷显像：心脏、脑血流</li></ul>]]></content>
      
      
      <categories>
          
          <category> Medicine </category>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuclear Medicine 物理基础与仪器</title>
      <link href="/2023/11/29/Nuclear-Medicine-%E7%89%A9%E7%90%86%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BB%AA%E5%99%A8/"/>
      <url>/2023/11/29/Nuclear-Medicine-%E7%89%A9%E7%90%86%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BB%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1>物理基础</h1><h2 id="同位素、核素、同质异能素">同位素、核素、同质异能素</h2><p>核素的表示</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mrow></mrow><mi mathvariant="normal">Z</mi><mi mathvariant="normal">A</mi></msubsup><msub><mi mathvariant="normal">X</mi><mi mathvariant="normal">N</mi></msub></mrow><annotation encoding="application/x-tex">\rm {}^A_ZX_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1383em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.453em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">Z</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中A为质量数，Z为质子数，N为中子数。</p><p>激发态的原子核用m表示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mrow></mrow><mrow><mn>99</mn><mi mathvariant="normal">m</mi></mrow></msup><mi mathvariant="normal">T</mi><mi mathvariant="normal">c</mi></mrow><annotation encoding="application/x-tex">\rm {}^{99m}Tc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">99m</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Tc</span></span></span></span></span></span></p><h2 id="衰变">衰变</h2><ul><li>α衰变，空气中只能穿透几厘米</li><li>β衰变，分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>β</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\beta^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9658em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>β</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">\beta^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9658em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>，其中后者是与电子碰撞产生<strong>湮灭辐射</strong>，转变为两个能量同为511keV，方向相反的γ光子</li><li>γ衰变，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mrow></mrow><mi mathvariant="normal">Z</mi><mrow><mi mathvariant="normal">A</mi><mi mathvariant="normal">m</mi></mrow></msubsup><mi mathvariant="normal">X</mi><mo>→</mo><msubsup><mrow></mrow><mi mathvariant="normal">Z</mi><mi mathvariant="normal">A</mi></msubsup><mi mathvariant="normal">Y</mi><mo>+</mo><mi>γ</mi></mrow><annotation encoding="application/x-tex">\rm {}^{Am}_ZX \rightarrow {}^A_ZY+\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1167em;vertical-align:-0.2753em;"></span><span class="mord"><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4247em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">Z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">Am</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2753em;"><span></span></span></span></span></span></span><span class="mord mathrm">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4247em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">Z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2753em;"><span></span></span></span></span></span></span><span class="mord mathrm" style="margin-right:0.025em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span></span>，同质异能跃迁isomeric transition IT</li><li>电子俘获：原子核俘获一个轨道电子，导致一个质子转变为中子，释放一个中微子（类似正电子衰变）<ul><li>特征X射线：外层电子补充被俘获电子空缺轨道，直接释放能量</li><li>俄歇电子auger electron：释放的能量传递给更外层电子，使其释出</li><li>γ辐射：原子核处在激发态，直接释放能量</li><li>内转换电子：原子核能量传递给轨道电子，使其释出</li></ul></li></ul><p>衰变速度</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>d</mi><mi>N</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mo>−</mo><mi>λ</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\frac{dN}{dt} = -\lambda N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal">λ</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>半衰期</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>N</mi><mn>0</mn></msub><mi mathvariant="normal">/</mi><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>N</mi><mn>0</mn></msub><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><msub><mi>T</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub></mrow></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>T</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow><mi>λ</mi></mfrac></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align}     N_0/2 &amp;= N_0e^{-\lambda T_{1/2}}\\     T_{1/2} &amp;= \frac{\ln 2}\lambda\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.9165em;vertical-align:-1.7083em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2083em;"><span style="top:-4.6806em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/2</span></span></span><span style="top:-2.6492em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7083em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2083em;"><span style="top:-4.6806em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5357em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3695em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.6492em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7083em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2083em;"><span style="top:-4.6806em;"><span class="pstrut" style="height:3.3714em;"></span><span class="eqn-num"></span></span><span style="top:-2.6492em;"><span class="pstrut" style="height:3.3714em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7083em;"><span></span></span></span></span></span></span></span></span></p><p>此外，还应考虑生物体排出。假设其排出速度与体内放射性元素量成正比，比例<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">\lambda_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>d</mi><mi>N</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><mi>λ</mi><mo>+</mo><msub><mi>λ</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\frac{dN}{dt} = -(\lambda + \lambda_b) N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>因此有效半衰期<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">T_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>T</mi><mi>e</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>T</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>T</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">1/T_e = 1/T_{1/2} + 1/T_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>放射性活度：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mo>−</mo><mfrac><mrow><mi>d</mi><mi>N</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mi>λ</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">A = -\frac{dN}{dt} = \lambda N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><ul><li>国际单位Bq，表示单位时间内衰变数</li><li>旧单位 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">C</mi><mi mathvariant="normal">i</mi><mo>=</mo><mn>3.7</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>10</mn></msup><mi mathvariant="normal">B</mi><mi mathvariant="normal">q</mi></mrow><annotation encoding="application/x-tex">\rm 1Ci = 3.7\times 10^{10}Bq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathrm">1Ci</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathrm">3.7</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">10</span></span></span></span></span></span></span></span></span><span class="mord mathrm">Bq</span></span></span></span></span></li></ul><h2 id="射线与物质的相互作用">射线与物质的相互作用</h2><p>带电粒子：</p><ul><li>电离：静电作用使电子脱离轨道</li><li>激发：静电作用，但核外电子获得能量不足以脱离轨道</li><li>散射</li><li>韧致辐射bremsstrahlung：带电粒子受到物质原子核原子作用，运动速度突变，能量部分或全部以X射线发射<ul><li>释放能量与介质原子序数平方成正比，带点粒子质量成反比，随带电粒子能量增大而增大</li><li>屏蔽<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>β</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">\beta^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9658em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>应使用原子序数小的物质（塑料、玻璃、铝材）</li><li>可用于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>β</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">\beta^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9658em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>治疗剂量监测</li></ul></li><li>湮灭辐射</li><li>吸收</li></ul><p>光子：</p><ul><li>光电效应：光子与（主要是内层）电子碰撞，能量转交使之脱离原子发射（光电子）</li><li>康普顿效应：γ光子能量降低但不消失</li><li>电子对生成：光子能量&gt;1-22keV（两个电子静质量），在物质原子核电场作用下转化为正电子和负电子</li></ul><h1>核医学仪器</h1><h2 id="原理">原理</h2><ul><li>电离：盖革计数器</li><li>激发：带电粒子激发闪烁物质（NaI晶体等），跃迁回基态荧光<ul><li>γ射线可先光电效应、康普顿效应、电子对生成，再激发</li><li>最常用</li></ul></li><li>感光：X线胶片和乳胶核感光</li></ul><h2 id="仪器">仪器</h2><ul><li>γ相机</li><li>单光子发生型计算机断层扫描仪SPECT<ul><li>放射性核素γ射线能量低，范围80-140keV，人体组织衰减作用强<ul><li>衰减矫正attenuation correction</li></ul></li><li>算法：滤波反投影、有序最大子集期望值</li><li>SPECT/CT图像融合<ul><li>SPECT在单位面积上光子通量仅X线1/1000~1/10000</li><li>闪烁晶体固有分辨率一般仅4mm</li></ul></li></ul></li><li>PET<ul><li>符合探测coincidence detection</li><li>复杂校正：衰变校正、探测器归一化、衰减矫正、散射校正、随机符合校正、死时间校正、脏器运动校正</li></ul></li><li>脏器功能测定仪器：连续测量计数率<ul><li>甲状腺功能测定仪</li><li>肾功能测定仪</li><li>多功能测定仪</li></ul></li><li>放射性计数测量仪<ul><li>γ闪烁计数器</li><li>放射免疫测量仪</li><li>手持式γ射线探测器</li><li>活度计</li><li>液体闪烁计数器</li><li>表面污染和工作场所剂量监测仪</li><li>个人剂量检测仪</li></ul></li></ul><h2 id="放射性药物合成分析仪器">放射性药物合成分析仪器</h2><ul><li>正电子药物<ul><li>比单光子药物复杂得多</li><li>药物合成模块</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Medicine </category>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生存分析笔记</title>
      <link href="/2023/11/23/%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/11/23/%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://lifelines.readthedocs.io/en/latest/Survival%20analysis%20with%20lifelines.html">https://lifelines.readthedocs.io/en/latest/Survival analysis with lifelines.html</a></p></blockquote><h1>前置知识</h1><ul><li>（非）参数估计：“参数” 通常指的是用来描述数据集分布特征的量，例如均值、方差、比例或回归系数<ul><li>参数估计：指基于样本数据估计总体参数（如总体均值或方差）的过程，通常假设数据遵循某种已知的概率分布（如正态分布）</li><li>非参数估计：不依赖于数据遵循特定的分布假设</li></ul></li></ul><blockquote><p>参数估计有一个“拟合”过程，非参数则没有</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lifelines <span class="keyword">import</span> WeibullFitter</span><br><span class="line"></span><br><span class="line">T = data[<span class="string">&#x27;T&#x27;</span>]</span><br><span class="line">E = data[<span class="string">&#x27;E&#x27;</span>]</span><br><span class="line"></span><br><span class="line">wf = WeibullFitter().fit(T, E)</span><br><span class="line"></span><br><span class="line">wf.print_summary()</span><br><span class="line">wf.plot_cumulative_hazard()</span><br></pre></td></tr></table></figure><h1>比较分布手段</h1><ul><li>QQplot：将它们的分位数（quantiles）进行对比。它通常用于检验一个数据集是否遵循某个特定分布，例如正态分布<ul><li>X轴表示理论分布的分位数，而Y轴表示样本数据的分位数</li></ul></li><li>Shapiro-Wilk 测试</li></ul><h1>单变量模型</h1><h2 id="Kaplan-Meier">Kaplan-Meier</h2><p>问题：布什政权存在了8年（观测到“下台”事件），而肯尼迪在职两年被刺杀（未观测到“下台”事件）。现在有一组数据，记录了民主政权和封建王朝执政者的当权时间，试分析民主政权和封建王朝政权的“生存期”。</p><ul><li>输入：当权时间，是否观测到事件<ul><li>示例：当权时间[5, 7, 3]，是否观测到事件[1, 1, 0]</li></ul></li><li>输出：survival function，给定时间t，计算尚未发生事件的概率p</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lifelines <span class="keyword">import</span> KaplanMeierFitter</span><br><span class="line">kmf = KaplanMeierFitter()</span><br><span class="line"></span><br><span class="line">T = data[<span class="string">&quot;duration&quot;</span>]</span><br><span class="line">E = data[<span class="string">&quot;observed&quot;</span>]</span><br><span class="line"></span><br><span class="line">kmf.fit(T, event_observed=E)</span><br><span class="line">kmf.plot_survival_function()</span><br></pre></td></tr></table></figure><p>此外，使用下面的代码会增加显示<code>at risk</code>风险中、<code>censored</code>截断和<code>events</code>事件三个指标：</p><ul><li>at risk: 在任何给定时间点，“at risk” 指的是那些仍然在观察中且尚未发生事件（例如死亡、复发等）的个体数量。</li><li>censored: 对于某些个体而言，研究结束时他们还没有经历感兴趣的事件。原因可能是他们丢失了随访、退出研究，或者研究结束时他们还活着且没有经历事件。</li><li>events: 指在研究期间发生的感兴趣的事件，例如病人的死亡或疾病的复发。</li></ul><h2 id="Nelson-Aalen">Nelson-Aalen</h2><blockquote><p>非参数统计</p></blockquote><ul><li>输入：同K-M</li><li>输出：(cumulative) hazard function, 给定时间t，输出截至t时刻总死亡人数n<ul><li>对cumulative hazard function求导即为hazard function，但累积函数更稳定</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lifelines <span class="keyword">import</span> NelsonAalenFitter</span><br><span class="line">naf = NelsonAalenFitter()</span><br><span class="line"></span><br><span class="line">naf.fit(T,event_observed=E)</span><br><span class="line">naf.plot_cumulative_hazard()</span><br></pre></td></tr></table></figure><h2 id="Weibull-model">Weibull model</h2><blockquote><p>参数估计方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Statistics </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PET图像重建关键性参数笔记</title>
      <link href="/2023/11/20/PET%E5%9B%BE%E5%83%8F%E9%87%8D%E5%BB%BA%E5%85%B3%E9%94%AE%E6%80%A7%E5%8F%82%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/11/20/PET%E5%9B%BE%E5%83%8F%E9%87%8D%E5%BB%BA%E5%85%B3%E9%94%AE%E6%80%A7%E5%8F%82%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><code>template_sinogram.hs</code>文件用于配置重建参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">!INTERFILE  :=</span><br><span class="line">!imaging modality := PT</span><br><span class="line">name of data file := template_sinogram.hs</span><br><span class="line">originating system := userdefined</span><br><span class="line">!version of keys := STIR3.0</span><br><span class="line">!GENERAL DATA :=</span><br><span class="line">!GENERAL IMAGE DATA :=</span><br><span class="line">!type of data := PET</span><br><span class="line">imagedata byte order := LITTLEENDIAN</span><br><span class="line">!PET STUDY (General) :=</span><br><span class="line">!PET data type := Emission</span><br><span class="line">applied corrections := &#123;None&#125;</span><br><span class="line">!number format := float</span><br><span class="line">!number of bytes per pixel := 4</span><br><span class="line">number of dimensions := 4</span><br><span class="line">matrix axis label [4] := segment</span><br><span class="line">!matrix size [4] := 1</span><br><span class="line">matrix axis label [3] := view</span><br><span class="line">!matrix size [3] := 64</span><br><span class="line">matrix axis label [2] := axial coordinate</span><br><span class="line">!matrix size [2] := &#123; 15&#125;</span><br><span class="line">matrix axis label [1] := tangential coordinate</span><br><span class="line">!matrix size [1] := 90</span><br><span class="line">minimum ring difference per segment := &#123; -1&#125;</span><br><span class="line">maximum ring difference per segment := &#123; 1&#125;</span><br><span class="line">Scanner parameters:= </span><br><span class="line">Scanner type := Unknown</span><br><span class="line">Number of rings                          := 8</span><br><span class="line">Number of detectors per ring             := 512</span><br><span class="line">Inner ring diameter (cm)                 := 102</span><br><span class="line">Average depth of interaction (cm)        := 0.7</span><br><span class="line">Distance between rings (cm)              := 1.35</span><br><span class="line">Default bin size (cm)                    := 0.3129</span><br><span class="line">View offset (degrees)                    := 0</span><br><span class="line">Maximum number of non-arc-corrected bins := 192</span><br><span class="line">Default number of arc-corrected bins     := 192</span><br><span class="line">Number of blocks per bucket in transaxial direction         := 1</span><br><span class="line">Number of blocks per bucket in axial direction              := 1</span><br><span class="line">Number of crystals per block in axial direction             := 1</span><br><span class="line">Number of crystals per block in transaxial direction        := 8</span><br><span class="line">Number of detector layers                                   := 1</span><br><span class="line">Number of crystals per singles unit in axial direction      := 1</span><br><span class="line">Number of crystals per singles unit in transaxial direction := 8</span><br><span class="line">end scanner parameters:=</span><br><span class="line">effective central bin size (cm) := 0.317225</span><br><span class="line">number of time frames := 1</span><br><span class="line">!END OF INTERFILE :=</span><br></pre></td></tr></table></figure><ul><li><code>interfile</code>文件格式：专门用于医学成像数据，包含文本头文件<code>.hdr</code>和二进制数据文件<code>.img</code>/<code>.s</code>。STIR的命名规范里是<code>.hs</code>和<code>.s</code></li><li><code>applied corrections := &#123;None&#125;</code> - 应用的校正，这里没有应用任何校正</li><li><code>matrix axis label [4] := segment</code> - 第四维的轴标签是“segment”（段）。<ul><li><code>segment</code>：表示环差相同的一组数据，例如环差为0表示的就是事件探测器在同一个环上，这些数据被组织成一个段</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派4B配置OpenWRT记录</title>
      <link href="/2023/11/19/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E9%85%8D%E7%BD%AEOpenWRT%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/19/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E9%85%8D%E7%BD%AEOpenWRT%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1>步骤记录</h1><p>rpi的物理网口作为wan口，无线网络作为lan</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    光猫 --&gt; 主路由 --&gt;|以太网| rpi --&gt;|无线| 上网设备</span><br></pre></td></tr></table></figure><ol><li>刷入immortalwrt</li><li>有线网连接树莓派，可能需要手动配置一下ip地址，使设备和树莓派处在同一个网段中</li><li>将lan口配置为：<ol><li>协议：静态地址</li><li><s>设备：br-lan</s> 设备：phy0-ap0</li><li>ipv4地址：192.168.8.1（可以选一个和主路由不冲突的）</li><li>ipv4网关留空（会默认配置为192.168.31.1，也就是主路由的网关）</li></ol></li><li>新建一个wan口：<ol><li>协议：DHCP客户端</li><li><s>设备：br-lan</s> 设备：eth0</li></ol></li><li><s>配置防火墙：在网络-防火墙-区域中，设置lan到wan的规则中，wan口启用IP动态伪装。这个也称为源NAT/IP masquerading</s></li></ol><h1>解释</h1><p>想进行代理有大概两种思路：</p><ol><li>把rpi视作一个上网设备，配置设备为br-lan，协议静态地址，ipv4地址选一个与主路由相同网段的（例如192.168.31.150之类的），并在DHCP里勾选忽略此接口（也就是此接口不提供DHCP服务，因为同一个网段里只能有一个DHCP服务器，192.168.31.1已经负责DHCP了）。然后开启热点。其他上网设备连接此热点上网。此时如果不做配置，上网设备仍会将192.168.31.1作为默认网关。树莓派就只会把网络流量转发给192.168.31.1而不做任何处理（没有代理），此时树莓派只是一个中继器而已。但是理论上可以在上网设备中手动指定一个ip地址，并把网关设置为树莓派地址（比如192.168.31.150），此时树莓派就有代理职责了，相当于你告诉rpi，我要从你这里上网了！但这样做的缺点是，每个连上热点的设备都必须手动指派一下这个网关，否则rpi还是会把流量全推给主网关（<em>理论上是这样的，中途放弃了，没有完整实践过</em>）。</li><li>把rpi视作一个路由器，创建一个新子网，它来当网关（比如192.168.8.1）。然后这个子网与主路由的主网相连。rpi负责收集子网内所有流量，转发给主网。它也同时负责子网的DHCP服务。这样一来设备联网就不需要额外的配置了，比较优雅一点。</li></ol><h1>笔记</h1><ul><li>路由器的配置通常以接口为单位，而不是路由器。这样路由器可以实现更复杂的配置关系</li><li>br-lan设备实际上可以认为是接入的物理网口+无线局域网的抽象，包含了这两个元素</li><li>OpenWRT默认配置一个lan口，但是还需要手动创建一个wan口，并且配置为dhcp客户端</li><li>DHCP有时不会正确分配IP地址，导致连不上网关。这个时候需要手动设置一下IP地址、网关等</li><li>按照这样的顺序排查问题会比较合理<ol><li>OpenWRT上<code>ping/curl www.baidu.com</code></li><li>本地设备<code>ping gateway_ip_addr</code></li><li>本地设备<code>ping www.baidu.com</code></li></ol></li></ul><h1>疑问</h1><blockquote><p>实际上有比较多错误，请参考<a href="https://forum.openwrt.org/t/creating-a-unique-lan-subnet-for-vpn-on-a-pi/178062/6">这个帖子</a></p></blockquote><ul><li>为啥lan口设备设置为无线网络，wan口设备设置为eth0不行？</li><li>防火墙的lan=&gt;wan的配置默认没有IP动态伪装，wan=&gt;reject的反而默认开了，没太搞懂</li><li>immortalwrt的防火墙默认设置里，lan=&gt;wan的这条规则是不开启masquerading的，不知道为什么会这样</li><li>GPT说ipv4网关应该是192.168.8.1，也就是rpi自己，但是不知道为什么不让填自己，这里不是很明白</li></ul>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Personalized Treatment Planning for Radiopharmaceutical Therapy</title>
      <link href="/2023/10/10/Integrated%20Artificial%20Intelligence%20and%20Systems%20Biology%20for%20Personalized%20Radiopharmaceutical%20Therapy/"/>
      <url>/2023/10/10/Integrated%20Artificial%20Intelligence%20and%20Systems%20Biology%20for%20Personalized%20Radiopharmaceutical%20Therapy/</url>
      
        <content type="html"><![CDATA[<h2 id="Personalized-Treatment-Planning-for-Radiopharmaceutical-Therapy">Personalized Treatment Planning for Radiopharmaceutical Therapy</h2><ol><li>Pre-therapy imaging (PET/CT)</li><li>Dose-estimation: Intensively investigated and partially solved (planar / SPECT/CT)</li><li>Treatment</li></ol><blockquote><ul><li>Dose prediction</li><li>Dose effect<ul><li>Treatment outcome</li><li>Adverse events</li></ul></li></ul></blockquote><h2 id="Vitalize-the-virtual-patient">Vitalize the virtual patient</h2><h3 id="Physiologically-based-pharmacokinetic-PBPK-model">Physiologically-based pharmacokinetic (PBPK) model</h3><ul><li>Simulate time-course of radioligand uptake in organs of virtual patient</li><li>Organs &amp; tumor: homogenous</li><li>Simulate PET imaging using realistic PET simulator</li><li>Dose calculation using the dose voxel kernel (DVK) method</li><li>Simulate voxel-S-values matrices and convolved with phantoms organs</li></ul><h3 id="Reaction-diffusion-computational-simulation">Reaction-diffusion computational simulation</h3><p>Difusion + Metabolism 偏微分方程</p><p>Quantitative interpretation of the tumor microenvironment</p><h3 id="Histology-driven-convection-reaction-diffusion-model">Histology-driven convection-reaction-diffusion model</h3><h3 id="Cell-Automata-Model">Cell Automata Model</h3><h3 id="Virtual-Clone-of-a-Patient-Whole-body-dynamic-imaging-PBPK-modelling">Virtual Clone of a Patient / Whole body dynamic imaging &amp; PBPK modelling</h3><h3 id="Spatial-Transcriptomics-for-Precise-Modelling">Spatial Transcriptomics for Precise Modelling</h3><h2 id="Accelerate-Virtual-Patient-Clone-using-Artificial-Intelligence">Accelerate Virtual Patient Clone using Artificial Intelligence</h2><ul><li>machine learning for pre-therapy prediction of dosimetry</li><li>development of voxel-wise pre-therapy dose prediction<ul><li>integrate virtual patients to pretrain ai</li><li>PBPK-adapted deep learning</li></ul></li></ul><blockquote><p>The PBPK loss term</p><p>L_{PBPK} = \sum_j [ReLU(b_{l,j}-G_{k, j}) + ReLU(G_{k, j}-b_{u,j})]\\G_{k,j} = \frac 1 N \sum_{i=1}^NG_i I(C_i,G_i)\\I(C_i,G_i) = \begin{cases}1 & C_i=j\and 0 \le G_i\\0 & otherwise\end{cases}</p><p>Non-negative dose</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mrow><mi>n</mi><mi>o</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>g</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo stretchy="false">(</mo><mo>−</mo><msub><mi>G</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{nonneg}=\frac 1 N \sum_{i=1}^NReLU(-G_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">nn</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">LU</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p></blockquote><h2 id="Deep-learning-on-Dynamic-Total-body-PET-for-Pretherapy-Dosimetry-Prediction">Deep learning on Dynamic Total-body PET for Pretherapy Dosimetry Prediction</h2><ul><li>Seq2seq</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuclear Medicine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPM学习笔记</title>
      <link href="/2023/02/20/SPM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/20/SPM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>开启<code>SPM12</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spm pet</span><br></pre></td></tr></table></figure><h2 id="基本操作">基本操作</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I = dicomread(dicomFile)</span><br><span class="line">imshow(I, <span class="string">&#x27;DisplayRange&#x27;</span>, []) <span class="comment">% 显示DICOM图像</span></span><br><span class="line"></span><br><span class="line">info = dicominfo(dicomFile) <span class="comment">% 显示元信息</span></span><br><span class="line"><span class="comment">% info.AcquisitionTime较重要</span></span><br></pre></td></tr></table></figure><p>计算SUV：使用<code>ImCalc</code>输入计算公式后，<code>Display</code>选中计算结果</p><h2 id="图像预处理">图像预处理</h2><ol><li>Spatial Registration, Normalization<ol><li>Registration: Rigid Transformations (rotations, translations…)</li><li>Normalization: Transform to Montreal Neurology Institute (MNI) Template</li><li>Smoothing: e.g. Gaussian kernel, improve SNR, minimize differences between normalized images, increase validity of statistics (errors more likely to be normally distributed)</li></ol></li><li>Creation of a Parametric Image (SUVRs, DVRs, BP…)</li><li>Statistical model</li></ol><p>具体实施步骤</p><ol><li>SPM导入DICOM文件并设置输出路径</li><li>在Display中调整（一般将原点设置为前连合anterior commissure），点击reorient确认</li></ol><h2 id="The-Flanker-Task">The Flanker Task</h2>]]></content>
      
      
      <categories>
          
          <category> Medicine </category>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式-单一职责原则</title>
      <link href="/2023/02/11/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
      <url>/2023/02/11/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式-策略模式</title>
      <link href="/2023/02/11/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/02/11/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工厂在业务逻辑增加的过程中，也会越来越复杂，维护性逐渐降低。</p></blockquote><h1>策略模式</h1><blockquote><p>定义了算法家族，分别封装起来，让其可以互相替换。此模式让算法的变化不影响使用算法的客户。</p></blockquote><p>核心在于<strong>算法是随时都可能相互替换的</strong>。</p><ul><li><code>Strategy</code>类，定义所有支持的算法的公共接口</li><li><code>ConcreteStrategy</code>类，封装具体算法或行为，继承自<code>Strategy</code></li><li><code>Context</code>类，使用一个<code>ConcreteStrategy</code>进行配置，维护一个对<code>Strategy</code>对象的引用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, strategy: Strategy</span>):</span><br><span class="line">    self.strategy = strategy</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">context_interface</span>():</span><br><span class="line">    <span class="keyword">return</span> self.strategy.algorithm_interface()</span><br></pre></td></tr></table></figure><p>但在具体实现过程中，仍然不能完全将策略选择过程从客户端中剥离。可以考虑与简单工厂模式结合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CashContext</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"><span class="built_in">type</span>: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># 接收策略类型而不是具体收费策略对象</span></span><br><span class="line">    <span class="comment"># self.cash = ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_result</span>(<span class="params">money: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="keyword">return</span> self.cash.get_result()</span><br></pre></td></tr></table></figure><p>其与简单工厂的不同在于降低了客户端的使用门槛：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单工厂需要认识两个类：`CashSuper`和`CashFactory`</span></span><br><span class="line">cash_super: CashSuper = CashFactory.create_cash_accept(<span class="built_in">type</span>)</span><br><span class="line">result = cash_super.get_result(...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 策略模式+简单工厂只需要一个类：`CashContext`</span></span><br><span class="line">cash_super: CashContext = CashContext(<span class="built_in">type</span>)</span><br><span class="line">result = cash_super.get_result(...)</span><br></pre></td></tr></table></figure><blockquote><p>策略模式本质上是定义一系列算法的方法，它们完成<strong>相同的工作，只是实现不同</strong>，我们可以用相同的方式调用所有的算法，从而<strong>降低算法类与使用算法类</strong>之间的耦合。</p></blockquote><blockquote><p><code>Strategy</code>类层次为<code>Context</code>定义了一系列可供重用的算法或行为，继承有助于<strong>析出这些算法的公共功能</strong>。例如本例中的<code>get_result</code></p></blockquote><blockquote><p>此外还简化了<strong>单元测试</strong>，因为每个算法都有自己的类，可通过自己的接口单独测试。每个算法课保证它没有错误，修改其中一个也不影响其他算法。</p></blockquote><p>策略模式<strong>封装了变化</strong>，从而在客户端中消除大量条件语句：将特殊行为封装进独立的<code>Strategy</code>类。</p><blockquote><p>实践中，策略模式可以用来几乎任何类型的规则，只要在分析过程中听到<strong>需要在不同时间应用不同的业务规则</strong>，就可以考虑使用策略模式处理这种变化的可能性。</p></blockquote><blockquote><p>此外，策略模式本身而言，选用具体实现的职责由客户端对象承担，并转给<code>Context</code>对象，本身并不解除客户端选择判断的压力，而与工厂模式结合后，选择策略的职责由<code>Context</code>承担，最大化减轻客户端职责。</p></blockquote><p>使用反射技术则可以在<code>Context</code>类中避免对<code>switch</code>语句的反复修改。</p><h1>感想</h1><p>策略模式似乎对简单工厂模式又做了一层抽象/隔离，避免用户直接接触到工厂类，同时提供了一个统一的接口。</p><h1>Refector GURU</h1><p>策略模式要求把做同样的事的不同方法分别抽象成不同的类，这些类称为 <strong>策略</strong>。上下文对象可以存储一个策略，并把任务交给策略执行。上下文对象并不知道该如何选择策略，client通过上下文来选择合适的策略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">execute</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Strategy</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span>: <span class="keyword">public</span> Strategy &#123;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">execute</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subtract</span>: <span class="keyword">public</span> Strategy &#123;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">execute</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Strategy* strategy; <span class="comment">// 以值类型存储将导致*切片问题*</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">Context</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (strategy) <span class="keyword">delete</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setStrategy</span>(Strategy* s) &#123;</span><br><span class="line">      strategy = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> strategy-&gt;<span class="built_in">execute</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>放射性药物与放疗激活药物</title>
      <link href="/2023/02/11/%E6%94%BE%E5%B0%84%E6%80%A7%E8%8D%AF%E7%89%A9%E4%B8%8E%E6%94%BE%E7%96%97%E6%BF%80%E6%B4%BB%E8%8D%AF%E7%89%A9/"/>
      <url>/2023/02/11/%E6%94%BE%E5%B0%84%E6%80%A7%E8%8D%AF%E7%89%A9%E4%B8%8E%E6%94%BE%E7%96%97%E6%BF%80%E6%B4%BB%E8%8D%AF%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h1>放射性药物与放疗激活药物</h1><h2 id="新药开发">新药开发</h2><blockquote><p>PSMA-SPECT/CT技术是一种前列腺特异性膜抗原-单光子发射计算机断层摄影技术</p></blockquote><p><strong>肿瘤滞留不足是放射性药物面临的关键挑战</strong>。</p><p>前期工作</p><ul><li>制备紧缺核素</li><li>延长血液循环，提高肿瘤摄取：可能不能成功<ul><li>定点修饰抗体</li><li>FAPI小分子结构改造，加强靶向，高速清除降低毒副作用</li><li>短半衰期核素降低毒副作用</li><li>共价放射性药物增加核素的肿瘤摄取和滞留，靶向后激活</li></ul></li></ul><blockquote><p>核素治疗不依赖信号通路，但有副作用。</p></blockquote><h2 id="放射性驱动的药物化学">放射性驱动的药物化学</h2><blockquote><p>gamma、X线、热中子束容易调控</p></blockquote><p>发展放疗驱动的选择性断键，引发化疗药物的靶向释放，但十分困难（电子束能量大，断键无选择性）。</p><ul><li>羟基自由基激活药物</li><li>伦琴发现氰化铂可以被X线激活发光，因此可能使用放射线释放顺铂</li></ul><blockquote><p>肿瘤内强烈的还原环境，乏氧化</p></blockquote><p>放射性含B药物用于B中子俘获治疗</p><ul><li>B完全不参与蛋白质合成与结合，因此本底更低</li><li>钆中子俘获核反应驱动</li></ul><blockquote><p>单个癌细胞上受体的量级1e6-1e7</p></blockquote><h2 id="一些别的思考">一些别的思考</h2><ul><li>非一线治疗天然存在劣势：收治的志愿者往往更严重</li><li>新药物的毒性很难评估：病人死亡是药物副作用还是疾病本身进展？</li><li>核素储量本身也是一个潜在的问题</li><li>非一线治疗如何坚持完成数个疗程？</li><li>K药/可瑞达/帕博利珠联合，提高治疗效率，借助K药推广新药</li><li>努力进入一线治疗方案是许多问题的解决之道</li><li>FAPI治疗+分子影像：利用分子影像筛选病人，说服肿瘤医生使用核医学</li></ul>]]></content>
      
      
      <categories>
          
          <category> Medicine </category>
          
          <category> Nuclear Medicine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式-简单工厂模式</title>
      <link href="/2023/02/11/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/02/11/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>直觉地用计算机的方式去思考是初学者常见的问题</p></blockquote><p>活字印刷</p><ul><li>可维护：只更改需要更改的字</li><li>可复用：在后来的印刷中重复使用</li><li>可扩展：另外加字</li><li>高灵活：排版方式不同</li></ul><p>使用封装、继承、多态，降低程序耦合。</p><h1>业务封装</h1><p>将业务和界面分离：Web、Windows、Linux平台下的计算机均可使用<code>Operation</code>类。只需重写界面即可。</p><h1>松耦合</h1><p>构建一个基类<code>Operation</code>，其他运算继承此基类，并重写其虚方法。如此可更容易地添加新运算。</p><h1>简单工厂模式</h1><p>用一个单独的类来进行<strong>创造实例的活动</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oper = OperationFactory.create_pperate(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">oper.num1 = <span class="number">1</span></span><br><span class="line">oper.num2 = <span class="number">1</span></span><br><span class="line">result = oper.get_result()</span><br></pre></td></tr></table></figure><p>如果需要修改加法，只需修正<code>class OperationAdd</code>，增加其他运算只需添加对应的子类并修改工厂。</p><h1>UML简介</h1><ul><li>接口实现：棒棒糖表示法</li><li>关联：一个类&quot;知晓&quot;另一个类，可用实线箭头表示</li><li>聚合：一种&quot;弱拥有&quot;，A可包含B对象，但B对象不是A对象的一部分（如雁群与大雁），用空菱形（集体）箭头（个体）</li><li>合成：强拥有关系，严格的部分与整体（如鸟与翅膀）</li><li>依赖：虚线箭头表示，如动物与氧气</li></ul><h1>Design Pattern Guru</h1><blockquote><p>工厂模式的核心在于，&quot;工厂&quot;不单单只是一个制造&quot;产品&quot;的类，而是包含了大量业务逻辑的类。对工厂而言，产品总是实现相同的接口，并且业务逻辑相似。比如对于卡车和船两类产品而言，它们的&quot;用法&quot;都是相同的，都需要载人、启动、运输、停止、下人这四个步骤。因此只需要在产品内实现这些步骤的具体细节就可以了。如果想创造一个新交通工具，只需要重写这四个方法，就能无缝运行。</p><p>换言之，业务逻辑在工厂，而产品实现每个步骤的具体细节。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dialog</span>() : <span class="built_in">btnOk</span>(<span class="built_in">createButton</span>()) &#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Dialog</span>() &#123;<span class="keyword">delete</span> btnOk;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// createButton是一个工厂方法</span></span><br><span class="line">    <span class="comment">// const表示该方法不修改类属性，保证“常量化”</span></span><br><span class="line">    <span class="comment">// =0表示这是一个纯虚方法，子类必须重写该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Button* <span class="title">createButton</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>; </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      btnOk -&gt; <span class="built_in">onClick</span>([]()&#123; std::cout &lt;&lt; <span class="string">&quot;Button clicked!&quot;</span> &lt;&lt; std::endl; &#125;);</span><br><span class="line">      btnOk -&gt; <span class="built_in">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Button* btnOk;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsDialog</span>: <span class="keyword">public</span> Dialog &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Button* <span class="title">createButton</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// override表示重写了基类虚函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">WindowsButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDialog</span>: <span class="keyword">public</span> Dialog &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Button* <span class="title">createButton</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">WebButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> &#123; <span class="comment">// 两个纯虚函数允许多态行为</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onClick</span><span class="params">(std::function&lt;<span class="type">void</span>()&gt; callback)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">render</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsButton</span>: <span class="keyword">public</span> Button &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onClick</span><span class="params">(std::function&lt;<span class="type">void</span>()&gt; callback)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do some windows thing</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do some windows thing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebButton</span>: <span class="keyword">public</span> Button &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onClick</span><span class="params">(std::function&lt;<span class="type">void</span>()&gt; callback)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do some web thing</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do some web thing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Application</span>() <span class="built_in">dialog</span>(<span class="literal">nullptr</span>) &#123; <span class="comment">// 在这里初始化dialog为空指针</span></span><br><span class="line">      Config config = <span class="built_in">readConfigFile</span>();</span><br><span class="line">      <span class="keyword">if</span> (config.OS == <span class="string">&quot;Win&quot;</span>) dialog = <span class="keyword">new</span> <span class="built_in">WindowsDialog</span>();</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (config.OS == <span class="string">&quot;Web&quot;</span>) dialog = <span class="keyword">new</span> <span class="built_in">WebDialog</span>();</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;invalid config.OS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Application</span>() &#123;<span class="keyword">delete</span> dialog;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (dialog) dialog -&gt; <span class="built_in">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Dialog* dialog;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>C++这种静态类型语言的多态与Python这种动态类型有重要差异：对C++而言，多态是依靠某一个共同的基类实现的，例如基类Base同时被A和B类继承。某一个函数若想同时处理AB两类，就需要把函数声明为<code>ReturnType func(Base&amp; abClass)</code>。但对于Python而言，可以直接写成<code>def func(ab_class)</code>。Python的这种行为更加隐式、自然。所谓_Duck type_，是指如果一个对象实现了所需的方法或属性，那么它就可以被用在任何期望这些方法或属性的地方，而不管它的实际类型是什么。</p><p>此外虚函数是C++多态的重要实现部分。由于多态必须通过基类实现，因此对于重写的虚函数，即使使用基类指针或引用，调用的也是重写版本。非虚方法也可以重写，但是无法体现多态。使用基类指针或引用调用方法时，指向的是重写前的缺省方法。这可能导致非预期的结果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MMSegmentation实战</title>
      <link href="/2023/02/11/MMSegmentation%E5%AE%9E%E6%88%98/"/>
      <url>/2023/02/11/MMSegmentation%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="课程">课程</h2><div class="bilibili"><iframe src="//player.bilibili.com/player.html?aid=479139861&bvid=BV1eT411R7Jq&cid=1002119303&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><p>课程的<a href="https://github.com/TommyZihao/MMSegmentation_Tutorials">代码教学</a>非常详细。本文的主要代码均来源于代码教学。</p><h2 id="检查安装成功">检查安装成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">from</span> mmcv.ops <span class="keyword">import</span> get_compiling_cuda_version, get_compiler_version</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MMCV版本&#x27;</span>, mmcv.__version__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;CUDA版本&#x27;</span>, get_compiling_cuda_version())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;编译器版本&#x27;</span>, get_compiler_version())</span><br></pre></td></tr></table></figure><h2 id="实战">实战</h2><p>进行推理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python demo/image_demo.py img.jpg config.py \</span><br><span class="line">  checkpoint.pth --out-file fname.jpg --device cuda:0 --opacity 0.5</span><br></pre></td></tr></table></figure><p>运行语义分割预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmseg.apis <span class="keyword">import</span> inference_model</span><br><span class="line"><span class="keyword">from</span> mmengine.model.utils <span class="keyword">import</span> revert_sync_batchnorm</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available():</span><br><span class="line">  model = revert_sync_batchnorm(model)</span><br><span class="line"></span><br><span class="line">result = inference_model(model, img_path)</span><br><span class="line">class_map = result.pred_sem_seg.data[<span class="number">0</span>].detach().cpu().numpy()</span><br><span class="line">plt.imshow(class_map)</span><br></pre></td></tr></table></figure><p>可视化方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmseg.apis <span class="keyword">import</span> show_result_pyplot</span><br><span class="line">vis = show_result_plot(model, img_path, </span><br><span class="line">  result, opacity=<span class="number">.8</span>, title=<span class="string">&#x27;MMSeg&#x27;</span>, </span><br><span class="line">  out_file=<span class="string">&#x27;output.jpg&#x27;</span>)</span><br><span class="line">plt.imshow(mmcv.bgr2rgb(vis))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>或者使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmseg.datasets <span class="keyword">import</span> cityscapes</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> mmcv </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取类别名和调色板</span></span><br><span class="line">classes = cityscapes.CityscapesDataset.METAINFO[<span class="string">&#x27;classes&#x27;</span>]</span><br><span class="line">palette = cityscapes.CityscapesDataset.METAINFO[<span class="string">&#x27;palette&#x27;</span>]</span><br><span class="line">opacity = <span class="number">0.15</span> <span class="comment"># 透明度，越大越接近原图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将分割图按调色板染色</span></span><br><span class="line"><span class="comment"># seg_map = result[0].astype(&#x27;uint8&#x27;)</span></span><br><span class="line">seg_map = class_map.astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">seg_img = Image.fromarray(seg_map).convert(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">seg_img.putpalette(np.array(palette, dtype=np.uint8))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> mpatches</span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">8</span>))</span><br><span class="line">im = plt.imshow(((np.array(seg_img.convert(<span class="string">&#x27;RGB&#x27;</span>)))*(<span class="number">1</span>-opacity) + mmcv.imread(img_path)*opacity) / <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每一种颜色创建一个图例</span></span><br><span class="line">patches = [mpatches.Patch(color=np.array(palette[i])/<span class="number">255.</span>, label=classes[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">plt.legend(handles=patches, bbox_to_anchor=(<span class="number">1.05</span>, <span class="number">1</span>), loc=<span class="number">2</span>, borderaxespad=<span class="number">0.</span>, fontsize=<span class="string">&#x27;large&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>对视频也可以处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!python demo/video_demo.py video.mp4 \</span><br><span class="line">        config.py checkpoint.pth \</span><br><span class="line">        --device cuda:0 --output-file out.mp4 --opacity 0.5</span><br></pre></td></tr></table></figure><p>或者在python中实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 Cityscapes 街景数据集 类别名和调色板</span></span><br><span class="line"><span class="keyword">from</span> mmseg.datasets <span class="keyword">import</span> cityscapes</span><br><span class="line">classes = cityscapes.CityscapesDataset.METAINFO[<span class="string">&#x27;classes&#x27;</span>]</span><br><span class="line">palette = cityscapes.CityscapesDataset.METAINFO[<span class="string">&#x27;palette&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pridict_single_frame</span>(<span class="params">img, opacity=<span class="number">0.2</span></span>):</span><br><span class="line">    </span><br><span class="line">    result = inference_model(model, img)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将分割图按调色板染色</span></span><br><span class="line">    seg_map = np.array(result.pred_sem_seg.data[<span class="number">0</span>].detach().cpu().numpy()).astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">    seg_img = Image.fromarray(seg_map).convert(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">    seg_img.putpalette(np.array(palette, dtype=np.uint8))</span><br><span class="line">    </span><br><span class="line">    show_img = (np.array(seg_img.convert(<span class="string">&#x27;RGB&#x27;</span>)))*(<span class="number">1</span>-opacity) + img*opacity</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> show_img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入待预测视频</span></span><br><span class="line">imgs = mmcv.VideoReader(input_video)</span><br><span class="line"></span><br><span class="line">prog_bar = mmengine.ProgressBar(<span class="built_in">len</span>(imgs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对视频逐帧处理</span></span><br><span class="line"><span class="keyword">for</span> frame_id, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(imgs):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 处理单帧画面</span></span><br><span class="line">    show_img = pridict_single_frame(img, opacity=<span class="number">0.15</span>)</span><br><span class="line">    temp_path = <span class="string">f&#x27;<span class="subst">&#123;temp_out_dir&#125;</span>/<span class="subst">&#123;frame_id:06d&#125;</span>.jpg&#x27;</span> <span class="comment"># 保存语义分割预测结果图像至临时文件夹</span></span><br><span class="line">    cv2.imwrite(temp_path, show_img)</span><br><span class="line"></span><br><span class="line">    prog_bar.update() <span class="comment"># 更新进度条</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把每一帧串成视频文件</span></span><br><span class="line">mmcv.frames2video(temp_out_dir, <span class="string">&#x27;outputs/B3_video.mp4&#x27;</span>, fps=imgs.fps, fourcc=<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shutil.rmtree(temp_out_dir) <span class="comment"># 删除存放每帧画面的临时文件夹</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除临时文件夹&#x27;</span>, temp_out_dir)</span><br></pre></td></tr></table></figure><p>在python内进行配置文件的设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据集图片和标注路径</span></span><br><span class="line">data_root = <span class="string">&#x27;iccv09Data&#x27;</span></span><br><span class="line">img_dir = <span class="string">&#x27;images&#x27;</span></span><br><span class="line">ann_dir = <span class="string">&#x27;labels&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别和对应的颜色</span></span><br><span class="line">classes = (<span class="string">&#x27;sky&#x27;</span>, <span class="string">&#x27;tree&#x27;</span>, <span class="string">&#x27;road&#x27;</span>, <span class="string">&#x27;grass&#x27;</span>, <span class="string">&#x27;water&#x27;</span>, <span class="string">&#x27;bldg&#x27;</span>, <span class="string">&#x27;mntn&#x27;</span>, <span class="string">&#x27;fg obj&#x27;</span>)</span><br><span class="line">palette = [[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>], [<span class="number">129</span>, <span class="number">127</span>, <span class="number">38</span>], [<span class="number">120</span>, <span class="number">69</span>, <span class="number">125</span>], [<span class="number">53</span>, <span class="number">125</span>, <span class="number">34</span>], </span><br><span class="line">           [<span class="number">0</span>, <span class="number">11</span>, <span class="number">123</span>], [<span class="number">118</span>, <span class="number">20</span>, <span class="number">12</span>], [<span class="number">122</span>, <span class="number">81</span>, <span class="number">25</span>], [<span class="number">241</span>, <span class="number">134</span>, <span class="number">51</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmseg.registry <span class="keyword">import</span> DATASETS</span><br><span class="line"><span class="keyword">from</span> mmseg.datasets <span class="keyword">import</span> BaseSegDataset</span><br><span class="line"></span><br><span class="line"><span class="meta">@DATASETS.register_module()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordBackgroundDataset</span>(<span class="title class_ inherited__">BaseSegDataset</span>):</span><br><span class="line">  METAINFO = <span class="built_in">dict</span>(classes = classes, palette = palette)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">    <span class="built_in">super</span>().__init__(img_suffix=<span class="string">&#x27;.jpg&#x27;</span>, seg_map_suffix=<span class="string">&#x27;.png&#x27;</span>, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmengine <span class="keyword">import</span> Config</span><br><span class="line">cfg = Config.fromfile(<span class="string">&#x27;config.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cfg.norm_cfg = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;BN&#x27;</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># 只使用GPU时，BN取代SyncBN</span></span><br><span class="line">cfg.crop_size = (<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">cfg.model.data_preprocessor.size = cfg.crop_size</span><br><span class="line">cfg.model.backbone.norm_cfg = cfg.norm_cfg</span><br><span class="line">cfg.model.decode_head.norm_cfg = cfg.norm_cfg</span><br><span class="line">cfg.model.auxiliary_head.norm_cfg = cfg.norm_cfg</span><br><span class="line"><span class="comment"># modify num classes of the model in decode/auxiliary head</span></span><br><span class="line">cfg.model.decode_head.num_classes = <span class="number">8</span></span><br><span class="line">cfg.model.auxiliary_head.num_classes = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据集的 type 和 root</span></span><br><span class="line">cfg.dataset_type = <span class="string">&#x27;StanfordBackgroundDataset&#x27;</span></span><br><span class="line">cfg.data_root = data_root</span><br><span class="line"></span><br><span class="line">cfg.train_dataloader.batch_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">cfg.train_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadAnnotations&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomResize&#x27;</span>, scale=(<span class="number">320</span>, <span class="number">240</span>), ratio_range=(<span class="number">0.5</span>, <span class="number">2.0</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomCrop&#x27;</span>, crop_size=cfg.crop_size, cat_max_ratio=<span class="number">0.75</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>, prob=<span class="number">0.5</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;PackSegInputs&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">cfg.test_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, scale=(<span class="number">320</span>, <span class="number">240</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># add loading annotation after ``Resize`` because ground truth</span></span><br><span class="line">    <span class="comment"># does not need to do resize data transform</span></span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadAnnotations&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;PackSegInputs&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfg.train_dataloader.dataset.<span class="built_in">type</span> = cfg.dataset_type</span><br><span class="line">cfg.train_dataloader.dataset.data_root = cfg.data_root</span><br><span class="line">cfg.train_dataloader.dataset.data_prefix = <span class="built_in">dict</span>(img_path=img_dir, seg_map_path=ann_dir)</span><br><span class="line">cfg.train_dataloader.dataset.pipeline = cfg.train_pipeline</span><br><span class="line">cfg.train_dataloader.dataset.ann_file = <span class="string">&#x27;splits/train.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">cfg.val_dataloader.dataset.<span class="built_in">type</span> = cfg.dataset_type</span><br><span class="line">cfg.val_dataloader.dataset.data_root = cfg.data_root</span><br><span class="line">cfg.val_dataloader.dataset.data_prefix = <span class="built_in">dict</span>(img_path=img_dir, seg_map_path=ann_dir)</span><br><span class="line">cfg.val_dataloader.dataset.pipeline = cfg.test_pipeline</span><br><span class="line">cfg.val_dataloader.dataset.ann_file = <span class="string">&#x27;splits/val.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">cfg.test_dataloader = cfg.val_dataloader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入预训练模型权重</span></span><br><span class="line">cfg.load_from = <span class="string">&#x27;checkpoint.pth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line">cfg.work_dir = <span class="string">&#x27;./work_dirs/tutorial&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练迭代次数</span></span><br><span class="line">cfg.train_cfg.max_iters = <span class="number">800</span></span><br><span class="line"><span class="comment"># 评估模型间隔</span></span><br><span class="line">cfg.train_cfg.val_interval = <span class="number">400</span></span><br><span class="line"><span class="comment"># 日志记录间隔</span></span><br><span class="line">cfg.default_hooks.logger.interval = <span class="number">100</span></span><br><span class="line"><span class="comment"># 模型权重保存间隔</span></span><br><span class="line">cfg.default_hooks.checkpoint.interval = <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机数种子</span></span><br><span class="line">cfg[<span class="string">&#x27;randomness&#x27;</span>] = <span class="built_in">dict</span>(seed=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>配置结束后可以准备训练：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmengine.runner <span class="keyword">import</span> Runner</span><br><span class="line"><span class="keyword">from</span> mmseg.utils <span class="keyword">import</span> register_all_modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># register all modules in mmseg into the registries</span></span><br><span class="line"><span class="comment"># do not init the default scope here because it will be init in the runner</span></span><br><span class="line">register_all_modules(init_default_scope=<span class="literal">False</span>)</span><br><span class="line">runner = Runner.from_cfg(cfg)</span><br><span class="line">runner.train()</span><br></pre></td></tr></table></figure><h2 id="数据集的探索">数据集的探索</h2><p>应用蒙版叠加显示标注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(img)</span><br><span class="line">plt.imshow(mask*<span class="number">255</span>, alpha=<span class="number">0.5</span>) <span class="comment"># alpha 高亮区域透明度，越小越接近原图</span></span><br><span class="line">plt.title(file_name)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>制作一个均含有标注的照片墙：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n行n列可视化</span></span><br><span class="line">n = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注区域透明度</span></span><br><span class="line">opacity = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=n, ncols=n, sharex=<span class="literal">True</span>, figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(PATH_IMAGE):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 载入图像和标注</span></span><br><span class="line">    img_path = os.path.join(PATH_IMAGE, file_name)</span><br><span class="line">    mask_path = os.path.join(PATH_MASKS, file_name)</span><br><span class="line">    img = cv2.imread(img_path)</span><br><span class="line">    mask = cv2.imread(mask_path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> mask:</span><br><span class="line">        axes[i//n, i%n].imshow(img)</span><br><span class="line">        axes[i//n, i%n].imshow(mask*<span class="number">255</span>, alpha=opacity)</span><br><span class="line">        axes[i//n, i%n].axis(<span class="string">&#x27;off&#x27;</span>) <span class="comment"># 关闭坐标轴显示</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; n**<span class="number">2</span>-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">fig.suptitle(<span class="string">&#x27;Image and Semantic Label&#x27;</span>, fontsize=<span class="number">30</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>也可以随机选择图片展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n行n列可视化</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注区域透明度</span></span><br><span class="line">opacity = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=n, ncols=n, sharex=<span class="literal">True</span>, figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, file_name <span class="keyword">in</span> <span class="built_in">enumerate</span>(os.listdir(PATH_IMAGE)[:n**<span class="number">2</span>]):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 载入图像和标注</span></span><br><span class="line">    img_path = os.path.join(PATH_IMAGE, file_name)</span><br><span class="line">    mask_path = os.path.join(PATH_MASKS, file_name)</span><br><span class="line">    img = cv2.imread(img_path)</span><br><span class="line">    mask = cv2.imread(mask_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可视化</span></span><br><span class="line">    axes[i//n, i%n].imshow(img)</span><br><span class="line">    axes[i//n, i%n].imshow(mask*<span class="number">255</span>, alpha=opacity)</span><br><span class="line">    axes[i//n, i%n].axis(<span class="string">&#x27;off&#x27;</span>) <span class="comment"># 关闭坐标轴显示</span></span><br><span class="line">fig.suptitle(<span class="string">&#x27;Image and Semantic Label&#x27;</span>, fontsize=<span class="number">30</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>对于肾小球问题，可以进行<strong>连通域分析</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connected= cv2.connectedComponentsWithStats(np.uint8(pred_mask), connectivity=<span class="number">4</span>) <span class="comment"># 第一个连通域可能是全图</span></span><br></pre></td></tr></table></figure><h2 id="性能评估">性能评估</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python ./tools/test.py cfg.py checkpoint.pth <span class="comment"># 评估精度</span></span><br><span class="line">python ./tools/analysis_tools/benchmark.py cfg.py checkpoint.pth <span class="comment"># 评估速度</span></span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ul><li><code>norm_cfg</code>配置项中<code>SyncBN</code>用于多卡，<code>BN</code>用于单卡</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
          <category> Segmentation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语义分割小综述</title>
      <link href="/2023/02/10/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E5%B0%8F%E7%BB%BC%E8%BF%B0/"/>
      <url>/2023/02/10/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E5%B0%8F%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="课程">课程</h2><div class="bilibili"><iframe src="//player.bilibili.com/player.html?aid=694174478&bvid=BV1s24y1W7Xa&cid=1001353556&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="应用">应用</h2><ul><li>人像分割</li><li>自动驾驶</li><li>医疗影像</li><li>智能遥感：河流、田地等</li></ul><h2 id="思路">思路</h2><ul><li>先验知识：颜色相近，物体交界颜色变化<ul><li>先验知识不完全准确</li></ul></li><li>逐像素分类：滑窗，逐个滑动预测类别<ul><li>需重复计算卷积</li></ul></li><li>复用卷积：直接在feature map上预测<ul><li>需要<strong>全连接层的卷积化</strong>：每个全连接层神经元用一个卷积核替换（Fully Convolutional Network）</li><li>预测图上采样：双线性插值或转置卷积</li></ul></li></ul><blockquote><p>双线性插值可以用对应卷积核代替：先进行零插值，再使用设计好的卷积核卷积</p></blockquote><h3 id="转置卷积">转置卷积</h3><blockquote><p>也称升卷积Upconvolution或反卷积Deconvolution，但不建议使用反卷积，其在数学上与卷积不互逆。转置卷积Transposed Convolution名称来源于卷积对应的矩阵运算。</p></blockquote><p>对于卷积运算</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo>=</mo><mi>I</mi><mo>∗</mo><mi>h</mi><mo>=</mo><mi>C</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">O = I * h = CI</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>为卷积核，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>为输出（小图），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>为输入（大图），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>为卷积运算的等价矩阵乘法项。可以发现其转置卷积有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><msup><mi>h</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msup><mi>C</mi><mi>T</mi></msup><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27; = O&#x27;*h&#x27; = C^TO&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>最终我们逐像素计算交叉熵损失并求和。</p><p>结合浅层特征图可以使用FCN更精确。最典型的为UNet。</p><p>此外周围内容也提供上下文信息。这需要大感受野。</p><ul><li>PSPNet：多尺度池化 + 特征拼接</li></ul><h3 id="空洞卷积与DeepLab">空洞卷积与DeepLab</h3><ul><li>空洞卷积解决下采样问题：提高感受野，不增加参数<ul><li>池化层和步长剔除，代价为增大参数量</li><li>下采样 + 卷积 = 空洞卷积</li><li><strong>去除分类模型后半部分下采样，改为膨胀卷积，逐步增加rate维持感受野</strong></li></ul></li><li>条件随机场CRF后处理，精细化分割图<ul><li>结合原图颜色信息和神经网络预测类别后处理，最小化能量函数</li><li>本身是概率模型，用能量函数表示分割结果优劣，最小化能量函数获得更好分割结果</li></ul></li></ul><p>给定能量函数</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi mathvariant="bold-italic">x</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mi>i</mi></munder><msub><mi>θ</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><munder><mo>∑</mo><mrow><mi>i</mi><mi>j</mi></mrow></munder><msub><mi>θ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E(\boldsymbol{x})=\sum_i\theta_i(x_i)+\sum_{ij}\theta_{ij}(x_i, x_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3277em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4638em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold-italic">x</mi></mrow><annotation encoding="application/x-tex">\boldsymbol{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span></span></span></span>为全部像素预测结果，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">x_i, x_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>为特定像素预测结果（向量化后仅有1维坐标），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_i(x_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是单个预测对能量函数的贡献，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_{ij}(x_j, x_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是一对预测对能量函数的贡献。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>θ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>μ</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mrow><mo fence="true">[</mo><msub><mi>w</mi><mn>1</mn></msub><mi>exp</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>i</mi></msub><mo>−</mo><msub><mi>p</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>α</mi><mn>2</mn></msubsup></mrow></mfrac><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mi>I</mi><mi>i</mi></msub><mo>−</mo><msub><mi>I</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>β</mi><mn>2</mn></msubsup></mrow></mfrac><mo fence="true">)</mo></mrow><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><mi>exp</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>i</mi></msub><mn>0</mn><msub><mi>p</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>γ</mi><mn>2</mn></msubsup></mrow></mfrac><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow><mspace linebreak="newline"></mspace><mi>μ</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\theta_i(x_i) = -\log P(x_i)\\\theta_{ij}(x_i, x_j) = \mu(x_i, x_j)\left[w_1\exp\left(-\frac{||p_i-p_j||^2}{2\sigma_\alpha^2}-\frac{||I_i-I_j||^2}{2\sigma_\beta^2}\right) + w_2\exp\left(-\frac{||p_i0p_j||^2}{2\sigma_\gamma^2}\right)\right]\\\mu(x_i, x_j) = [x_i \ne x_j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord mathnormal">μ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.933em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.3987em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1234em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0691em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">μ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span>表示仅在类别不同时产生惩罚，括号内前一项表示颜色相近且位置相近时产生的惩罚（鼓励颜色边界处产生类别变化），后一项表示位置相近时产生的惩罚（鼓励平滑结果）</p></blockquote><ul><li>多尺度空洞卷积Atrous Spatial Pyramid Pooling ASPP模块捕捉上下文信息<ul><li>改用空洞卷积替代多尺度池化</li></ul></li><li>DeepLabV3：借鉴Encoder/Decoder结构，在原有结构上增加了简单的decoder结构</li></ul><p>总结</p><ul><li>降采样问题：双线性插值、转置卷积（FCN、UNet）、空洞卷积（DeepLab）</li><li>恢复细节：分别基于高低层特征预测（FCN）、融合高低层特征再预测（UNet、DeepLabV3）、CRF后处理（DeepLab V1/V2）</li><li>上下文信息：池化金字塔（PSPNet）、多尺度空洞卷积ASPP（DeepLabV3/V3+）</li></ul><h2 id="评估">评估</h2><ul><li>Accuracy：交集/GT面积，类似Recall</li><li>IoU：交集/GT和预测并集，类似Precision</li><li>Dice：GT与预测的调和平均（2x交集面积/GT与预测的面积和），类似F1 Score</li><li>m前缀：每类分别计算指标再按类别平均</li><li>混淆矩阵：不常用</li></ul><h2 id="问题">问题</h2><ul><li>Matting问题使用mmedicing，更底层，更细节，适用于微距摄影等</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
          <category> Segmentation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmDetection实战</title>
      <link href="/2023/02/08/mmDetection%E5%AE%9E%E6%88%98/"/>
      <url>/2023/02/08/mmDetection%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="课程">课程</h2><div class="bilibili">  <iframe src="//player.bilibili.com/player.html?aid=566509200&bvid=BV1Av4y1475i&cid=998465317&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="YOLOv3模型">YOLOv3模型</h2><ul><li>主干网络：Darknet53</li><li>颈部：FPN</li><li>检测头</li></ul><h2 id="技巧">技巧</h2><p>搜索模型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mim search mmdet --model <span class="string">&quot;mask r-cnn&quot;</span></span><br></pre></td></tr></table></figure><p>推理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> init_detector, inference_detector, show_result_pyplot</span><br><span class="line"></span><br><span class="line">model = init_detector(<span class="string">&#x27;config_path&#x27;</span>, <span class="string">&#x27;checkpoint_path&#x27;</span>)</span><br><span class="line">result = inference_detector(model, <span class="string">&#x27;img_path&#x27;</span>)</span><br><span class="line">show_result_pyplot(model, <span class="string">&#x27;img_path&#x27;</span>, result)</span><br></pre></td></tr></table></figure><h2 id="推理">推理</h2><p>简单的推理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> init_detector, inference_detetor, show_result_pyplot</span><br><span class="line">model = init_detector(cfg, checkpoint)</span><br><span class="line">result = inference_detector(model, img_path)</span><br><span class="line">show_result_pyplot(model, img_path, result)</span><br></pre></td></tr></table></figure><h2 id="配置文件">配置文件</h2><ul><li>模型结构<ul><li>model</li></ul></li><li>数据集<ul><li>data</li></ul></li><li>训练策略<ul><li>optimizer</li><li>lr_config</li></ul></li><li>运行时：GPU、分布式环境配置等</li><li>辅助功能：日志等</li></ul><p>使用<strong>继承</strong>来修改配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_base_ = [<span class="string">&#x27;config.py&#x27;</span>]</span><br></pre></td></tr></table></figure><p>对应的，有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmcv <span class="keyword">import</span> Config</span><br><span class="line">cfg = Config(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cfg.pretty_text)</span><br></pre></td></tr></table></figure><p>用于测试（<code>--show-dir</code>用于绘制全部结果）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mim <span class="built_in">test</span> mmdet config.py --checkpoint checkpoint.pth --show-dir <span class="built_in">dir</span></span><br></pre></td></tr></table></figure><p>一些注意事项</p><ul><li><code>repeat</code>用于重复数据集，对应的epoch可以降低</li><li><code>lr_config</code>在从头训练的时候比较重要，在微调中也许可以省去</li><li>SGD算法配合不同学习率策略表</li></ul><table><thead><tr><th style="text-align:center">学习率策略</th><th style="text-align:center">第一次降低</th><th style="text-align:center">第二次降低</th><th style="text-align:center">总轮数</th></tr></thead><tbody><tr><td style="text-align:center">1x</td><td style="text-align:center">8轮</td><td style="text-align:center">11轮</td><td style="text-align:center">12轮</td></tr><tr><td style="text-align:center">2x</td><td style="text-align:center">16轮</td><td style="text-align:center">22轮</td><td style="text-align:center">24轮</td></tr><tr><td style="text-align:center">20e</td><td style="text-align:center">16轮</td><td style="text-align:center">19轮</td><td style="text-align:center">20轮</td></tr></tbody></table><h2 id="笔记">笔记</h2><ul><li>注意<code>data</code>中如果不是默认的80 classes，需要设置<code>classes=('balloon',)</code></li></ul><p>有关<code>python -m pip install</code>和<code>pip install</code>的区别，可以看<a href="https://stackoverflow.com/questions/25749621/whats-the-difference-between-pip-install-and-python-m-pip-install">这里</a>。</p><p>由于<code>h264</code>是GPL协议，与<code>opencv-python</code>的MIT协议不匹配，所以需要参考<a href="https://github.com/opencv/opencv-python/issues/100#issuecomment-554870068">这个</a>从源码编译。也可以像<a href="https://blog.csdn.net/weixin_44359953/article/details/127257534">这样</a>直接通过<code>pip</code>进行编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --no-binary opencv-python opencv-python -U</span><br></pre></td></tr></table></figure><p>但是这步之后发现opencv不再能读取视频，可用下面的代码查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(cv2.getBuildInformation())</span><br></pre></td></tr></table></figure><p>注意到Video下的全是NO。</p><p><code>/etc/apt/sources.list.d</code>文件夹下也有apt的source</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
          <category> Detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测小综述</title>
      <link href="/2023/02/07/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%B0%8F%E7%BB%BC%E8%BF%B0/"/>
      <url>/2023/02/07/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%B0%8F%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="课程">课程</h2><blockquote><p>这节课讲得有点划，硬核的部分都略去了orz</p></blockquote><div class="bilibili">  <iframe src="//player.bilibili.com/player.html?aid=778980921&bvid=BV1Ay4y1Q7mC&cid=996998973&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="思路">思路</h2><ul><li>滑窗：不可接受的效率成本<ul><li>R-CNN、Fast R-CNN：Selective Search提议，比较复杂</li></ul></li><li>Regional Proposal：使用一些特征减少框数<ul><li>Selective Search：贪心算法将相邻而相似的图像块合并</li></ul></li><li>消除滑窗重复计算：一次卷积计算所有特征，裁切特征图分类</li><li>密集预测</li></ul><h3 id="两阶段方法">两阶段方法</h3><p>区域提议+区域识别，逐步被单阶段取代</p><ul><li>Fast R-CNN</li><li>Faster R-CNN</li><li>Mask R-CNN</li></ul><p>锚框：原图上设置不同尺寸的基准框，基于特征独立预测其中是否包含物体（区域提议）</p><h3 id="级联方法">级联方法</h3><ul><li>Cascade R-CNN</li><li>HTC</li></ul><h3 id="单阶段方法">单阶段方法</h3><ul><li>YOLO Series</li><li>SSD：在多个特征图上使用密集预测方法，产生所有位置、不同尺度、所有锚框的预测结果<ul><li>锚框与真值匹配原则：一个真值框可匹配多个IoU &gt; 0.5的锚框</li><li>8732个锚框分类 + 回归预测计算损失，每个锚框都有其分类、回归真值</li></ul></li><li>Retina Net：FPN多尺度特征融合+Focal loss</li><li>FCOS：直接在多尺度特征图上进行预测，多尺度特征图本身可表达不同尺度物体，抛弃了锚框</li><li>CenterNet：在特征图上分别逐点回归产生热力图和局部偏移量</li></ul><p>锚框数极多，正负样本不均衡</p><ul><li>两阶段检测通过区域提议拒绝了大量负样本，区域检测头接收正负样本并不悬殊</li><li>解决方案：Focal loss</li></ul><blockquote><p>区域提议用于拒绝负样本，但区域提议模块是如何解决正负样本不均衡的问题的呢？</p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">F</mi><mi mathvariant="normal">L</mi></mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mi>α</mi><mi>t</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mi>γ</mi></msup><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{\rm FL}(p_t) = -\alpha_t(1-p_t)^\gamma \log(p_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">FL</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">p_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为属于其真值类别的概率（交叉熵损失<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">C</mi><mi mathvariant="normal">E</mi></mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{\rm CE}(p_t)=-\log(p_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">CE</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>），聚焦因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mi>γ</mi></msup></mrow><annotation encoding="application/x-tex">(1-p_t)^\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span>调节困难、简单负样本相对损失（越自信对loss的贡献越小，不自信时的惩罚较大），加权因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>α</mi><mi>t</mi></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\alpha_t\in[0, 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>α</mi><mi>t</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>α</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>正样本</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>负样本</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\alpha_t = \begin{cases}\alpha &amp; 正样本\\1-\alpha &amp; 负样本\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">正样本</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">负样本</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>通常增大<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>对应减少<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>。</p><h3 id="Transformer">Transformer</h3><ul><li>DETR：脱离密集预测模式，将检测建模为从<strong>特征序列</strong>到<strong>框序列</strong>的翻译问题，使用匈牙利算法与真值框比对，但收敛慢</li><li>D而formable DETR：显式建模query注意的位置，收敛更快</li></ul><h2 id="重要方法">重要方法</h2><h3 id="设计">设计</h3><ul><li>非极大抑制NMS：每次从检测结果找出置信度最大的框，剔除IoU超过阈值的框</li><li>边界框回归：预测相对滑窗的偏移量</li><li>边界框编码：边界框绝对偏移量数值上常较大，因此需要进行一定变换，例如R-CNN系列</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>w</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><msub><mi>g</mi><mi>x</mi></msub><mo>−</mo><msub><mi>p</mi><mi>x</mi></msub></mrow><msub><mi>p</mi><mi>w</mi></msub></mfrac><mo separator="true">,</mo><mfrac><mrow><msub><mi>g</mi><mi>y</mi></msub><mo>−</mo><msub><mi>p</mi><mi>y</mi></msub></mrow><msub><mi>p</mi><mi>h</mi></msub></mfrac><mo separator="true">,</mo><mi>log</mi><mo>⁡</mo><mfrac><msub><mi>g</mi><mi>w</mi></msub><msub><mi>p</mi><mi>w</mi></msub></mfrac><mo separator="true">,</mo><mi>log</mi><mo>⁡</mo><mfrac><msub><mi>g</mi><mi>h</mi></msub><msub><mi>p</mi><mi>h</mi></msub></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">T = (t_x, t_y, t_h, t_w) = \left(\frac{g_x-p_x}{p_w}, \frac{g_y-p_y}{p_h}, \log\frac{g_w}{p_w}, \log\frac{g_h}{p_h}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><h3 id="评估">评估</h3><ul><li>precision：检测结果里有多少是正确的</li><li>recall：检测出了多少物体</li><li>PR曲线与Average Precision AP（PR曲线下面积）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
          <category> Detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmClassification实战</title>
      <link href="/2023/02/06/mmClassification%E5%AE%9E%E6%88%98/"/>
      <url>/2023/02/06/mmClassification%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1>笔记</h1><h2 id="训练注意事项">训练注意事项</h2><p>对Evaluation部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">evaluation = <span class="built_in">dict</span>(</span><br><span class="line">  interval=<span class="number">1</span>,</span><br><span class="line">  metric=<span class="string">&#x27;accuracy&#x27;</span>, </span><br><span class="line">  save_best=<span class="string">&#x27;accuracy_top-1&#x27;</span>, </span><br><span class="line">  metric_options=&#123;<span class="string">&#x27;topk&#x27;</span>:(<span class="number">1</span>,)&#125; <span class="comment"># 由于总类为4，这里必须指明metric_options</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>启用标签平滑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在head中修改loss</span></span><br><span class="line">loss=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LabelSmoothLoss&#x27;</span>, label_smooth_val=<span class="number">0.2</span>, mode=<span class="string">&#x27;original&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>load_from</code>用于加载模型，<code>resume_from</code>用于重启训练，两者不同。</p><p>想要启用Wandb，可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log_config = <span class="built_in">dict</span>(</span><br><span class="line">  interval=<span class="number">10</span>, </span><br><span class="line">  hooks=[</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;TextLoggerHook&#x27;</span>), </span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;MMClsWandbHook&#x27;</span>, init_kwargs=<span class="built_in">dict</span>(project=<span class="string">&#x27;mice-cls&#x27;</span>))</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>但是不知道为什么不能在wandb上看数据集和eval的结果。</p></blockquote><h2 id="评估注意事项">评估注意事项</h2><p>首先需要产生<code>result.pkl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mim <span class="built_in">test</span> mmcls config.py \</span><br><span class="line">  --checkpoint model.pth \</span><br><span class="line">  --metrics accuracy \</span><br><span class="line">  --metric-options <span class="string">&#x27;topk=(1,)&#x27;</span> \</span><br><span class="line">  --out result.pkl</span><br></pre></td></tr></table></figure><p>然后可以观察结果，在指定目录下会生成一些成功和失败案例，默认为20个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python tools/analysis_tools/analyze_results.py config.py result.pkl \</span><br><span class="line">  --out-dir out_img_dir</span><br></pre></td></tr></table></figure><p>计算acc precision recall等指标，具体可以<a href="https://mmclassification.readthedocs.io/en/latest/api/core.html#id1">看这里</a>，或者在<code>base_dataset.py</code>及其他数据集定义文件里找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python tools/analysis_tools/eval_metric.py config.py result.pkl \</span><br><span class="line">  --metrics accuracy precision recall f1_score support ... \</span><br><span class="line">  --metric-options <span class="string">&#x27;topk=(1,)&#x27;</span></span><br></pre></td></tr></table></figure><p>如果要计算混淆矩阵，可以<a href="https://github.com/open-mmlab/mmclassification/issues/598">看这里</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">from</span> mmcls.datasets <span class="keyword">import</span> build_dataset</span><br><span class="line"><span class="keyword">from</span> mmcls.core.evaluation <span class="keyword">import</span> calculate_confusion_matrix</span><br><span class="line">cfg = mmcv.Config.fromfile(<span class="string">&quot;your_config_file&quot;</span>)</span><br><span class="line">dataset = build_dataset(cfg.data.test)</span><br><span class="line">pred = mmcv.load(<span class="string">&quot;./result.pkl&quot;</span>)[<span class="string">&#x27;class_scores&#x27;</span>]</span><br><span class="line">matrix = calculate_confusion_matrix(pred, dataset.get_gt_labels())</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imshow(matrix)</span><br><span class="line">plt.savefig(<span class="string">&#x27;confusion_matrix.png&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意，不需要<code>--out-items class_scores</code>也能行</p></blockquote><p>观察CAM激活图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python tools/visualizations/vis_cam.py pic.jpg config.py \</span><br><span class="line">  model.pth --method layercam --save-path cam.png \</span><br><span class="line">  --target-layer <span class="string">&#x27;backbone.norm3&#x27;</span></span><br></pre></td></tr></table></figure><p>不知道观察哪一层可以用<code>--preview-model</code>来看，关于某类则可指明<code>--target-categ</code>。</p><h1>实验</h1><p><a href="https://github.com/tctco/mmlab/tree/main/classification-mice">传送门</a></p><h2 id="4小鼠实验动物Classification">4小鼠实验动物Classification</h2><p>这是一个自制的数据集，裁切自MOT，来源于真实的4只C57小鼠社交实验，不仅四至小鼠长得一模一样，有时候挤在一起形变和干扰非常多，难度可以说是相当变态了。</p><table><thead><tr><th>mouse1</th><th>mouse2</th><th>mouse3</th><th>mouse4</th></tr></thead><tbody><tr><td><img src="https://github.com/tctco/mmlab/blob/main/classification-mice/imgs/mouse1.png?raw=true" alt="1"></td><td><img src="https://github.com/tctco/mmlab/blob/main/classification-mice/imgs/mouse2.png?raw=true" alt="2"></td><td><img src="https://github.com/tctco/mmlab/blob/main/classification-mice/imgs/mouse3.png?raw=true" alt="3"></td><td><img src="https://github.com/tctco/mmlab/blob/main/classification-mice/imgs/mouse4.png?raw=true" alt="4"></td></tr></tbody></table><p>使用<code>hornet-tiny</code>和<code>densenet121</code>，相对来说前者看上去更稳定一些（也可能与优化器、数据增强等其他因素有关）。DenseNet是<a href="https://github.com/SIPEC-Animal-Data-Analysis/SIPEC">SIPEC</a>给出的解决方案，但是波动非常大，最高可以到54%，低的时候只有45%左右。</p><p><img src="https://raw.githubusercontent.com/tctco/mmlab/main/classification-mice/imgs/acc_curve.png" alt="acc_curve"></p><p>最终在测试集的精度可以达到59%左右，感觉已经算是意外之喜了……</p><h2 id="混淆矩阵">混淆矩阵</h2><p><img src="https://raw.githubusercontent.com/tctco/mmlab/main/classification-mice/imgs/confusion_matrix.png" alt="confusion_matrix"></p><h2 id="EigenGardCAM">EigenGardCAM</h2><p>小鼠的尾部确实做了一点标记。</p><p><img src="https://raw.githubusercontent.com/tctco/mmlab/main/classification-mice/imgs/cam.png" alt="cam"></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
          <category> Classification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmClassification学习</title>
      <link href="/2023/02/04/mmClassification%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/04/mmClassification%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="课程">课程</h2><blockquote><p><code>mim</code>很好用，感觉需要更多地研究一下</p></blockquote><div class="bilibili">  <iframe src="//player.bilibili.com/player.html?aid=308794938&bvid=BV1MA411k7NT&cid=991943842&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="流程">流程</h2><p>下载配置文件和模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mim download mmcls --config mobilenetblablabla --dest .</span><br></pre></td></tr></table></figure><p>使用API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmcls.apis <span class="keyword">import</span> init_model, inference_model</span><br><span class="line">model = init_model(<span class="string">&#x27;config.py&#x27;</span>, <span class="string">&#x27;model.pth&#x27;</span>, device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line">result = inference_model(model, <span class="string">&#x27;pic.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmcls.apis <span class="keyword">import</span> show_result_pyplot</span><br><span class="line">show_result_pyplot(model, <span class="string">&#x27;pic.jpg&#x27;</span>, result)</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num_classes = <span class="number">10</span></span><br><span class="line">load_from = <span class="string">&#x27;model_path.pth&#x27;</span></span><br><span class="line"><span class="built_in">type</span> = <span class="string">&#x27;CustomDataset&#x27;</span></span><br><span class="line">ann_file = <span class="literal">None</span> <span class="comment"># 为空则按文件夹结构推断</span></span><br><span class="line">lr = <span class="number">0.005</span> <span class="comment"># n卡至1k、微调训练均需降低lr</span></span><br><span class="line">runner = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;EpochBasedRunner&#x27;</span>, max_epochs=<span class="number">5</span>)</span><br><span class="line">checkpoint_config <span class="comment"># 可适度升高避免频繁存储模型</span></span><br><span class="line">log_config <span class="comment"># 可适度提升</span></span><br></pre></td></tr></table></figure><p>开始训练</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mim train mmcls mobilenet-v2_fruit.py</span><br></pre></td></tr></table></figure><h2 id="作业记录">作业记录</h2><p><a href="https://github.com/open-mmlab/OpenMMLabCamp/blob/main/AI%20%E5%AE%9E%E6%88%98%E8%90%A5%E5%9F%BA%E7%A1%80%E7%8F%AD/%E4%BD%9C%E4%B8%9A%E4%B8%80%20mmclassification">作业</a>很简单。top-1能到95以上。进阶作业比较同质化，又没啥原创性的想法改网络结构，懒得做了。一些注意事项记录如下。</p><p>解决<code>ImportError: cannot import name 'blablabla' from 'mmcv'</code>问题：重装<code>mmcv-full</code></p><ol><li><code>pip list | grep mmcv</code> 发现有<code>mmcv</code>和<code>mmcv-full</code></li><li>卸载<code>mmcv</code></li><li>重装<code>mmcv-full</code>：<code>mim uninstall mmcv-full</code> + <code>mim install mmcv-full</code></li></ol><p>更新pip包：<code>pip install -U</code></p><p><code>mim</code>命令行工具很好用，调config文件的时候用非常方便，且下载的config文件是完整而非基于<code>__base__</code>的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mim download mmcls --config mobilenet-v2_8xb32_in1k --dest .</span><br></pre></td></tr></table></figure><p>关于保存最好的一次，请见<a href="https://github.com/open-mmlab/mmclassification/issues/125#issuecomment-1416742911">issue和我的回答</a>。</p><p>关于<code>evaluation</code>其实有一些令人迷惑的地方，比如这里的<code>metric='accuracy'</code>和<code>ClsHead</code>里的<code>topk=(1, 5)</code>之间有什么关系？config文件中是这样写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evaluation = <span class="built_in">dict</span>(interval=<span class="number">1</span>, metric=<span class="string">&#x27;accuracy&#x27;</span>, save_best=<span class="string">&#x27;accuracy_top-1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里的<code>interval</code>和<code>save_best</code>是传给<code>EvalHook</code>的，而<code>metric</code>等其他参数则是传给<code>CustomDataset</code>（或其他数据集类）的。实际上还有别的metric，<code>base_dataset.py</code>代码文件中<code>evaluate</code>函数是这样写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def evaluate(...):</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">if</span> metric_options <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    metric_options = &#123;<span class="string">&#x27;topk&#x27;</span>: (<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(metric, <span class="built_in">str</span>):</span><br><span class="line">    metrics = [metric]</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    metrics = metric</span><br><span class="line">  allowed_metrics = [</span><br><span class="line">    <span class="string">&#x27;accuracy&#x27;</span>, <span class="string">&#x27;precision&#x27;</span>, <span class="string">&#x27;recall&#x27;</span>, <span class="string">&#x27;f1_score&#x27;</span>, <span class="string">&#x27;support&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;accuracy&#x27;</span> <span class="keyword">in</span> metrics:</span><br><span class="line">    <span class="keyword">if</span> thrs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">      acc = accuracy(results, gt_labels, topk=topk, thrs=thrs)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      acc = accuracy(results, gt_labels, topk=topk)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(topk, <span class="built_in">tuple</span>):</span><br><span class="line">      eval_results_ = &#123;</span><br><span class="line">          <span class="string">f&#x27;accuracy_top-<span class="subst">&#123;k&#125;</span>&#x27;</span>: a</span><br><span class="line">          <span class="keyword">for</span> k, a <span class="keyword">in</span> <span class="built_in">zip</span>(topk, acc)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      eval_results_ = &#123;<span class="string">&#x27;accuracy&#x27;</span>: acc&#125;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">return</span> eval_results</span><br></pre></td></tr></table></figure><p>所以这个<code>save_best</code>传递的<code>accuracy_top-1</code>实际上是<code>eval_result</code>的一个<code>key</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
          <category> Classification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV小综述</title>
      <link href="/2023/02/03/CV%E5%B0%8F%E7%BB%BC%E8%BF%B0/"/>
      <url>/2023/02/03/CV%E5%B0%8F%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="课程">课程</h2><div class="bilibili">  <iframe src="//player.bilibili.com/player.html?aid=948780698&bvid=BV1js4y1W7CN&cid=990930670&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="设计图像特征">设计图像特征</h2><p>可以看<a href="https://www.bilibili.com/video/BV1js4y1W7CN/?spm_id_from=333.999.0.0&amp;vd_source=3f3767872baffbcc76fdbe493846d77e">这篇文章</a>和<a href="https://blog.csdn.net/gg13213/article/details/123762834">这篇文章</a>：</p><ul><li>方向梯度直方图Histogram of Oriented Gradients/HOG，局部统计像素梯度的方向分布，将物体映射为低维特征向量，简化数据表达。</li><li>Dense grid descriptor (HOG, LBP) =&gt; Coding: local coordinate, super-vector =&gt; Pooling, SPM =&gt; Linear SVM</li></ul><h2 id="深度学习">深度学习</h2><p>用于解决此前难以进行的特征提取</p><ul><li>卷积</li><li>多头注意力：实现一步特征提取</li></ul><h2 id="ResNet">ResNet</h2><p>有效性猜想</p><ul><li>等同于多模型集成：路径之间的复杂组合，每种组合都视为一个新模型</li><li>Loss Surface更加平滑，图很好玩（Visualizing the Loss Landscape of Neural Nets）</li></ul><p>改良</p><ul><li>ResNet B/C/D：残差模块基部改进</li><li>ResNeXt：分组卷积（将通道拆解成两部分，分别进行卷积，再将结果堆叠），降低参数量</li><li>SEResNet：通道维度引入注意力机制</li></ul><blockquote><p>某些情况下分组卷积效果更好，可能是由于增强了通道之间的相关性（仅组内关联），同时也降低过拟合</p></blockquote><h2 id="其他网络结构">其他网络结构</h2><ul><li>神经结构搜索NAS，基于强化学习方法：NASNet、MnasNet、EfficientNet、RegNet</li><li>Transformer：Vision Transformer、Swin-Transformer</li><li>ConvNeXt，将SwinTransformer模型元素迁移至卷积网络中性能反超</li></ul><h2 id="轻量化卷积网络">轻量化卷积网络</h2><ul><li>GoogLeNet：Inception模块，将3个3x3卷积核改为3个不同大小的卷积核，输出按通道叠加</li><li>ResNet：BottleNeck模块，通过1x1模块压缩通道</li><li>MobileNet：可分离卷积（逐层卷积+逐点卷积），V2引入残差模块，V3引入SE模块</li><li>ResNeXt：分组卷积（见上）</li></ul><h2 id="Vision-Transformer">Vision Transformer</h2><ul><li>query向量查询key生成weight，与input组合生成下一层</li><li>query可以来自input（自注意力），或其他位置（互注意力），但key和value都直接来源于input</li><li>Multi-head多头注意力：类比Conv通道，使用不同注意力头产生多组特征进行拼接</li><li>Swin-Transformer：将特征图划分为多个不相交的区域（Window）内，注意力被限制在窗口中，通过Shifted WindowsMulti-Head Self-Attention SW-MSA概念，将l+1层窗口偏移，使信息跨窗口流动</li></ul><h2 id="学习技巧">学习技巧</h2><ul><li>无监督学习需要辅助任务</li><li>初始化：Kaiming，预训练模型等</li><li>学习率：从头训练0.01-0.1，微调0.001-0.01</li><li>退火：按步长、比例、倒数、余弦函数下降</li><li>升温Warmup</li><li>Linear Scaling Rule线性扩展原则：batchsize扩大到原来k倍，学习率也应扩大k倍（batchsize小，每轮更新单张图片会给模型大的影响）</li><li>自适应梯度：Adagrad、Adam/AdamW</li><li>权重衰减Weight Decay：损失函数正则化项在梯度更新策略中的体现，每轮更新都将旧权重乘一个小于1的系数（类似遗忘过程）</li><li>早停Early Stopping</li><li>权重平均：EMA，Stochastic Weight Averaging SWA（类似EMA，但训练末期用高学习率，在损失平面平坦区域进行更多探索）</li><li>数据增强：AutoAugment、RandAugment</li><li>图像组合：Mixup、CutMix</li><li>标签平滑Label Smoothing：在label中引入噪声，避免模型过于自信</li><li>自监督学习类型</li><li>基于代理任务：Image Colorization, Solving Jigsaw Puzzles（这脑洞……绝！）, Relative location</li><li>基于对比学习：SimCLR使用数据增强InfoNCE loss</li><li>基于掩码学习，Masked autoencoders MAE</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMMLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mechanism: Address Translation</title>
      <link href="/2020/10/01/Mechanism-Address-Translation/"/>
      <url>/2020/10/01/Mechanism-Address-Translation/</url>
      
        <content type="html"><![CDATA[<h1>Mechanism: Address Translation</h1><p>CPU: <strong>limited direct execution (LDE)</strong></p><p>In virtualizing memory, we will pursue efficiency and control.</p><p>CRUX: How to efficiently and flexibly virtualize memory?</p><p>Technique: <strong>hardware-based address translation / address translation</strong>, changing the <strong>virtual</strong> address provided by the instruction to a <strong>physical</strong> address.</p><p><strong>Interposition is powerful</strong>: On of the usual benefits of such an approach is <strong>transparency</strong>.</p><h2 id="Dynamic-Hardware-based-Relocation">Dynamic (Hardware-based) Relocation</h2><p><strong>base and bounds / dynamic relocation</strong>:</p><ul><li><strong>base register</strong></li><li><strong>bounds / limit register</strong></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mi>h</mi><mi>y</mi><mi>s</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>l</mi><mtext> </mtext><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>v</mi><mi>i</mi><mi>r</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mtext> </mtext><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>+</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">physical \ address  =virtual \ address  + base</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ys</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal">ress</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal">ress</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">ba</span><span class="mord mathnormal">se</span></span></span></span></span></p><p>The base and bounds registers are hardware structures kept on the chip (one pair per CPU). Sometimes people call the part of the processor that helps with address translation the <strong>memory management unit (MMU)</strong>.</p><h2 id="Hardware-Support-A-Summary">Hardware Support: A Summary</h2><ul><li><p>2 CPU modes:</p><ul><li>The OS runs in <strong>privileged mode / kernel mode</strong>, where it has access to the entire machine; applications run in <strong>user mode</strong>, where they are limited in what they can do. A single bit, perhaps stored in some kind of <strong>processor status word</strong>, indicates which mode the CPU is currently running in; upon certain special occasions (e.g., a system call or some other kind of exception or interrupt), the CPU switches modes.</li></ul></li><li><p><strong>base and bounds registers</strong>: <strong>MMU</strong></p><ul><li>The hardware should provide special instructions to modify the base and bounds registers, allowing the OS to change them when different processes run. These instructions are <strong>privileged</strong>; only in kernel ode can the registers be modified.</li><li>The CPU must be able to generate <strong>exceptions</strong> in situations where a user tries to access memory illegally; in this case, the CPU should stop executing the user program and arrange for the OS “out of bounds” <strong>exception handler</strong> to run. The CPU should raise an exception and run the “tried to execute a privileged operation while in user mode” handler. The CPU must provide a method to inform it of the location of these handlers; a few more privileged instructions are thus needed.</li></ul><h2 id="Operating-System-Issues">Operating System Issues</h2><p><strong>free list</strong>: a data structure that tracks memory usage.</p><p>Specifically, when the OS decides to stop running a process, it must save the values of the base and bounds registers to memory, in some per-process structure such as the <strong>process structure</strong> or <strong>process control block (PCB)</strong>.</p></li></ul><h2 id="Problems">Problems</h2><ul><li><strong>Internal fragmentation</strong>: the stack and heap are too small. The space is wasted.</li></ul><h2 id="Homework">Homework</h2><ol><li>Run with seeds 1, 2, and 3, and compute whether each virtual address generated by the process is in or out of bounds. If in bounds, compute the translation.<ul><li>SV PA SV SV SV</li><li>PA PA SV SV SV</li><li>SV SV SV PA PA</li></ul></li><li>Run with these flags: <code>-s 0 -n 10</code>. What value do you have set <code>-l</code> (the bounds register) to in order to ensure that all the generated virtual addresses are within bounds?<ul><li>929</li></ul></li><li>Run with these flags: <code>-s 1 -n 10 -l 100</code>. What is the maximum value that base can be set to, such that the address space still fits into physical memory in its entirety?<ul><li>16283</li></ul></li><li>Run some of the same problems above, but with larger address spaces (<code>-a</code>) and physical memories (<code>-p</code>).</li><li>What fraction of randomly-generated virtual addresses are valid, as a function of the value of the bounds register? Make a graph from running with different random seeds, with limit values ranging from 0 up to the maximum size of the address space.</li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Interlude: Memory API</title>
      <link href="/2020/09/21/Interlude-Memory-API/"/>
      <url>/2020/09/21/Interlude-Memory-API/</url>
      
        <content type="html"><![CDATA[<h1>Interlude: Memory API</h1><p>CRUX: How to allocate and manage memory in UNIX/C programs?</p><h2 id="Types-of-Memory">Types of Memory</h2><p><strong>stack memory</strong>: allocations and deallocations are managed implicitly by the compiler. For this reason it is sometimes called <strong>automatic</strong> memory.</p><p>Declaring memory on the stack in C is easy. For example, let’s say you need some space in function <code>func()</code> for an integer, called <code>x</code>. To declare such a piece of memory, you just do something like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compiler does the rest, making sure to make space on the stack when you call into <code>func</code>. When you return form the function, the compiler deallocates the memory for you; thus, if you want some information to live beyond the call invocation, you had better not leave that information on the stack.</p><p><strong>heap memory</strong>: all allocations and deallocations are explicitly handled.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> *x = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both stack and heap allocation occur on this line: first the compiler knows to make room for a pointer to an integer when it sees your declaration of said pointer (<code>int *x</code>); subsequently, when the program calls <code>malloc()</code>, it requests space for an integer on the heap; the routine returns the address of such an integer.</p><h2 id="The-malloc-Call">The <code>malloc</code> Call</h2><p>Form man page for <code>malloc</code>, all you need to do is include the header file <code>stdlib.h</code>. In fact, you don’t really need to even do this, as the C library, which all C programs link with by default, has the code for <code>malloc()</code> inside of it, adding the header just lets the compiler check whether you are calling <code>malloc</code> correctly.</p><p>The invocation of <code>malloc</code> uses the <code>sizeof()</code> operator to request the right amount of space; in C, this is generally thought of as a compile-time operator, meaning that the the actual size is known at compile time and thus a number is substituted as the argument to <code>malloc()</code>. For this reason, <code>sizeof()</code> is correctly thought of as an operator and not a function call.</p><p>You can also pass in the name of a variable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *x = <span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(x)); <span class="comment">// 4 on 32-bit machines or 8 on 64-bit machines</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(x)); <span class="comment">// 40 bytes</span></span><br></pre></td></tr></table></figure><p>Another place to be careful is with strings. When declaring space for a string, use the following idiom: <code>malloc(strlen(s) + 1)</code>, which gets the length of the string using the function <code>strlen()</code>, and adds 1 to it in order to make room for the end-of-string character. Using <code>sizeof()</code> may lead to trouble here.</p><p><code>malloc()</code> returns a pointer to type <code>void</code>. Doing so is just the way in C to pass back an address and let the programmer decide what to do with it. The programmer further helps out by using what is called a <strong>cast</strong>.</p><h2 id="The-free-Call">The <code>free</code> Call</h2><p>The size of the allocated region is not passed in by the user, and must be tracked by the memory-allocation library itself.</p><h2 id="Common-Errors">Common Errors</h2><p>There are a number of common errors that arise in the use of <code>malloc()</code> and <code>free()</code></p><ul><li><p>Forgetting to allocate memory</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst;</span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure><p><strong>segmentation fault</strong></p><p>Alternatively, you could use <code>strdup()</code> and make your life even easier.</p></li><li><p>Not allocating enough memory</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = (<span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src));</span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure><p>In some cases, the malloc library allocated a little extra space anyhow, and thus your program actually doesn’t scribble on some other variable’s value and works quite fine. Even though it ran correctly once, doesn’t mean it’s correct!</p></li><li><p>Forgetting to initialize allocated memory: your program will eventually encounter an <strong>uninitialized read</strong>, where it reads from the heap some data of unknown value.</p></li><li><p>Forgetting to free memory: <strong>memory leak</strong></p></li><li><p>Freeing memory before you are done with it: <strong>dangling pointer</strong></p></li><li><p>Freeing memory repeatedly: <strong>double free</strong></p></li><li><p>Calling <code>free()</code> incorrectly: <strong>invalid frees</strong> are dangerous.</p></li></ul><h2 id="Useful-Debugging-Tools-for-Memory">Useful Debugging Tools for Memory</h2><ul><li><strong>purify</strong></li><li><strong>valgrind</strong></li></ul><h2 id="Underlying-OS-Support">Underlying OS Support</h2><p><code>malloc()</code> and <code>free()</code> are not system calls, but rather library calls. The malloc library manages space within your virtual address space, but itself is built on top of some system calls which call into the OS to ask for more memory or release some back to the system.</p><p>One such system call is called <code>brk</code>, which is used to change the location of the program’s <strong>break</strong>: the location of the end of the heap. It takes one argument (the address of the new break), and thus either increases or decreases the size of the heap based on whether the new break is larger or smaller than the current break. An additional <code>sbrk</code> is passed an increment but otherwise serves a similar purpose.</p><p>Note that you should never directly call either <code>brk</code> or <code>sbrk</code>!</p><p>Finally, you can also obtain memory from the operating system via the <code>mmap()</code> call. By passing the correct arguments, <code>mmap()</code> can create an <strong>anonymous</strong> memory region within your program ---- a region which is not associated with any particular file but rather with <strong>swap space</strong>. This memory can then also be treated like a heap and managed as such.</p><h2 id="Other-Calls">Other Calls</h2><ul><li><code>calloc()</code> allocates memory and also zeroes it before returning.</li><li><code>realloc()</code> makes a new larger region of memory, copies the old region into it, and returns the pointer to the new region.</li></ul><h2 id="Homework">Homework</h2><ol><li>First, write a simple program called <code>null.c</code> that creates a pointer to an integer, sets it to <code>NULL</code>, and then tries to dereference it. Compile this into an executable called <code>null</code>. What happens when you run this program?<ul><li>segmentation fault</li></ul></li><li>Next, compile this program with symbol information included (with the <code>-g</code> flag). Doing so let’s put more information into the executable, enabling the debugger to access more useful information about variable names and the like. Run the program under the debugger by typing <code>gdb</code> null and then, once <code>gdb</code> is running, typing run. What does <code>gdb</code> show you?<ul><li>Program received signal SIGSEGV, Segmentation fault.<br>0x0000555555554655 in main (argc=1, argv=0x7fffffffea78) at null.c:9<br>9         int x = *p;</li></ul></li><li>Finally, use the <code>valgrind</code> tool on this program. We’ll use the <code>memcheck</code> tool that is a part of <code>valgrind</code> to analyze what happens. Run this by typing in the following: <code>valgrind --leak-check=yes null</code>. What happens when you run this? Can you interpret the output from the tool?<ul><li>Invalid read of size 4. Address 0x0 is not stack’d, malloc’d or (recently) free’d.</li></ul></li><li>Write a simple program that allocates memory using malloc() but forgets to free it before exiting. What happens when this program runs? Can you use <code>gdb</code> to find any problems with it? How about <code>valgrind</code> (again with the --leak-check=yes flag)?<ul><li><code>gdb</code>: exited normally.</li><li><code>valgrind</code>: HEAP SUMMAYR: in use at exit: 4 bytes in 1 blocks. LEAK SUMMARY: definitely lost: 4 bytes in 1 blocks.</li></ul></li><li>Write a program that creates an array of integers called <code>data</code> of size 100 using <code>malloc</code>; then, set <code>data[100]</code> to zero. What happens when you run this program? What happens when you run this program using <code>valgrind</code>? Is the program correct?<ul><li><code>gdb</code>: exited normally.</li><li><code>valgrind</code>: LEAK SUMMARY: definitely lost: 400 bytes in 1 blocks.</li></ul></li><li>Create a program that allocates an array of integers (as above), frees them, and then tries to print the value of one of the elements of the array. Does the program run? What happens when you use <code>valgrind</code> on it?<ul><li><code>gdb</code>: exited normally.</li><li><code>valgrind</code>: Invalid read of size 4 at 0xBLABLABLA</li></ul></li><li>Now pass a funny value to free (e.g., a pointer in the middle of the array you allocated above). What happens? Do you need tools to find this type of problem?<ul><li>Invalid pointer: the program won’t exit normally.</li></ul></li><li>Try out some of the other interfaces to memory allocation. For example, create a simple vector-like data structure and related routines that use <code>realloc()</code> to manage the vector. Use an array to store the vectors elements; when a user adds an entry to the vector, use <code>realloc()</code> to allocate more space for it. How well does such a vector perform? How does it compare to a linked list? Use <code>valgrind</code> to help you find bugs.<ul><li>Much slower: need reallocation every time a new element is added.</li></ul></li><li>Spend more time and read about using <code>gdb</code> and <code>valgrind</code>. Knowing your tools is critical; spend the time and learn how to become an expert debugger in the UNIX and C environment.</li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The Abstraction: Address Spaces</title>
      <link href="/2020/09/11/The-Abstraction-Address-Spaces/"/>
      <url>/2020/09/11/The-Abstraction-Address-Spaces/</url>
      
        <content type="html"><![CDATA[<h1>The Abstraction: Address Spaces</h1><h2 id="Early-Systems">Early Systems</h2><p>From the perspective of memory, early machine didn’t provide much of an abstraction to users. The OS was a set of routines (a library, really) that sat in memory (starting at physical address 0, for example), and there would be one running program (a process) that currently sat in physical memory and used the rest of memory.</p><h2 id="Multiprogramming-and-Time-Sharing">Multiprogramming and Time Sharing</h2><p><strong>multiprogramming</strong>: multiple processes were ready to run at a given time, and the OS would switch between them. Doing so increased the effective <strong>utilization</strong> of the CPU. Such increases in <strong>efficiency</strong> were particularly important in the early days.</p><p>Soon enough, people began demanding more of machines, and the ear of <strong>time sharing</strong> was born. The notion of <strong>interactivity</strong> became important, as many users might be concurrently using a machine, each waiting for a timely response from their currently-executing tasks.</p><p>In particular, allowing multiple programs to reside concurrently in memory makes <strong>protection</strong> an important issue.</p><h2 id="The-Address-Space">The Address Space</h2><p>The OS creates an <strong>easy to use</strong> abstraction of physical memory named <strong>address space</strong> and it is the running program’s view of memory in the system.</p><p>The address space of a process contains all of the memory state of the running program. For example, the <strong>code</strong> of the program (the instructions) have to live in memory somewhere, and thus they are in the address space. The program, while it is running, uses a <strong>stack</strong> to keep track of where it is in the function call chain as well as to allocate local variables and pass parameters and return values to and from routines. Finally, the <strong>heap</strong> is used for dynamically-allocated, user-managed memory, such as that you might receive from a call to <code>malloc()</code> in C or <code>new</code> in an object-oriented language such as C++ or Java.</p><p>However, this placement of stack and heap is just a convention (when multiple <strong>threads</strong> co-exist in an address space, no nice way to divide the address space like this works anymore).</p><p>When we describe the address space, what we are describing is he <strong>abstraction</strong> that the OS is providing to the running program. The program is not in memory at physical addresses 0 through 16KB; rather it is loaded at some arbitrary physical address(es).</p><p><strong>Virtualizing memory</strong> and <strong>virtual address</strong></p><h2 id="Goals">Goals</h2><p><strong>transparency</strong>: the OS should implement virtual memory in a way that is invisible to the running program.</p><p><strong>efficiency</strong>: the OS should strive to make the virtualization as <strong>efficient</strong> as possible, both in time and space.</p><p><strong>protection</strong>: the OS should make sure to <strong>protect</strong> processes from one another as well as the OS itself from processes. Protection thus enables us to deliver the property of <strong>isolation</strong> among processes.</p><p>Ever write a C program that prints out a pointer? The value you see (some large number, often printed in hexadecimal), is a <strong>virtual address</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;location of code : %p\n&quot;</span>, main);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;location of heap : %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">100e6</span>));</span><br><span class="line">  <span class="type">int</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;location of stack :%p\n&quot;</span>, &amp;x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">location of code : 0x1095afe50</span></span><br><span class="line"><span class="comment">location of heap : 0x1096008c0</span></span><br><span class="line"><span class="comment">location of stack: 0x7fff691aea64</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// code comes first, then the heap, </span></span><br><span class="line"><span class="comment">// and the stack is way at the other end of</span></span><br><span class="line"><span class="comment">// this large virtual space.</span></span><br></pre></td></tr></table></figure><h2 id="Homework">Homework</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File:    memory-user.c</span></span><br><span class="line"><span class="comment">// Author:  C, Tang (u201810307@hust.edu.cn)</span></span><br><span class="line"><span class="comment">// Date:    2020/09/11 15:03:54</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;pid: %d\n&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">  <span class="type">int</span> size_MB = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="type">int</span> *a = <span class="built_in">malloc</span>(size_MB &lt;&lt; <span class="number">20</span>);</span><br><span class="line">  <span class="type">size_t</span> arr_size = (size_MB &lt;&lt; <span class="number">20</span>) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">  <span class="type">int</span>* p = a;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr_size; i++, p++) &#123;</span><br><span class="line">      a[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scheduling: Proportional Share</title>
      <link href="/2020/09/10/Scheduling-Proportional-Share/"/>
      <url>/2020/09/10/Scheduling-Proportional-Share/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Operating Systems: Three Easy Pieces</p></blockquote><p>We will examine a different type of scheduler known as a <strong>proportional-share</strong> scheduler, also sometimes referred to as a <strong>fair-share</strong> scheduler.</p><p>An early example of proportional-share scheduling is known as <strong>lottery scheduling</strong>. The crux is how can we design a scheduler to share the CPU in a proportional manner?</p><h2 id="Basic-Concept-Tickets-Represent-Your-Share">Basic Concept: Tickets Represent Your Share</h2><p><strong>tickets</strong>: used to represent the share of a resource that a process (or user) should receive.</p><p>Lottery allocate resources probabilistically (but not deterministically) by holding a lottery every so often (say, every time slice). The scheduler must know how many total tickets there are. The scheduler then picks a winning ticket. One of the most beautiful aspects of lottery scheduling is its use of <strong>randomness</strong>. When you have to make a decision, using such a randomized approach is often a robust and simple way of doing so.</p><ul><li>random often avoids strange corner-case behaviors that a more traditional algorithm may have trouble handling.</li><li>random also is lightweight, requiring little state to track alternatives.</li><li>random can be quite fast</li></ul><h2 id="Ticket-Mechanisms">Ticket Mechanisms</h2><p><strong>ticket currency</strong>: currency allows a user with a set of tickets to allocate tickets among their own jobs in whatever currency they would like; the system then automatically converts said currency into the correct global value.</p><p><strong>ticket transfer</strong>: as process can temporarily hand off its tickets to another process. The ability is especially useful in a client/server setting, where a client process sends a message to a server asking it to do some work on the client’s behalf. To speed the work, the client can pass the tickets to the server and thus try to maximize the performance of the server while the server is handling the client’s request. When finished, the server then transfers the tickets back to the client and all is as before.</p><p><strong>ticket inflation</strong>: With inflation, a process can temporarily raise or lower the number of tickets it owns. Inflation can be applied in an environment where a group of processes trust one another.</p><h2 id="Implementation">Implementation</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter: used to track if we&#x27;ve found the winner yet</span></span><br><span class="line"><span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// winner: use some call to a random number generator to</span></span><br><span class="line"><span class="comment">// get a value, between 0 and the total # of tickets</span></span><br><span class="line"><span class="type">int</span> winner = getrandom(<span class="number">0</span>, totaltickets);</span><br><span class="line"><span class="comment">// current: use this to walk through the list of jobs</span></span><br><span class="line"><span class="type">node_t</span> * current = head;</span><br><span class="line"><span class="keyword">while</span> (current) &#123;</span><br><span class="line">  counter = counter + current -&gt; tickets;</span><br><span class="line">  <span class="keyword">if</span> (counter &gt; winner)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  current = current -&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To make this process most efficient, it might generally be best to organize the list in sorted order, from the highest number of tickets to the lowest. The ordering does not affect the correctness of the algorithm; however, it does ensure in general that the fewest number of list iterations are taken, especially if there are a few processes that possess most of the tickets.</p><h2 id="Example">Example</h2><p><strong>fairness metric</strong>: the time the first job completes divided by the time that the second job completes.</p><h2 id="How-to-Assign-Tickets">How to Assign Tickets</h2><p>One approach is to assume that the users know best; in such a case, each user is handed some number of tickets, and a user can allocate tickets to any jobs they run as desired. However, this solution is a non-solution: it really does not tell you what to do.</p><h2 id="Stride-Scheduling">Stride Scheduling</h2><p>Why use randomness at all? It occasionally will not deliver the exact right proportions, especially over short time scales. For this reason, Waldspurger invented <strong>stride scheduling</strong>, a deterministic fair-share scheduler.</p><p>Stride scheduling is also straightforward. Each job in the system has a stride, which is inverse in proportion to the number of tickets it has. The strides can be calculated by dividing a large number by the number of tickets each process has been assigned. Every time a process runs, we will increment a counter for it (called its <strong>pass</strong> value) by its stride to track its global progress.</p><p>The scheduler then uses the stride and pass to determine which process should run next. The basic idea is simple: at any given time, pick the process to run that has the lowest pass value so far; when you run a process, increment its pass counter by its stride.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curr = remove_min(<span class="built_in">queue</span>); <span class="comment">// pick clinet with min pass</span></span><br><span class="line">schedule(curr); <span class="comment">// run for quantum</span></span><br><span class="line">curr -&gt; pass = curr -&gt; stride; <span class="comment">// update pass using stride</span></span><br><span class="line">insert(<span class="built_in">queue</span>, curr); <span class="comment">// return curr to queue</span></span><br></pre></td></tr></table></figure><p>Why use the lottery scheduling at all? No global state! Imagine a new job enters in the middle of our stride scheduling example; what should its pass value be?</p><h2 id="The-Linux-Completely-Fair-Scheduler-CFS">The Linux Completely Fair Scheduler (CFS)</h2><p>The <strong>Completely Fair Scheduler (CFS)</strong> implements fair-share scheduling, but does so in a highly efficient and scalable manner.</p><p>To achieve its efficiency goals, CFS aims to spend very little time making scheduling decisions, through both its inherent design and its clever use of data structures well-suited to the task. Recent studies have shown that scheduler efficiency is surprisingly important. A study shows that even after aggressive optimization, scheduling uses about 5% of overall datacenter CPU time. Reducing that overhead as much as possible is thus a key goal in modern scheduler architecture.</p><h3 id="Basic-Operation">Basic Operation</h3><p>Whereas most schedulers are based around the concept of a fixed time slice, CFS operates a bit differently. Its goal is simple: to fairly divide a CPU evenly among all competing processes. It does so through a simple counting-based technique known as <strong>virtual runtime (vruntime)</strong>.</p><p>As each process runs, it accumulates vruntime. In the most basic case, each process’s vruntime increases at the same rate, in proportion with physical (real) time. When a scheduling decision occurs, CFS will pick the process with the lowest vruntime to run next.</p><p>How does the scheduler know when to stop the currently running process, and run the next one? The tension here is clear: if CFS switches too often, fairness is increased, as CFS will ensure that each process receives its share of CPU even over miniscule time windows, but at the cost of performance is increased (reduced context switching), but at the cost of near-term fairness.</p><p>CFS manages this tension through various control parameters: <strong>sched_latency</strong>: CFS uses this value to determine how long one process shoudl run before considering a switch (effectively determining its time slice but in a dynamic fashion). A typical sched_latency value is 46 (miliseconds); CFS divides this value by the number (n) of processes running on the CPU to determine the time slice for a process, and thus ensures that over this period of time, CFS will be completely fair.</p><p>But what if there are “too many” processes running? Wouldn’t that lead to too small of a time slice, and thus too many context switches? The answer is yes.</p><p>To address this issue, CFS adds another parameter, <strong>min_granularity</strong>, which is usually set to a value like 6ms. CFS will never set the time slice of a process to less than this value, ensuring that not too much time is spent in scheduling overhead.</p><p>Note that CFS utilizes a periodic timer interrupt, which means it can only make decisions at fixed time intervals. This interrupt goes off frequently (e.g., every 1 ms), giving CFS a chance to wake up and determine if the current job has reached the end of its run. If a job has a time slice that is not a perfect multiple of the timer interrupt interval, that is OK; CFS tracks vruntime precisely, which means that over the long haul, it will eventually approximate ideal sharing of the CPU.</p><h3 id="Weighting-Niceness">Weighting (Niceness)</h3><p>CFS also enables control over process priority, enabling users or administrators to give some processes a higher share of the CPU. It does this not with tickets, but through a classic UNIX mechanism known as the <strong>nice</strong> level (-20 to +19, lowest) of a process.</p><blockquote><p>When you are too nice, you just don’t get as much (scheduling) attention, alas.</p></blockquote><p>CFS maps the nice value of each process to a <code>weight</code>, as shown here:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> prio_to_weight[<span class="number">40</span>] = &#123;</span><br><span class="line">    <span class="comment">/* -20 */</span> <span class="number">88761</span>, <span class="number">71755</span>, <span class="number">56483</span>, <span class="number">46273</span>, <span class="number">36291</span>,</span><br><span class="line">    <span class="comment">/* -15 */</span> <span class="number">29154</span>, <span class="number">23254</span>, <span class="number">18705</span>, <span class="number">14949</span>, <span class="number">11916</span>,</span><br><span class="line">    <span class="comment">/* -10 */</span> <span class="number">9548</span>, <span class="number">7620</span>, <span class="number">6100</span>, <span class="number">4904</span>, <span class="number">3906</span>,</span><br><span class="line">    <span class="comment">/* -5 */</span> <span class="number">3121</span>, <span class="number">2501</span>, <span class="number">1991</span>, <span class="number">1586</span>, <span class="number">1277</span>,</span><br><span class="line">    <span class="comment">/* 0 */</span> <span class="number">1024</span>, <span class="number">820</span>, <span class="number">655</span>, <span class="number">526</span>, <span class="number">423</span>,</span><br><span class="line">    <span class="comment">/* 5 */</span> <span class="number">335</span>, <span class="number">272</span>, <span class="number">215</span>, <span class="number">172</span>, <span class="number">137</span>,</span><br><span class="line">    <span class="comment">/* 10 */</span> <span class="number">110</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">45</span>,</span><br><span class="line">    <span class="comment">/* 15 */</span> <span class="number">36</span>, <span class="number">29</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">15</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>These weights allow us to compute the effective time slice of each process, but now accounting for their priority differences.</p><h3 id="Using-Red-Black-Trees">Using Red-Black Trees</h3><p>Keep process in a <strong>red-black tree</strong>.</p><p>CFS does not keep all process in this structure; rather, only running (or runnable) processes are kept therein. If a process goes to sleep, it is removed from the tree and kept track of elsewhere.</p><h3 id="Dealing-With-I-O-And-Sleeping-Processes">Dealing With I/O And Sleeping Processes</h3><p>When a process wake up from an I/O, its vruntime will be much shorter than continuous jobs, causing monopoly of the CPU. CFS handles this case by altering the vruntime of a job when it wakes up. Specifically, CFS sets the vruntime of that job to the minimum value found in the tree. In this way, CFS avoids starvation but not without a cost: jobs that sleep for short periods of time frequently do not get their fair share of the CPU.</p><h2 id="Homework">Homework</h2><ol><li>Compute the solutions for simulations with 3 jobs and random seeds of 1, 2, and 3.<ul><li>2 0 1 2 2 2 1 1 1 1 1 1; 2 0 0 2 0 1 0 2 0 0 0 1 0 0 1 2 1 1 1 2 1 1 2; 1 1 0 1 0 2 2 2 2 2 2</li></ul></li><li>Now run with two specific jobs: each of length 10, but one (job 0) with just 1 ticket and the other (job 1) with 100 (e.g., -l 10:1,10:100). What happens when the number of tickets is so imbalanced? Will job 0 ever run before job 1 completes? How often? In general, what does such a ticket imbalance do to the behavior of lottery scheduling?<ul><li>Job 0 will have almost no opportunity to run when job 1 exists. It is still possible for job 0 to run before job 1. Prob: 0.1. Job 1 will run with priority.</li></ul></li><li>When running with two jobs of length 100 and equal ticket allocations of 100 (-l 100:100,100:100), how unfair is the scheduler? Run with some different random seeds to determine the (probabilistic) answer; let unfairness be determined by how much earlier one job finishes than the other.<ul><li>Expected time difference: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mfrac><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mn>99</mn></msubsup><mo stretchy="false">(</mo><mn>100</mn><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><msubsup><mi>C</mi><mrow><mn>99</mn><mo>+</mo><mi>i</mi></mrow><mi>i</mi></msubsup></mrow><msubsup><mi>C</mi><mn>200</mn><mn>100</mn></msubsup></mfrac><mo>=</mo><mn>1.98</mn></mrow><annotation encoding="application/x-tex">2\frac{\sum_{i=0}^{99}(100-i)C_{99+i}^i}{C_{200}^{100}} = 1.98</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.775em;vertical-align:-0.5916em;"></span><span class="mord">2</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1833em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0715em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">200</span></span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">100</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5519em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">99</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3214em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight">100</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9021em;"><span style="top:-2.214em;margin-left:-0.0715em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">99</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3455em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.98</span></span></span></span></li></ul></li><li>How does your answer to the previous question change as the quantum size (-q) gets larger?<ul><li>Unfairness should become lower.</li></ul></li><li>Can you make a version of the graph that is found in the chapter? What else would be worth exploring? How would the graph look with a stride scheduler?<ul><li>Seems that I have come up with an equation. However, I am not able to solve it.</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scheduling: The Multi-Level Feedback Queue</title>
      <link href="/2020/09/10/Scheduling-The-Multi-Level-Feedback-Queue/"/>
      <url>/2020/09/10/Scheduling-The-Multi-Level-Feedback-Queue/</url>
      
        <content type="html"><![CDATA[<h1>Scheduling: Introduction</h1><h2 id="Workload-Assumptions">Workload Assumptions</h2><p>A number of simplifying simplifying assumptions about the process running in the system, sometimes collectively called the <strong>workload</strong>. We will make the following assumptions about the processes, sometimes called <strong>jobs</strong>, that are running in the system:</p><ol><li>Each job runs for the same amount of time.</li><li>All jobs arrive at the same time.</li><li>Once started, each job runs to completion.</li><li>All jobs only use the CPU.</li><li>The run-time of each job is known.</li></ol><h2 id="Scheduling-Metrics">Scheduling Metrics</h2><p><strong>Turnaround time</strong>: the time at which the job completes minus the time at which the job arrived in the system.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mrow><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{turnaround} = T_{completion} - T_{arrival}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">na</span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">pl</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">rr</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>Turnaround time is a <strong>performance</strong> metric, which will be the primary focus.</p><p><strong>Fairness</strong>: E.g.: <strong>Jain’s Fairness Index</strong></p><p>Performance and fairness are often at odds in scheduling</p><h2 id="First-In-First-Out-FIFO">First In, First Out (FIFO)</h2><p><strong>Convoy effect</strong>: A number of relatively-short potential consumers of a resource get queued behind a heavy weight resource consumer.</p><h2 id="Shortest-Job-First-SJF">Shortest Job First (SJF)</h2><p>Another convoy effect: light jobs arrive just a short time after the heavy job.</p><h2 id="Shortest-Time-to-Completion-First-STCF">Shortest Time-to-Completion First (STCF)</h2><p>SJF by our definition is a <strong>non-preemptive</strong> scheduler. Add preemption to SJF, known as the <strong>shortest time-to-completion first</strong> or <strong>preemptive shortest job first (PSJF)</strong> scheduler.</p><h2 id="A-New-Metric-Response-Time">A New Metric: Response Time</h2><p>The introduction of time-shared machines changed all that. Now users would sit at a terminal and demand interactive performance from the system as well. A new metric was born: <strong>response time</strong>.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>e</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mrow><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>n</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{response} = T_{firstrun} - T_{arrival}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">res</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">se</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">rs</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">rr</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="Round-Robin-轮询调度-RR">Round Robin (轮询调度, RR)</h2><p>Instead of running jobs to completion, RR runs a job for a <strong>time slice</strong> (<strong>scheduling quantum</strong>). RR is sometimes called <strong>time-slicing</strong>.</p><p><strong>Amortization can reduce costs</strong>. Thus, deciding on the length of the time slice presents a trade-off to a system designer, making it long enough to <strong>amortize</strong> the cost of switching without making it so long that the system is no longer responsive.</p><p>Note that the cost of context switching does not arise solely from the OS actions of saving and restoring a few registers. When programs run, they build up a great deal of state in CPU caches, TLBs (Translation Lookaside Buffer, 转译后备缓冲区，CPU的一种缓存，由存储器管理单元用于改进虚拟地址到物理地址的转译速度), branch predictors, and other on-chip hardware. Switching to another job causes this state to be flushed and new state relevant to the currently-running job to be brought in, which may exact a noticeable performance cost.</p><p>The RR is indeed one of the worst policies if turnaround time is our metric. Because turnaround time only cares about when jobs finish, RR is nearly pessimal, even worse than simple FIFO in many cases.</p><p>More generally, any policy (such as RR) that is <strong>fair</strong>, i.e., that evenly divides the CPU among active processes on a small time scale, will perform poorly on metrics such as turnaround time. Indeed, this is an inherent trade-off.</p><p><strong>Overlap enables higher utilization</strong></p><h2 id="Incorporating-I-O">Incorporating I/O</h2><p>A scheduler clearly has a decision to make when a job initiates an I/O request, because the currently-running job won’t be using the CPU during the I/O; it is <strong>blocked</strong> waiting for I/O completion. The scheduler also has to make a decision when the I/O completes. When that occurs, an interrupt is raised, and the OS runs and moves the process that issued the I/O from blocked back to the ready state or even decide to run the job at that point.</p><p>By treating each CPU burst as a job, the scheduler makes sure processes that are “interactive” get run frequently. While those interactive jobs are performing I/O, other CPU-intensive jobs run, thus better utilizing the processor.</p><h2 id="No-More-Oracle">No More Oracle</h2><p>The OS usually knows very little about the length of each job. Thus, how can we build an approach that behaves like SJF/STCF without such a priori knowledge? Further, how can we incorporate some of the ideas we have seen with the RR scheduler so that response time is also quite good?</p><h2 id="Homework">Homework</h2><ol><li>Compute the response time and turnaround time when running three jobs of length 200 with the SJF and FIFO schedulers.<ul><li>SJF: response: 200, turnaround: 400, FIFO: response: 200, turnaround: 400</li></ul></li><li>Now do the same but with jobs of different lengths: 100, 200, and 300.<ul><li>SJF: response: 133, turnaround: 333, FIFO: response:  133, turnaround: 333</li></ul></li><li>Now do the same, but also with the RR scheduler and a time-slice of 1.<ul><li>response: 1, turnaround: 467</li></ul></li><li>For what types of workloads does SJF deliver the same turnaround times as FIFO?<ul><li>The jobs are sorted by the time required in ascending order.</li></ul></li><li>For what types of workloads and quantum lengths does SJF deliver the same response times as RR?<ul><li>The length of a job is the same as a time interval.</li></ul></li><li>What happens to response time with SJF as job lengths increase? Can you use the simulator to demonstrate the trend?<ul><li>The response time increases the same as the the increase of the shortest time consumed.</li></ul></li><li>What happens to response time with RR as quantum lengths increase? Can you write an equation that gives the worst-case response time, given N jobs?<ul><li>The response time increases as quantum lengths increase. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi mathvariant="normal">Δ</mi><mi>T</mi></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mfrac><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\overline{\Delta T} = \frac{N-1}{2}\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mechanism: Limited Direct Execution</title>
      <link href="/2020/09/08/Mechanism-Limited-Direct-Execution/"/>
      <url>/2020/09/08/Mechanism-Limited-Direct-Execution/</url>
      
        <content type="html"><![CDATA[<h1>Mechanism: Limited Direct Execution</h1><p>A few challenges:</p><ul><li>Performance</li><li>Control</li></ul><h2 id="Basic-Technique-Limited-Direct-Execution">Basic Technique: Limited Direct Execution</h2><ol><li><strong>OS</strong>:<ol><li>Create entry for process list.</li><li>Allocate memory for program.</li><li>Load program into memory.</li><li>Set up stack with argc/argv.</li><li>Clear registers. Execute <strong>call</strong> <code>main()</code>.</li></ol></li><li><strong>Program</strong>:<ol><li>Run <code>main()</code>.</li><li>Execute <strong>return</strong> from main.</li></ol></li><li><strong>OS</strong>:<ol><li>Free memory of process.</li><li>Remove from process list.</li></ol></li></ol><h2 id="Problem-1-Restricted-Operations">Problem #1: Restricted Operations</h2><p>What if the process wishes to perform some kind of restricted operation, such as issuing an I/O request to a disk, or gaining access to more system resources such as CPU or memory?</p><p>The approach we take is to introduce a new processor mode, known as the <strong>user mode</strong>; code that runs in user mode is restricted in what it can do. For example, when running  in user mode, a process can’t issue I/O requests; doing so would result in the processor raising an exception; the OS would then likely kill the process.</p><p>In contrast to user mode is <strong>kernel mode</strong>, which the operating system (or kernel) runs in. In this mode, code that runs can do what it likes, including privileged operations such as issuing I/O requests and executing all types of restricted instructions.</p><p>To enable a user process to perform some kind of privileged operation, virtually all modern hardware provides the ability for user programs to perform a <strong>system call</strong>.</p><blockquote><p>USE PROTECTED CONTROL TRANSFER:</p><p>The hardware assists the OS by providing different modes of execution. In user mode, applications do not have full access to hardware resources. In kernel mode, the OS has access to the full resources of the machine. Special instructions to <strong>trap</strong> into the kernel and <strong>return-from-trap</strong> back to user-mode programs are also provided, as well as instructions that allow the OS to tell the hardware where the <strong>trap table</strong> resides in memory.</p><p>中断(interrupt)也称陷阱(Trap)。Trap Table 也就是中断向量表。</p></blockquote><p>To execute a system call, a program must executer a special <strong>trap</strong> instruction. This instruction simultaneously jumps into the kernel and raises the privilege level to kernel mode. Once in the kernel, the system can now perform whatever privileged operations are needed (if allowed), and thus do the required work for the calling process. When finished, the OS calls a special <strong>return-from-trap</strong> instruction, which returns into the calling user program while simultaneously reducing the privilege level back to user mode.</p><p>The hardware needs to be a bit careful when executing a trap, in that it must make sure to save enough of the caller’s registers in order to be able to return correctly when the OS issues the return-from-trap instruction. An x86 the processor will push the program counter, flags, and a few other registers onto a per-process <strong>kernel stack</strong>; the return-from-trap will pop these values off the stack and resume execution of the user mode program.</p><ol><li><strong>OS at boot (kernel mode)</strong> : Initialize trap table</li><li><strong>Hardware</strong>: remember address of syscall handler</li><li><strong>OS at run (kernel mode)</strong>:<ol><li>Create entry for process list</li><li>Allocate memory for program</li><li>Load program into memory</li><li>Setup user stack with argv</li><li>Fill kernel stack with reg/PC</li><li><strong>return-from-trap</strong></li></ol></li><li><strong>Hardware</strong>:<ol><li>Restore regs (from kernel stack)</li><li>Remove to user mode</li><li>Jump to main</li></ol></li><li><strong>Program (user mode)</strong>:<ol><li>Run <code>main()</code></li><li>…</li><li>Call system call</li><li><strong>Trap</strong> into OS</li></ol></li><li><strong>Hardware</strong>:<ol><li>save regs (to kernel stack)</li><li>move to kernel mode</li><li>jump to trap handler</li></ol></li><li><strong>OS</strong>:<ol><li>Handle trap (Do work of syscall)</li><li><strong>return-from-trap</strong></li></ol></li><li><strong>Hardware</strong>:<ol><li>Restore regs (from kernel stack)</li><li>Move to user mode</li><li>Jump to PC after trap</li></ol></li><li><strong>Program (user mode)</strong>:<ol><li>…</li><li>Return from main</li><li><strong>trap</strong> (via <code>exit()</code>)</li></ol></li><li><strong>OS</strong>:<ol><li>Free memory of process</li><li>Remove from process list</li></ol></li></ol><h2 id="Problem-2-Switching-Between-Processes">Problem #2: Switching Between Processes</h2><p>Specifically, if a process is running on the CPU, this by definition means the OS is not running. If the OS is not running, how can it do anything at all? In other words: How to regain control of the CPU?</p><h3 id="A-Cooperative-Approach-Wait-For-System-Calls">A Cooperative Approach: Wait For System Calls</h3><p>In this style, the OS trusts the processes of the system to behave reasonably. Processes that run for too long are assumed to periodically give up the CPU so that the OS can decide to run some other task. Most processes, as it turns out, transfer control of the CPU to the OS quite frequently by making <strong>system calls</strong>, for example, to open a file and subsequently read it, or to send a message to another machine, or to create a new process. Systems like this often include an explicit <strong>yield</strong> system call, which does nothing except to transfer control to the OS so it can run other processes.</p><p>Application also transfer control to the OS when they do something illegal. For example, if an application divides by zero, or tries to access memory that it shouldn’t be able to access, it will generate a trap to the OS. The OS will then have control of the CPU again (and likely terminate the offending process).</p><h3 id="A-Non-Cooperative-Approach-The-OS-Takes-Control">A Non-Cooperative Approach: The OS Takes Control</h3><p>Without some additional help from the hardware, it turns out the OS can’t do much at all when a process refuses to make system calls (or mistakes) and thus return control to the OS. In fact, in the cooperative approach, your only recourse when a process gets stuck in an infinite loop is to resort to the age-old solution to all problems in computer systems: <strong>reboot the machine</strong>. Thus, we again arrive at a subproblem of our general quest to gain control of the CPU.</p><p>Solution: <strong>A timer interrupt</strong>. A timer device can be programmed to raise an interrupt every so many milliseconds. When the interrupt is raised, the currently running process is halted, and a pre-configured <strong>interrupt handler</strong> in the OS runs. At this point, the OS has regained control of the CPU, and thus can do what it pleases: stop the current process, and start a different one.</p><p>Note that the hardware has some responsibility when an interrupt occurs, in particular to save enough of the state of the program that was running when the interrupt occurred such that a subsequent return-from-trap instruction will be able to resume the running program correctly. This set of actions is quite similar to the behavior of the hardware during an explicit system-call trap into the kernel, with various registers thus getting saved (e.g., onto a kernel stack) and thus easily restored by the return-from-trap instruction.</p><h3 id="Saving-and-Restoring-Context">Saving and Restoring Context</h3><p>The decision of whether to continue running the currently-running process, or to a different one is made by a part of the operating system known as the <strong>scheduler</strong>.</p><p>If the decision is made to switch, the OS then executes a low-level piece of code which we refer to as a <strong>context switch</strong>.</p><p>Note that there are 2 types of register saves/restores that happen during this protocol. The first is when the timer interrupt occurs; in this case, the user registers of the running process are implicitly saved by the hardware, using the kernel stack of that process. The second is when the OS decides to switch from A to B; in this case, the kernel registers are explicitly saved by the software (i.e., the OS), but this time into memory in the process structure of the process. The latter action moves the system from running as if it just trapped into the kernel from A to as if it just trapped into the kernel from B.</p><p>The following list shows the context switch code for vx6. The <code>context</code> structures <code>old</code> and <code>new</code> are found in the old and new process’s process structures, respectively.</p><ol><li><strong>OS at boot (kernel mode)</strong>: Initialize trap table</li><li><strong>Hardware</strong>: Remember addresses of syscall handler and timer handler</li><li><strong>OS at boot (kernel mode)</strong>: Start interrupt timer</li><li><strong>Hardware</strong>:<ol><li>Start timer</li><li>Interrupt CPU in Xms</li><li><strong>timer interrupt!</strong></li><li>save regs(A) to k-stack(A)</li><li>move to kernel mode</li><li>jump to trap handler</li></ol></li><li><strong>OS (kernel mode)</strong>:<ol><li>Handle the trap</li><li>Call <code>switch()</code> routine: save regs(A) to proc_t(A), restore regs(B) from proc_t(B), switch to k-stack(B)</li><li><strong>return-from-trap</strong></li></ol></li><li><strong>Hardware</strong>:<ol><li>Restore regs(B) from k-stack(B)</li><li>Move to user mode</li><li>Jump to B’s PC</li></ol></li></ol><h2 id="Worried-About-Concurrency">Worried About Concurrency?</h2><p>Questions:</p><ol><li>What happens when , during a system call, a timer interrupt occurs?</li><li>What happens when you are handling one interrupt and another one happens?</li></ol><p>These questions will be handled in <strong>concurrency</strong>.</p><p>One simple thing an OS might do is <strong>disable interrupts</strong> during interrupt processing; doing so ensures that when one interrupt is being handled, no other one will be delivered to the CPU.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># void swtch(struct context **old, struct context *new);</span><br><span class="line">#</span><br><span class="line"># Save current reister context in old</span><br><span class="line"># and then load register context from new.</span><br><span class="line">.globl swtch</span><br><span class="line">swtch:</span><br><span class="line">  # Save old registers</span><br><span class="line">  movl 4(%esp), %eax # put old ptr into eax</span><br><span class="line">  popl 0(%eax) # save the old IP</span><br><span class="line">  movl %esp, 4(%eax) # and stack</span><br><span class="line">  movl %ebx, 8(%eax) # and other registers</span><br><span class="line">  movl %ecx, 12(%eax)</span><br><span class="line">  movl %edx, 16(%eax)</span><br><span class="line">  movl %esi, 20(%eax)</span><br><span class="line">  movl %edi, 24(%eax)</span><br><span class="line">  movl %ebp, 28(%eax)</span><br><span class="line">  </span><br><span class="line">  # Load new registers</span><br><span class="line">  movl 4(%esp), %eax # put new ptr into eax</span><br><span class="line">  movl 28(%eax), %ebp # restore other reigsters</span><br><span class="line">  movl 24(%eax), %edi</span><br><span class="line">  movl 20(%eax), %esi</span><br><span class="line">  movl 16(%eax), %edx</span><br><span class="line">  movl 12(%eax), %ecx</span><br><span class="line">  movl 8(%eax), %ebx</span><br><span class="line">  movl 4(%eax), %esp # stack is switched here</span><br><span class="line">  pushl 0(%eax) # return addr put in place</span><br><span class="line">  ret # finally return into new ctxt</span><br></pre></td></tr></table></figure><p>Operating systems also have developed a number of sophisticated <strong>locking</strong> schemes to protect concurrent access to internal data structures.</p><h2 id="Homework-Measurement">Homework: Measurement</h2><ul><li>The use of <code>rdtsc</code> and mix of C and assembly language</li><li>The use of <code>sched_setaffinity()</code></li><li>Measuring the cost of context switch by calling <code>write</code> and <code>read</code> from 2 different processes.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File:    homework_measurement.c</span></span><br><span class="line"><span class="comment">// Author:  C, Tang (u201810307@hust.edu.cn)</span></span><br><span class="line"><span class="comment">// Date:    2020/09/06 01:11:15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ITER_NUM = <span class="number">1000000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> SCALE = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">currentcycles</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">currentcycles</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// inline function : the inline function will replace all</span></span><br><span class="line"><span class="comment">//                   calls in the assembly language</span></span><br><span class="line">  <span class="type">uint32_t</span> result;</span><br><span class="line">  __asm__ __volatile__ (<span class="string">&quot;rdtsc&quot;</span> : <span class="string">&quot;=A&quot;</span> (result));</span><br><span class="line"> <span class="comment">// __asm__ : start of asm</span></span><br><span class="line"> <span class="comment">// __volatile__ : tell the compiler not to modify my code</span></span><br><span class="line"> <span class="comment">// &quot;rdtsc&quot; : Instruction list. rdtsc gets CPU clock. Stores</span></span><br><span class="line"> <span class="comment">//           lower 32 bits TSC value into eax and higher 32</span></span><br><span class="line"> <span class="comment">//           bits TSC value into edx.</span></span><br><span class="line"> <span class="comment">// &quot;=A&quot; (result) : output operand. &quot;=&quot; means a write-only expression</span></span><br><span class="line"> <span class="comment">//                 &quot;A&quot; (or &quot;a&quot;) is the abbreviation of eax/ex/al.</span></span><br><span class="line"> <span class="comment">//                 (result) is the output C variable.</span></span><br><span class="line"> <span class="comment">// Several output operands could be written: E.g.</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> __asm__(</span></span><br><span class="line"><span class="comment">   &quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line"><span class="comment">   &quot;pushl %%ebx \n\t&quot;</span></span><br><span class="line"><span class="comment">   &quot;popl %1, %2 \n\t&quot;</span></span><br><span class="line"><span class="comment">   &quot;movl %1, %2&quot;</span></span><br><span class="line"><span class="comment">   : &quot;+a&quot;(cr0), &quot;=b&quot;(cr1), &quot;=c&quot;(cr2)</span></span><br><span class="line"><span class="comment"> );</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// here is another example for input operands:</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">int main(int __argc, char* __argv[]) &#123;</span></span><br><span class="line"><span class="comment">  int cr0 = 5;</span></span><br><span class="line"><span class="comment">  __asm__ __volatile__(&quot;movl %0, %%cr0&quot;::&quot;a&quot;(cr0));</span></span><br><span class="line"><span class="comment">  return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// with the compiling code: gcc -S example.c</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argv, <span class="type">char</span>* argc[])</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf;</span><br><span class="line">  <span class="type">uint32_t</span> start, end, frequency;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Measuring the CPU frequency</span></span><br><span class="line">  start = currentcycles();</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  end = currentcycles();</span><br><span class="line">  frequency = end - start;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;cpu MHZ\t:%11f\n&quot;</span>, (<span class="type">double</span>) frequency / <span class="number">1e6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Measuring the cost of a system call</span></span><br><span class="line">  start = currentcycles();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ITER_NUM; i++) &#123;</span><br><span class="line">    read(STDIN_FILENO, &amp;buf, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = currentcycles();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;system call (read 0 byte %d times) total time: %f us, average: %f us\n&quot;</span>, \ </span><br><span class="line">         ITER_NUM, (<span class="type">double</span>) (end-start) / (frequency/<span class="number">1e6</span>), \ </span><br><span class="line">         (<span class="type">double</span>) (end-start) / (frequency/<span class="number">1e6</span>) / ITER_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Measuring the context switch</span></span><br><span class="line">  <span class="type">int</span> pipefd_1[<span class="number">2</span>], pipefd_2[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> (pipe(pipefd_1) &lt; <span class="number">0</span> or pipe(pipefd_2) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;pipe error!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">pid_t</span> cpid = fork();</span><br><span class="line">  <span class="type">cpu_set_t</span> <span class="built_in">set</span>;</span><br><span class="line">  CPU_ZERO(&amp;<span class="built_in">set</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (cpid) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">      perror(<span class="string">&quot;fork failed!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      CPU_SET(<span class="number">0</span>, &amp;<span class="built_in">set</span>);</span><br><span class="line">      <span class="keyword">switch</span>(sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(<span class="built_in">set</span>), &amp;<span class="built_in">set</span>)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">          perror(<span class="string">&quot;sched_setaffinity failed\n&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ITER_NUM; i++) &#123;</span><br><span class="line">            read(pipefd_1[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            write(pipefd_2[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      CPU_SET(<span class="number">0</span>, &amp;<span class="built_in">set</span>);</span><br><span class="line">      <span class="keyword">switch</span>(sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(<span class="built_in">set</span>), &amp;<span class="built_in">set</span>)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">          perror(<span class="string">&quot;sched_setaffinity failed\n&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          start = currentcycles();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ITER_NUM; i++) &#123;</span><br><span class="line">            write(pipefd_1[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            read(pipefd_2[<span class="number">0</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          end = currentcycles();</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;context switch (read &amp; write 0 byte %d times) total time: %f us, average: %f us\n&quot;</span>, \ </span><br><span class="line">                 ITER_NUM, (<span class="type">double</span>) (end-start) / (frequency/<span class="number">1e6</span>), \</span><br><span class="line">                 (<span class="type">double</span>) (end-start) / (frequency/<span class="number">1e6</span>) / ITER_NUM);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Operating Systems: Process API</title>
      <link href="/2020/08/18/Operating-Systems-Process-API/"/>
      <url>/2020/08/18/Operating-Systems-Process-API/</url>
      
        <content type="html"><![CDATA[<h1>Interlude: Process API</h1><h2 id="The-fork-System-Call">The <code>fork</code> System Call</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argvp[])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world (pid:%d)\n&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">  <span class="type">int</span> rc = fork();</span><br><span class="line">  <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// fork failed</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// child (new process)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, I am child (pid:%d)&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// parent goes down this path (main)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, I am parent of %d (pid:%d)\n&quot;</span>, </span><br><span class="line">           rc, (<span class="type">int</span>) getpid());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The interesting part begins. The process calls the <code>fork()</code> system call, which the OS provides as a way to create a new process. The odd part: the process that is created is an (almost) exact copy of the calling process. That means that to the OS, it now looks like there are two copies of the program running, and both are about to return from the <code>fork()</code> system call. The newly-created process (called the <strong>child</strong>, in contrast to the creating <strong>parent</strong>) doesn’t start running at <code>main()</code>; rather, it just comes into life as if it had called <code>fork()</code> itself.</p><p>The child isn’t an exact copy. Specifically, although it now has its own copy of the address space (i.e., its own private memory), its own registers, its own PC, and so forth, the value it returns to the caller of <code>fork()</code> is different. . Specifically, while the parent receives the PID of the newly-created child, the child receives a return code of zero.</p><p>The output is not <strong>deterministic</strong>. Assuming we are running on a system with a single CPU (for simplicity), then either the child or the parent might run at that point. The parent or the child can print message first.</p><blockquote><p>However, in my experiment, the parent always print first.</p></blockquote><p>The CPU <strong>scheduler</strong> determines which process runs at a given moment in time; because the scheduler is complex, we cannot usually make strong assumptions about what it will choose to do, and hence which process will run first. This <strong>non-determinism</strong> , as it turns out, leads to some interesting problems, particularly in <strong>multi-threaded programs</strong>; hence, we’ll see a lot more non-determinism when we study <strong>concurrency</strong>.</p><h2 id="The-wait-System-Call">The <code>wait()</code> System Call</h2><p>Sometimes, as it turns out, it is quite useful for a parent to wait for a child process to finish what it has been doing. This task is accomplished with the <code>wait()</code> system call (or its more complete sibling <code>waitpid()</code>).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world (pid:%d)\n&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">  <span class="type">int</span> rc = fork();</span><br><span class="line">  <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="comment">// fork failed; exit</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="comment">// child (new process)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, I am child (pid:%d)\n&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// parent goes down this path (main)</span></span><br><span class="line">    <span class="type">int</span> rc_wait = wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, I am parent of %d (rc_wait:%d) (pid:%d)\n&quot;</span>,</span><br><span class="line">            rc, rc_wait, (<span class="type">int</span>) getpid());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The child might simply run first and print before the parent. However, if the parent does happen to run first, it will immediately call <code>wait()</code>; this system call won’t return until the child has run and exited.</p><h2 id="The-exec-System-Call">The <code>exec()</code> System Call</h2><p>The <code>exec()</code> is useful when you want to run a program that is different from the calling program.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world (pid:%d)\n&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">  <span class="type">int</span> rc = fork();</span><br><span class="line">  <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// fork failed</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, I am child (pid:%d)\n&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">    <span class="type">char</span>* myargs[<span class="number">3</span>];</span><br><span class="line">    myargs[<span class="number">0</span>] = strdup(<span class="string">&quot;wc&quot;</span>); <span class="comment">// copy string to the given address</span></span><br><span class="line">    <span class="comment">// program &quot;wc&quot; (word count)</span></span><br><span class="line">    myargs[<span class="number">1</span>] = strdup(<span class="string">&quot;p3.c&quot;</span>); <span class="comment">// argument: file to count</span></span><br><span class="line">    myargs[<span class="number">2</span>] = <span class="literal">NULL</span>; <span class="comment">// marks end of array</span></span><br><span class="line">    execvp(myargs[<span class="number">0</span>], myargs); <span class="comment">// run word count</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;this shouldn&#x27;t print out&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc_wait = wait(<span class="literal">NULL</span>);</span><br><span class="line">    print(<span class="string">&quot;hello, I am the parent of %d (rc_wait:%d) (pid:%d)\n&quot;</span></span><br><span class="line">          rc, rc_wait, (<span class="type">int</span>) getpid());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>fork()</code> system call is strange; its partner in crime, <code>exec()</code>, is not so normal either. What it does: given the name of an executable (e.g., <code>wc</code>), and some arguments (e.g., <code>p3.c</code>), it <strong>loads</strong> code (and static data) from that executable and overwrites its current code segment (and current static data with it); the heap and stack and other parts of the memory space of the program are re-initialized. Then the OS simply runs that program, passing in any arguments, as the <code>argv</code> of that process. Thus, it does not create a new process; rather, it transforms the currently running program into a different running program (<code>wc</code>). After the <code>exec()</code> in the child, it is almost as if <code>p3.c</code> never ran; a successful call to <code>exec()</code> never returns.</p><h2 id="Why-Motivating-The-API">Why? Motivating The API</h2><p>The separation of<code>fork()</code> and <code>exec()</code> is essential in building a UNIX shell, because it lets the shell run code after the call to <code>fork()</code> but before the call to <code>exec()</code>; this code can alter the environment of the about-to-be-run program, and thus enables a variety of interesting features to be readily built.</p><p>The shell is just a user program. It shows you a <strong>prompt</strong> and then waits for you to type something into it. You then a command (i.e., the name of an executable program, plus any arguments) into it; in most cases, the shell then figures out where in the file system the executable resides, calls <code>fork()</code> to create a new child process to run the command, calls some variant of <code>exec()</code> to run the command, and then waits for the command to complete by calling <code>wait()</code>. When the child completes, the shell returns from <code>wait()</code> and prints out a prompt again, ready for your next command.</p><p>The separation of <code>fork()</code>  and <code>exec()</code> allows the shell to do a whole bunch of useful things rather easily. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wc</span> p3.c &gt; newfile.txt</span><br></pre></td></tr></table></figure><p>The output of <code>wc</code> is <strong>redirected</strong> into the output file <code>newfile.txt</code> .  The way the shell accomplishes this task is quite simple: when the child is created, before calling <code>exec()</code>, the shell closes <strong>standard output</strong> and opens the file <code>newfile.txt</code>. By doing so, any output from the soon-to-be-running program <code>wc</code> are sent to the file instead of the screen.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sdtio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">  <span class="type">int</span> rc = fork();</span><br><span class="line">  <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// fork failed</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// child: redirect standard output to a file</span></span><br><span class="line">    close(STDOUT_FILENO);</span><br><span class="line">    open(<span class="string">&quot;./p4.output&quot;</span>, O_CREAT|O_WRONGLY|O_TRUNC, S_IRWXU);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// now exec &quot;wc&quot;</span></span><br><span class="line">    <span class="type">char</span> *myargs[<span class="number">3</span>];</span><br><span class="line">    myargs[<span class="number">0</span>] = strdup(<span class="string">&quot;wc&quot;</span>);</span><br><span class="line">    myargs[<span class="number">1</span>] = strdup(<span class="string">&quot;p4.c&quot;</span>);</span><br><span class="line">    myargs[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    execvp(myargs[<span class="number">0</span>], myargs);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// parent goes down this path (main)</span></span><br><span class="line">    <span class="type">int</span> rc_wait = wait(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process-Control-and-Users">Process Control and Users</h2><p>There are a lot of other interfaces for interacting with processes in UNIX systems. For example, the <code>kill()</code> system call is used to send <strong>signals</strong> to a process, including directives to pause, die, and other useful imperatives.</p><p>The entire signals subsystem provides a rich infrastructure to deliver external events to processes, including ways to receive and process those signals within individual processes, and ways to send signals to individual processes as well as entire <strong>process groups</strong>. To use this form of communication, a process should use the <code>signal()</code> system call to “catch” various signals; doing so ensures that when a particular signal is delivered to a process, it will suspend its normal execution and run a particular piece of code in response to the signal.</p><h2 id="Homework">Homework</h2><h3 id="Simulation">Simulation</h3><ol><li><p>One interesting thing to note is what happens when a child exits; what happens to its children in the process tree? To study this, let’s create a specific example: <code>./fork.py -A a+b,b+c,c+d,c+e,c-</code>. This example has process ’a’ create ’b’, which in turn creates ’c’, which then creates ’d’ and ’e’. However, then, ’c’ exits. What do you think the process tree should like after the exit? What if you use the <code>-R</code> flag? Learn more about what happens to orphaned processes on your own to add more context.</p><ul><li>The process will be concatenated to the <code>a</code> init process. When <code>-R</code> flag is given, the process is re-attached to its ancestor <code>b</code>.</li></ul></li><li><p>Use both <code>-t</code> and <code>-F</code> together. This shows the final process tree, but then asks you to fill in the actions that took place. By looking at the tree, can you determine the exact actions that took place? In which cases can you tell? In which can’t you tell? Try some different random seeds to delve into this question.</p></li></ol><h3 id="Code">Code</h3><ol><li><p>Write a program that calls <code>fork()</code>. Before calling <code>fork()</code>, have the main process access a variable (e.g., <code>x</code>) and set its value to something (e.g., 100). What value is the variable in the child process? What happens to the variable when both the child and parent change the value of <code>x</code>?</p><ul><li>The value in the child is the same as the one in the main process. It seems that the child and the main process both have a copy of the original variable. They changed their own variable separately.</li></ul></li><li><p>Write a program that opens a file (with the<code>open()</code> system call) and then calls<code> fork()</code> to create a new process. Can both the child and parent access the file descriptor returned by <code>open()</code>? What happens when they are writing to the file concurrently, i.e., at the same time?</p><ul><li>Yes, both processes can access the file descriptor returned by <code>open()</code> and write to the file at the same time.</li></ul></li><li><p>Write another program using <code>fork()</code>. The child process should print “hello”; the parent process should print “goodbye”. You should try to ensure that the child process always prints first; can you do this without calling <code>wait()</code> in the parent?</p><ul><li>Use <code>sleep(1)</code> in the <code>&lt;unistd.h&gt;</code> library at the main process.</li></ul></li><li><p>Write a program that calls fork() and then calls some form of <code>exec()</code> to run the program <code>/bin/ls</code>. See if you can try all of the variants of <code>exec()</code>, including (on Linux) <code>execl()</code>, <code>execle()</code>, <code>execlp()</code>, <code>execv()</code>, <code>execvp()</code>, and <code>execvpe()</code>. Why do you think there are so many variants of the same basic call?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">const</span> <span class="type">char</span>* args, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* file, <span class="type">const</span> <span class="type">char</span>* args, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execle</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">const</span> <span class="type">char</span> *args, ..., <span class="type">char</span>* <span class="type">const</span> envp[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">char</span>* <span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* file, <span class="type">char</span>* <span class="type">const</span> argv[])</span>;</span><br></pre></td></tr></table></figure></li><li><p>Now write a program that uses <code>wait()</code> to wait for the child process to finish in the parent. What does <code>wait()</code> return? What happens if you use <code>wait()</code> in the child?</p><ul><li>The <code>wait()</code> will return the child <code>pid</code>. The <code>wait()</code> will return -1 in the child process.</li></ul></li><li><p>Write a slight modification of the previous program, this time using <code>waitpid()</code> instead of <code>wait()</code>. When would <code>waitpid()</code> be useful?</p><ul><li>When there are multiple children processes <code>waitpid</code> could be useful to wait for the specific child’s state change.</li></ul></li><li><p>Write a program that creates a child process, and then in the child closes standard output (<code>STDOUT FILENO</code>). What happens if the child calls <code>printf()</code> to print some output after closing the descriptor?</p><ul><li>The child can no longer print anything on the screen while the parent can still print. However, if the <code>stdout</code> is closed in the parent process, the child is not able to print anything either.</li></ul></li><li><p>Write a program that creates two children, and connects the standard output of one to the standard input of the other, using the <code>pipe()</code> system call.</p><ul><li>The core code can be viewed with <code>man pipe</code> command.</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Operating Systems: The Process</title>
      <link href="/2020/08/18/Operating-Systems-The-Process/"/>
      <url>/2020/08/18/Operating-Systems-The-Process/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Operating Systems: Three Easy Pieces</p></blockquote><h1>The Abstraction: The Process</h1><p>One of the most fundamental abstractions that the OS provides to users: the <strong>process</strong> (a running program).</p><p>The OS creates the illusion of nearly-endless supply of CPUs by <strong>virtualizing</strong> the CPU.</p><p>The basic technique, known as <strong>time sharing</strong> （分时） of the CPU, allows users to run many concurrent processes.</p><p>To implement virtualization of the CPU, and to implement it well, the OS will need both some low-level machinery and some high-level intelligence. The low-level machinery is called <strong>mechanisms</strong> (low-level methods or protocols that implement a needed piece of functionality). Eg: a <strong>context switch</strong> could give the OS the ability to stop running one program and start running another on a given CPU.</p><p>On top of these mechanisms resides some of the intelligence in the OS, in the form of <strong>policies</strong>. Policies are algorithms for making some kind of decision within the OS. Eg: a <strong>scheduling policy</strong> in the OS will make the decision of running one of the many queued programs.</p><h2 id="The-Abstraction-A-Process">The Abstraction: A Process</h2><p><strong>Machine State</strong>: what a program can read or update when it is running?</p><ul><li><p><strong>address space</strong></p></li><li><p><strong>register</strong>: program counter/instruction pointer (PC/IP), stack pointer, associated frame pointer</p><blockquote><p>什么是Frame Pointer (FP)？</p><p>它指向本函数栈帧顶，通过它可以找到本函数在进程栈中的位置，有专门的寄存器保存该值。这一过程由编译器记录。</p><p>利用SP和FP可以回溯母函数的栈帧(Stack Frame)，从而得到母函数的SP和FP（它们会在母函数调用子函数的时候立即被压栈）。以此回溯可以得到所有函数的还采用顺序。</p><p>程序执行的过程中，不需要使用FP。因为汇编层面的每个函数内部执行push和pop操作。</p></blockquote></li></ul><h2 id="Process-API">Process API</h2><p>The following APIs are available on any modern operating system.</p><ul><li><strong>Create</strong>: some method to create new processes. Eg: double-click an application icon or type a command into the shell, the OS is invoked to create a new process to run the program.</li><li><strong>Destroy</strong>: destroy processes forcefully, though many processes will run and exit by themselves.</li><li><strong>Wait</strong>: wait for a process to stop running.</li><li><strong>Miscellaneous Control</strong>: Eg: to suspend a process and then resume it.</li><li><strong>Status</strong>: get some status information about a process, such as how long it has run for, or what state it is in.</li></ul><h2 id="Process-Creation-A-Little-More-Detail">Process Creation: A Little More Detail</h2><ol><li><p><strong>load</strong> the code and static data into memory (the address space of the process) from <strong>disk</strong> or <strong>flash-based SSDs</strong> in some kind of <strong>executable format</strong></p></li><li><p>allocate some memory for the program’s <strong>run-time stack/stack</strong>. The OS will also likely initialize the stack with arguments; specifically, it will fill the parameters to the <code>main</code> function, i.e., <code>argc</code> and the <code>argv</code> array.</p><blockquote><p>C语言中，局部变量，函数参数，返回地址在栈中储存</p></blockquote></li><li><p>may need to allocate some memory for the program’s <strong>heap</strong>. The heap is needed for data structures such as linked lists, hash tables, trees, and other interesting data structures.</p><blockquote><p>C语言中，堆被用于储存显式请求得到的动态分配的数据，即 <code>malloc()</code> API。操作系统会介入分配内存以满足调用。</p><p>显式释放采用 <code>free()</code></p></blockquote></li><li><p>some other initialization tasks, particularly as related to I/O. Eg: in UNIX systems, each process by default has three open <strong>file descriptors</strong>, for standard input, output, and error.</p></li><li><p>last task: to start the program running at the entry point, namely the <code>main()</code>.</p></li></ol><h2 id="Process-States">Process States</h2><p>Different <strong>states</strong> a process can be in at a given time.</p><ul><li><strong>Running</strong>: a process is running on a processor, meaning it is executing instructions.</li><li><strong>Ready</strong>: a process is ready to run but for some reason the OS has chosen not to run it at this given moment.</li><li><strong>Blocked</strong>: a process has performed some kind of operation that makes it not ready to run until some other event takes place. Eg: a process initiates an I/O request to a disk.</li></ul><p>From ready to running: <strong>scheduled</strong></p><p>From running to ready: <strong>descheduled</strong></p><p>Decisions are made by the OS <strong>scheduler</strong>.</p><h2 id="Data-Structures">Data Structures</h2><p><strong>Process list</strong>: processes that are ready and some additional information to track which process is currently running. Each entry is found in what is sometimes called a <strong>process control block (PCB)</strong>, which is really just a structure that contains information about a specific process.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the register xv6 will save and restore</span></span><br><span class="line"><span class="comment">// to stop and subsequently restart a process</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">context</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> eip;</span><br><span class="line">  <span class="type">int</span> esp;</span><br><span class="line">  <span class="type">int</span> ebx;</span><br><span class="line">  <span class="type">int</span> ecx;</span><br><span class="line">  <span class="type">int</span> edx;</span><br><span class="line">  <span class="type">int</span> esi;</span><br><span class="line">  <span class="type">int</span> edi;</span><br><span class="line">  <span class="type">int</span> ebp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// the different states a process can be in</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">proc_state</span> &#123;</span>UNUSED, EMBRYO, SLEEPING, RUNNABLE,</span><br><span class="line">                 RUNNING, ZOMBIE&#125;;</span><br><span class="line"><span class="comment">// the information xv6 tracks about each process</span></span><br><span class="line"><span class="comment">// including its register context and state</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">  <span class="type">char</span> *mem; <span class="comment">// start of process memory</span></span><br><span class="line">  uint sz; <span class="comment">// size of process memory</span></span><br><span class="line">  <span class="type">char</span> *kstack; <span class="comment">// Bottom of kernel stack</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">proc_state</span> <span class="title">state</span>;</span> <span class="comment">// process state</span></span><br><span class="line">  <span class="type">int</span> pid; <span class="comment">// process ID</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">parent</span>;</span> <span class="comment">// parent process</span></span><br><span class="line">  <span class="type">void</span> *chan; <span class="comment">// if !0, sleeping on chan</span></span><br><span class="line">  <span class="type">int</span> killed; <span class="comment">// if !0, has been killed</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">ofile</span>[<span class="title">NOFILE</span>];</span> <span class="comment">// open files</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">cwd</span>;</span> <span class="comment">// current directory</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">context</span> <span class="title">context</span>;</span> <span class="comment">// switch here to run process</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">trapframe</span> *<span class="title">tf</span>;</span> <span class="comment">//Trap frame for the current interrupt</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <strong>register context</strong> will hold the contents of a stopped process’s registers. When a process is stopped, its registers will be saved to this memory location. This tech is known as a <strong>context switch</strong>.</p><p>Sometimes a system will have an <strong>initial</strong> state that the process is in when it is being created. Also, a process could be placed in a <strong>final</strong> state where it has exited but has not yet been cleaned up (in UNIX-based systems, it is called the <strong>zombie</strong> state). The final state can be useful as it allows other processes (usually the <strong>parent</strong> that created the process) to examine the return code of the process and see if the just-finished process execute successfully accomplished a task and non-zero otherwise. When finished, the parent will make one final call (e.g., <code>wait()</code>) to wait for the completion of the child, and to also indicate to the OS that it can clean up any relevant data structures that referred to the now-extinct process.</p><h2 id="Homework">Homework</h2><ol><li><p>Run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">·process-run.py</span><br></pre></td></tr></table></figure><p>with the following flags:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l 5:100,5:100</span><br></pre></td></tr></table></figure><p>. What should the CPU utilization be?</p><ul><li>100%</li></ul></li><li><p>Now run with these flags:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./process-run.py -l 4:100,1:0</span><br></pre></td></tr></table></figure><p>. These flags specify one process with 4 instructions (all to use the CPU), and one that simply issues an I/O and waits for it to be done. How long does it take to complete both processes?</p><ul><li>10 ticks: 4 for task1, 1 for start I/O, 4 for waiting I/O, 1 for Done.</li></ul></li><li><p>Switch the order of the processes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l 1:0,4:100</span><br></pre></td></tr></table></figure><p>. What happens now? Does switching the order matter? Why?</p><ul><li>6 ticks. Yes, the CPU is working when waiting for I/O to complete.</li></ul></li><li><p>What happens when you run the following two processes (</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l 1:0,4:100 -c -S SWITCH_ON_END</span><br></pre></td></tr></table></figure><p>), one doing I/O and the other doing CPU work?</p><ul><li>The CPU waits until the I/O completes.</li></ul></li><li><p>Now, run the same processes, but with the switching behavior set to switch to another process whenever one is WAITING for I/O (</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l 1:0,4:100 -c -S SWITCH_ON_IO</span><br></pre></td></tr></table></figure><p>). What happens now?</p><ul><li>The same as the default settings.</li></ul></li><li><p>One other important behavior is what to do when an I/O completes. With</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-I IO RUN_LATER</span><br></pre></td></tr></table></figure><p>, when an I/O completes, the process that issued it is not necessarily run right away; rather, whatever was running at the time keeps running. What happens when you run this combination of processes? (Run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p</span><br></pre></td></tr></table></figure><p>) Are system resources being effectively utilized?</p><ul><li>No. The first process needs 3 I/O. The latter 2 processes will run one after another, meaning the first one needs to wait until all processes are completed before the next 2 I/O.</li></ul></li><li><p>Now run the same processes, but with</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-I IO_RUN_IMMEDIATE</span><br></pre></td></tr></table></figure><p>set, which immediately runs the process that issued the I/O. How does this behavior differ? Why might running a process that just completed an I/O again be a good idea?</p><ul><li>A process is likely to run several I/O. If the its next behavior is running on CPU, then nothing is lost. However, if the next move is another I/O, much time can be saved.</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Operating Systems: Introduction</title>
      <link href="/2020/08/17/Operating-Systems-Introduction/"/>
      <url>/2020/08/17/Operating-Systems-Introduction/</url>
      
        <content type="html"><![CDATA[<h1>Introduction</h1><blockquote><p>Computer Systems: Three Easy Pieces</p></blockquote><p><strong>Virtualization</strong>: the OS takes a <strong>physical</strong> resource and transforms it into a more general, powerful, and easy-to-use <strong>virtual</strong> form of itself. Thus, the OS is sometimes referred to as a <strong>virtual machine</strong>.</p><p>A typical OS exports a few hundred <strong>system calls</strong> that are available to applications. The OS provides a <strong>standard library</strong> to applications.</p><p>The OS is sometimes known as a <strong>resource manager</strong> for CPU, memory, and disk.</p><h2 id="Virtualizing">Virtualizing</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;  <span class="comment">// argc is the number of input </span></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;    <span class="comment">// e.g. notepad.exe t.txt has 2 params, argc=2</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: cpu &lt;string&gt;\n&quot;</span>);  <span class="comment">// print to standard error</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">char</span> *str = argv[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    Spin(<span class="number">1</span>);  <span class="comment">// a function that repeatedly checks the time and returns</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str); <span class="comment">// once it has run for a second</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o cpu cpu.c -Wall <span class="comment"># -Wall 打开警告</span></span><br><span class="line">./cpu <span class="string">&quot;A&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cpu A &amp; ./cpu B &amp; ./cpu C &amp; ./cpu D &amp;</span><br></pre></td></tr></table></figure><p><strong>Virtualizing the CPU</strong></p><p><strong>Policy</strong> of the OS.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="type">int</span> *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">  assert(p != <span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;(%d) address pointed to by p: %p\n&quot;</span>, getpid(), p);  <span class="comment">// %p to print pointer</span></span><br><span class="line">  *p = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    Spin(<span class="number">1</span>);</span><br><span class="line">    *p = *p + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%d) p: %d\n&quot;</span>, getpid(), *p);  <span class="comment">// the process identifier (PID)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mem &amp;; ./mem &amp;</span><br></pre></td></tr></table></figure><p><strong>Virtualizing memory</strong>: each process accesses its own private <strong>virtual address space</strong>.</p><h2 id="Concurrency">Concurrency</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> counter = <span class="number">0</span>;  <span class="comment">// Keyword volatile is an extreme opposite of const.</span></span><br><span class="line"> <span class="comment">// It indicates that a variable may be changed in a </span></span><br><span class="line"> <span class="comment">// way which is absolutely unpredictable by analysing</span></span><br><span class="line">  <span class="comment">// the normal program flow. Every reference to the </span></span><br><span class="line"> <span class="comment">// variable will reload the contents from memory </span></span><br><span class="line"> <span class="comment">// rather than take advantage of situations where a</span></span><br><span class="line"> <span class="comment">// copy can be in a register.</span></span><br><span class="line"><span class="type">int</span> loops;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">worker</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loops; i++) &#123;</span><br><span class="line">    counter ++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: threads &lt;value&gt;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  loops = atoi(argv[<span class="number">1</span>]);  <span class="comment">// ascii to integer</span></span><br><span class="line">  <span class="type">pthread_t</span> p1, p2;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Initial value : %d\n&quot;</span>, counter);</span><br><span class="line">  </span><br><span class="line">  Pthread_create(&amp;p1, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">  Pthread_create(&amp;p2, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">  Pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">  Pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Final value: %d\n&quot;</span>, counter);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Concurrency</strong> and <strong>multi-threaded</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -o thread thread.c -Wall -pthread</span><br><span class="line">./thread 1000</span><br><span class="line"><span class="comment"># output &gt; 2000</span></span><br><span class="line">./thread 100000</span><br><span class="line"><span class="comment"># output &gt; 143012 // huh??</span></span><br></pre></td></tr></table></figure><p>Instructions do not execute <strong>atomically</strong> (all at once)!</p><h2 id="Persistence">Persistence</h2><p>DRAM store values in a <strong>volatile</strong> manner, therefore we need hardware and software to be able to store data <strong>persistently</strong>.</p><ul><li>Hardware: <strong>I/O</strong> device: hard drive, solid-state drives</li><li>Software: <strong>file system</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="type">int</span> fd = open(<span class="string">&quot;/tmp/file&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU); <span class="comment">// system call!</span></span><br><span class="line">  assert(fd &gt; <span class="number">-1</span>);</span><br><span class="line">  <span class="type">int</span> rc = write(fd, <span class="string">&quot;hello world\n&quot;</span>, <span class="number">13</span>);  <span class="comment">// system call!</span></span><br><span class="line">  assert(rc == <span class="number">13</span>);</span><br><span class="line">  close(fd);  <span class="comment">// system call to the file system!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Device driver</strong></p><p>The OS provides a standard and simple way to access devices through its system calls. Thus, the OS is sometimes seen as a <strong>standard library</strong>.</p><p>For performance reasons, most file systems first delay such writes for a while, hoping to batch them into larger groups. To handle the problems of system crashes during writes, most file systems incorporate some kind of intricate write protocol, such as <strong>journaling</strong> or <strong>copy-on-write</strong>, carefully ordering writes to disk to ensure that if a failure occurs during the write sequence, the system can recover to reasonable state afterwards.</p><h2 id="Design-Goals">Design Goals</h2><p>Build up some <strong>abstractions</strong> in order to make the system convenient and easy to use.</p><p><strong>High performance</strong> and <strong>Minimize the overheads</strong> of the OS.</p><p>Provide <strong>protection</strong> between applications, as well as between the OS and applications. <strong>Isolation</strong> is the heart of one of the main principles underlying an operating system.</p><p>A high degree of <strong>reliability</strong> is required.</p><p>Other goals include <strong>energy-efficiency</strong>, <strong>security</strong>, <strong>mobility</strong>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Seeing Is Believing?</title>
      <link href="/2019/11/28/Seeing-Is-Believing/"/>
      <url>/2019/11/28/Seeing-Is-Believing/</url>
      
        <content type="html"><![CDATA[<p>Seeing is believing. It used to be such a universally acknowledged viewpoint that almost all languages, eastern or western, possess similar expressions. Throughout history, this common idea has guided us and encouraged our ancestors to seek the truth, and, to some extent, it also leads to the advent of experimental science and other branches of scientific knowledge. With a deeper understanding of the world we live, people begin to doubt and challenge this proverb. Given the interest in, debate on, and controversy over the saying, it seems desirable for us to explore further the issue it raised.</p><p>To further discuss whether it is true or false, I here attempt to elaborate, refine and on occasion, supplement reasons why this proverb enjoys such great popularity. When we try to perceive the universe and be thoughtful, it is so natural that we often neglect the influence of our biological structure. Seeing is probably the most frequently used method by which humans know and even describe the environment around them. If we develop this concept to a broader topic, seeing can also mean smelling, tasting, hearing and touching - all the senses that we born to have. Signals from outside world are received and processed by our brain unconsciously. It is extremely easy for us to take what we see every day for granted, which, as far as I am concerned, is unimpeachable, because in most cases, this straightforward way reveals the truth. We see colorful flowers, and most flowers are colorful, which meets our expectation. We feel cold at winter, and every year there is a cold season, which fits our intuition.</p><p>However, believe what we see is simply follow our nature and far from becoming wise. What differentiate normal people from scientists and philosophers are the exceptions contradictory to common sense or things that exist but unreachable or invisible. There are natural limitations of our brain, as Immanuel Kant pointed out, how can we justify what we see is exactly what others perceive? How can we believe and what should we believe if the same signals are processed differently? Furthermore, if we can not guarantee we are thinking in the same way, how can we assert the world is the same as consensus that people have reached? Although people agree on most things, there are plenty of examples to support Kant’s idea. For instance, mentally ill patients get irritated or disappointed more easily than normal people. Can we assert that the world in their mind is the same as the one in our mind? Or is the world in the color-blinded people’s eyes the same as the one in normal people’s eyes? To say the least, even if we assume that humans see and think about the world in the same way, which is apparently false, there are still a lot of things beyond our abilities to feel our world. Visible light is only a small part in a much wider range of electromagnetic wave and millions of compounds are tasteless or odorless. Apart from acoustic wave, modern scientific research has shown the existence of ultrasonic and infrasound wave. Compared to Aristotle, who concluded after his observation that ‘force is the cause of motion’, Isaac Newton is regarded as a greater physicist for seeing though the illusion of ‘friction’ and coming up with the axiom of Newton’s first law of motion.</p><p>So, to look deeper into the saying ‘seeing is believing’ itself, I reckon we never truly believe anything we see unless we choose to do so. Ordinary people tend to be satisfied with what they see, or what they are taught and read in the in the textbook and they never do any experiment to justify their authenticity, because most of the time, we seldom remember to doubt. Instead, Steve Jobs chose to ‘stay hungry, stay foolish’ and not to be content. This is the reason why Apple can become outstanding and still keep striving for perfection even today.</p><p>Sadly, citizens nowadays have an illusion that they are thinking independently and not believing things they see. They think they are the wise, which is not the case. Hongkong youngsters choose to believe in the so called democracy and refuse to believe in the mainland’s legal and political system. They, like any foreigners in the world, witnessed and experienced the fast rising of China and slow declining of Great Britain but still refuse to admit the advantages of socialism with Chinese characteristics and disadvantages of Western democratic society. Alternatively, when mainland Chinese talk about the current political situation in Hongkong, they always criticize real-estate businessmen. Could this be a political more than a housing issue? Maybe those pro-democratic politicians choosing to stand against policies from mainland should be responsible for the riots in Hongkong. What is the difference between them and us if we follow others blindly and be vulnerable to instigation as well?</p><p>Luckily, humans, however, have gone far beyond this proverb. We exceed what nature provides us and become something more than ourselves. Behind the superficial phenomenon lies the more fundamental principles and we actually use our brain and imagination instead of senses to tackle with complexity and interference to induce a new paradigm that better fits reality. The content of this saying is, of course, outdated probably 500 years ago at the beginning of scientific era whereas its essence remains priceless. The purpose of this proverb is not literally try to teach us what we should believe. Instead, it has been enlightening humans from ancient times not to take things for granted but to think rationally and seek evidence or proof. ‘Seeing’ is simply a metaphor, meaning we should always try to go deeper to the more basic level and make things clearer. We invented telescope and microscope in order to see this world in much more detail rather than daydreaming and sometimes now, what limits us is not our senses but the physical law itself in our universe. In modern times with much information, true or false, mingled together, we all should open our eyes and broaden our horizon, observe carefully and always be skeptical, trust only experiments and practice. With these, the ultimate secrete of our known universe might shine with a quick flash of insight.</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Media Scrutiny</title>
      <link href="/2019/11/28/Media-Scrutiny/"/>
      <url>/2019/11/28/Media-Scrutiny/</url>
      
        <content type="html"><![CDATA[<p>There is an intriguing fact in this age: when people turn on the television or their mobile phones, they frequently find out that there is abundant shocking news concerning celebrities. Most of them uncovers appalling dark sides of these people who seemed to be perfect and admirable in the past. It seems that no one is innocent under media scrutiny and it is only a matter of fact before some negative evidence appears. How do we interpret this phenomenon?</p><p>Two main factors contribute to this fact. Above all, the widely applied information technology stimulates the growth of a variety of media and leads to the advent of We-media, a low-cost method to spread news conveniently for almost everybody. Armed with cameras or other equipment, even the most ordinary people can become paparazzi as long as they capture things unheard of, let alone hackers who can steal credential information technically without any authorization. Rumors on the grapevine, compared with the boring everyday news, may go virus on social platforms much easier. Secondly, a public figure can be ruined by a single and simple piece of news overnight. It is universally acknowledged that it is almost impossible to avoid making mistakes in the long run. Every negligence is vulnerable to infinite magnification and probably some distortion through the Internet and therefore, becomes disastrous for any celebrity. Is there anyone who keeps an impeccable lifestyle? People like Keenu Reeves exist without doubt, but the minority like him are usually overwhelmed by the deficient majority. After all, living a life without faults has little relationship with the media. These 2 reasons explain why it seems that public figures’ reputation always crumbles.</p><p>To some extent, media scrutiny help create justice. The mainstream media seek to do so for obvious reasons. For We-media, it reveals the public’s basic standpoint-praising the virtue and punishing vice. People are willing to spread the news that rouses their great indignation and would like to comment on these subjects. This forces celebrities to be more attentive to what they say and how they behave.</p><p>The new problem rises as well, however. This power of media scrutiny can be overused and sometimes even misleading. When the majority move from indignity to irrational, cyber-violence occurs. Sulli, a south Korean pop star famous for not wearing underwear, incurred much debate online and eventually committed suicide. Her death is thought-provoking. Wearing underwear or not is neither a matter of life and death nor a question related to good or evil but it leads to this irretrievable tragedy unexpectedly. It is in fact quite common for netizens to attack others who share a different view without much censorship with their real identity covered. Unfortunately, many followers are not aware of how serious this can be. Furthermore, the original information can be distorted as pieces of news get forwarded recklessly. The even more horrible thing is that as tycoons gradually realize the power of media, it has become a weapon for some ill-disposed individuals instead of a scrutiny method.</p><p>So far, we have already seen how powerful media scrutiny can be. It makes us believe that the reputation of anyone who is subjected to media scrutiny will eventually be compromised. We see so many cases that almost no one can survive media scrutiny. But as we go deeper, we need to keep asking ourselves: does the whole thing end here? Can there be some exceptional cases? What if there is someone not afraid of the whole thing at all? What about the one who supervises the media? What about the individuals who pull the strings behind the scenes?</p><p>It smells like conspiracy theory whereas we can still find some clues worth analyzing in reality. In the J. Epstein case, the prime culprit Epstein committed suicide in jail. Story has it that more than 20 agents involved in this case committed suicide but until now, we still do not have any detailed or persuasive report. There are only wild guesses online. Though the story may not be completely true, it still reveals something that we have not considered thoroughly so far. The protagonists in this case include politicians, extremely successful businessmen and other people belonged to the upper class who have been under media scrutiny for decades. Their reputations do not seem to be negatively affected much. Considering that this is probably an accident, how many other things are hidden from the public and the media scrutiny?</p><p>To wrap up, the reasons behind this phenomenon can be more complicated. There is concise explanation to why this happens, but the side effects and other things related to this topic are also worth thinking. As the media coverage becomes more and more intensive, this issue will definitely become more and more important.</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Hashing</title>
      <link href="/2019/08/08/DataStructure-Hashing/"/>
      <url>/2019/08/08/DataStructure-Hashing/</url>
      
        <content type="html"><![CDATA[<p>When compiling, computer needs to manage variables:</p><ul><li>Inserting (new variables)</li><li>Searching (references of variables)</li></ul><p><strong>Dynamic Searching Problems</strong></p><p>Two main problems about Hashing:</p><ul><li>Calculating positions: creating a hashing function to locate the keyword</li><li>Dealing with Collisions</li></ul><h2 id="Hashing-Table">Hashing Table</h2><p>Name: SymbolTable</p><p>Data Object Set: Name-Attribute</p><p>Operation Set:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SymbolTable <span class="title function_">InitializeTable</span><span class="params">(<span class="type">int</span> TableSize)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsIn</span><span class="params">(SymbolTable Table, NameType Name)</span>;</span><br><span class="line">AttributeType <span class="title function_">Find</span><span class="params">(SymbolTable Table, NameType Name)</span>;</span><br><span class="line">SymbolTable <span class="title function_">Modefy</span><span class="params">(SymbolTable Table, NameType Name, AttributeType Attr)</span>;</span><br><span class="line">SymbolTable <span class="title function_">Insert</span><span class="params">(SymbolTable Table, NameType Name, AttributeType Attr)</span>;</span><br><span class="line">SymbolTable <span class="title function_">Delete</span><span class="params">(SymbolTbale Table, NameType Name)</span>;</span><br></pre></td></tr></table></figure><p><strong>Loading Factor</strong>: total space of a hashing table m, the number of blocks filled by numbers is n then:</p><h2 id="How-to-Create-a-Hashing-Function">How to Create a Hashing Function?</h2><p>A good hashing function must be:</p><ul><li>Easy enough</li><li>The result must be distributed uniformly</li></ul><p>Some methods:</p><ul><li>Direct Addressing</li><li>Linear Congruential Method</li><li>Digit Analysis: find the most random digits and combine them</li><li>Folding Method: compress different parts in to a single one</li><li>Mid-square Method</li></ul><p>When the keyword is a char or string:</p><ul><li><p>ASCII checksum: cannot deal with palindrome, vulnerable to collisions</p><ul><li><p>One improvement is to move some digits forward (give them weight)</p></li><li><p>Another improvement is to transform the string into a number like <strong>Base Sort</strong></p><ul><li><p>QinJiuShao algorithm</p></li><li><p>Moving digits</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Index <span class="title function_">Hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *Key, <span class="type">int</span> TableSize)</span> &#123; </span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> h = <span class="number">0</span>;   </span><br><span class="line">  <span class="keyword">while</span> (*Key != <span class="string">&#x27;\0&#x27;</span>)  </span><br><span class="line">    h = (h &lt;&lt; <span class="number">5</span>) + *Key++;</span><br><span class="line">  <span class="keyword">return</span> h % TableSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="How-to-Deal-with-Collisions">How to Deal with Collisions?</h2><ul><li>Open Addressing<ul><li>Switch to another position!</li></ul></li><li>Separate Chaining<ul><li>Store things in the same place</li></ul></li></ul><h3 id="Open-Addressing">Open Addressing</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>d</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">T</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">z</mi><mi mathvariant="normal">e</mi></mrow></mrow><annotation encoding="application/x-tex">h_i(key) = (h(key) + d_i) \ \mod \ \rm TableSize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">TableSize</span></span></span></span></span></span></p><p>For different <em>i</em>, there are different solutions:</p><ul><li>Linear Probing: $ d_i=i $</li></ul><p><strong>ASL s</strong> and <strong>ASL u</strong></p><ul><li>Quadratic Probing: $ d_i = \pm i^2 $</li></ul><p><strong>Theorem</strong>: if the table length is <strong>4k+3</strong> and is prime number, the quadratic probing can search the whole table space.</p><ul><li>Double Hashing: $ d_i = i\times h_2(key)<br>h_2(key) = p - (key\ \mod\ p) $</li></ul><h2 id="Code">Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">InitializeTable</span><span class="params">(<span class="type">int</span> TableSize)</span> &#123; </span><br><span class="line">  HashTable H; </span><br><span class="line">  <span class="type">int</span> i;  </span><br><span class="line">  <span class="keyword">if</span> (TableSize &lt; MinTableSize) &#123;</span><br><span class="line">    Error(<span class="string">&quot;too small&quot;</span>);       </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;   </span><br><span class="line">  &#125;  </span><br><span class="line">  H = (HashTable)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HashTbl));  </span><br><span class="line">  <span class="keyword">if</span> (H == <span class="literal">NULL</span>)        FatalError(<span class="string">&quot;overflow&quot;</span>);  </span><br><span class="line">  H-&gt;TableSize = NextPrime(TableSize); </span><br><span class="line">  H-&gt;TheCells = (Cell*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Cell)*H-&gt;TableSize);   </span><br><span class="line">  <span class="keyword">if</span> (H-&gt;TheCells == <span class="literal">NULL</span>)        FatalError(<span class="string">&quot;overflow&quot;</span>);   </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H-&gt;TableSize; i++)</span><br><span class="line">    H-&gt;TheCells[i].info = Empty;    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">(ElementType Key, HashTable H)</span> &#123;   </span><br><span class="line">  Position CurrentPos, NewPos;  </span><br><span class="line">  <span class="type">int</span> CNum;    </span><br><span class="line">  CNum = <span class="number">0</span>;  </span><br><span class="line">  NewPos = CurrentPos = Hash(Key, H-&gt;TableSize); </span><br><span class="line">  <span class="keyword">while</span>(H-&gt;TheCells[Newpos].Info != Empty &amp;&amp; H-&gt;TheCells[NewPos].Element != Key) &#123;   </span><br><span class="line">    <span class="keyword">if</span> (++CNum % <span class="number">2</span>) &#123;    </span><br><span class="line">      NewPos = CurrentPos + (CNum + <span class="number">1</span>) / <span class="number">2</span> * (CNum + <span class="number">1</span>) / <span class="number">2</span>;   </span><br><span class="line">      <span class="keyword">while</span>(NewPos &gt;= H-&gt;TableSize)             </span><br><span class="line">        NewPos -= H-&gt;TableSize;        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      NewPos = CurrentPos - CNum / <span class="number">2</span> * CNum/<span class="number">2</span>;    </span><br><span class="line">      <span class="keyword">while</span> (NewPos &lt; <span class="number">0</span>)          </span><br><span class="line">        NewPos += H-&gt;TableSize;  </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">return</span> NewPos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(ElementType Key, HashTable H)</span> &#123;  </span><br><span class="line">  Position Pos; </span><br><span class="line">  Pos = Find(Key, H); </span><br><span class="line">  <span class="keyword">if</span> (H-&gt;TheCells[Pos].Info != Legitimate) &#123; </span><br><span class="line">    H-&gt;TheCells[Pos].Info = Legitimate;   </span><br><span class="line">    H-&gt;TheCells[Pos].Element = Key;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rehashing">Rehashing</h3><p>When the hash table is too large, the search efficiency will decrease.</p><p>0.5 &lt; \alpha &lt; 0.85</p><p>One solution is to double the size of the Hash Table and re calculate the whole table. This is called <strong>rehashing</strong>.</p><h3 id="Separate-Chaining">Separate Chaining</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">Position</span>, *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span>  </span><br><span class="line">  ElementType Element; </span><br><span class="line">  Position Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span> *<span class="title">HashTable</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span> &#123;</span> </span><br><span class="line">  <span class="type">int</span> TableSize; </span><br><span class="line">  List TheLists;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">(ElementType Key, HashTable H)</span> &#123;   </span><br><span class="line">  Position P;   </span><br><span class="line">  <span class="type">int</span> Pos;   </span><br><span class="line">  Pos = Hash(Key, H-&gt;TableSize);</span><br><span class="line">  P = H-&gt;Thelists[Pos].Next; </span><br><span class="line">  <span class="keyword">while</span> (P != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(P-&gt;Element, Key))  </span><br><span class="line">    P = P-&gt;Next; </span><br><span class="line">  <span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Efficiency-of-Hash-Table">The Efficiency of Hash Table</h2><p>The factors that influence the efficiency of a hashing table can be divided into 3 parts:</p><ul><li>The Hashing function (uniformly)</li><li>The way to deal with collisions</li><li>The α</li></ul><p>For linear probing: (insertion and unsuccessful search \ successful search)</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">[</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>p</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p = \frac{1}{2}[1 + \frac{1}{(1-\alpha)^2}]\\p = \frac{1}{2}(1 + \frac{1}{1-\alpha})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>For Quadratic probing and double hashing</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi>p</mi><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p = \frac{1}{1-\alpha}\\p = -\frac{1}{\alpha}ln(1 - \alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></span></p><p>For Separate Chaining:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mi>α</mi><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>α</mi></mrow></msup><mspace linebreak="newline"></mspace><mi>p</mi><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><mi>α</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">p = \alpha + e^{-\alpha} \\p = 1 + \frac{\alpha}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8213em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="Summary">Summary</h2><p>The hashing method is actually consuming space for time.</p><p>The hashing method are not suitable for searching things in order and search in some scope or max or min.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Sort 2</title>
      <link href="/2019/08/08/DataStructure-Sort-2/"/>
      <url>/2019/08/08/DataStructure-Sort-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Sort">Quick Sort</h2><h3 id="Divide-and-Conquer">Divide and Conquer</h3><h3 id="Choosing-the-Principal-Component">Choosing the Principal Component</h3><p><strong>Remark</strong>: <code>rand()</code> is not very efficient!</p><p>One common approach is to use the median number at the head, tail and center of the array:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ElementType <span class="title function_">Median3</span><span class="params">(ElementType A[], <span class="type">int</span> Left, <span class="type">int</span> Right)</span> &#123;   </span><br><span class="line">  <span class="type">int</span> Center = (Left + Right) / <span class="number">2</span>; </span><br><span class="line">  <span class="keyword">if</span> (A[Left &gt; A[Center]])     </span><br><span class="line">    Swap(&amp;A[Left], &amp;A[Center]); </span><br><span class="line">  <span class="keyword">if</span> (A[Left] &gt; A[Rihgt])    </span><br><span class="line">    Swap(&amp;A[Left], &amp;A[Right]);  </span><br><span class="line">  <span class="keyword">if</span> (A[Center] &gt; A[Right]) </span><br><span class="line">    Swap(&amp;A[Center], &amp;A[Right]);  </span><br><span class="line">  Swap(&amp;A[Center], &amp;A[Right - <span class="number">1</span>]); </span><br><span class="line">  <span class="keyword">return</span> A[Right - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Separating-Subsets">Separating Subsets</h3><p>The best part of quick sort is that once the separating part is finished, the principal component is placed in the correct place!</p><p>When dealing with a relative small range of numbers, the quick sort method using recursion is not very fast. The solution is also very simple: using a hybrid method. (Setting a threshold called <strong>Cutoff</strong>)</p><h3 id="The-Code">The Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(ElementType A[], <span class="type">int</span> Left, <span class="type">int</span> Right)</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (Cutoff &lt;= Right - Left) &#123; </span><br><span class="line">    Pivot = Median3(A, Left, Right);        i = Left;    </span><br><span class="line">    j = Right - <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;      </span><br><span class="line">      <span class="keyword">while</span> (A[++i] &lt; Pivot) &#123;&#125; </span><br><span class="line">      <span class="keyword">while</span> (A[++j] &gt; Pivot) &#123;&#125;  </span><br><span class="line">      <span class="keyword">if</span> (i &lt; j)    </span><br><span class="line">        Swap(&amp;A[i], &amp;A[j]);  </span><br><span class="line">      <span class="keyword">else</span>           </span><br><span class="line">        <span class="keyword">break</span>;   </span><br><span class="line">      QuickSort(A, Left, i - <span class="number">1</span>);</span><br><span class="line">      QuickSort(A, i + <span class="number">1</span>, Right);        &#125; </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    InsertionSort(A, Right - Left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Table-Sort">Table Sort</h2><p>When we are not sorting simply numbers but some very large structs like a book, if we want to move this element, we cannot underestimate the cost. In this case, we need table sort.</p><h3 id="Indirect-Sorting">Indirect Sorting</h3><table><thead><tr><th>A</th><th>[0]</th><th>[1]</th><th>[2]</th><th>[3]</th><th>[4]</th><th>[5]</th><th>[6]</th><th>[7]</th></tr></thead><tbody><tr><td>key</td><td>f</td><td>d</td><td>e</td><td>a</td><td>g</td><td>b</td><td>h</td><td>e</td></tr><tr><td>table</td><td>3</td><td>5</td><td>2</td><td>1</td><td>7</td><td>0</td><td>4</td><td>6</td></tr></tbody></table><h4 id="Physical-Sorting">Physical Sorting</h4><p><strong>Theorem</strong>: The sequence of N numbers can be decomposed to several independent rings.</p><ul><li>The best case: all things are sorted</li><li>The worst cast:<ul><li>N/2 rings, each has 2 elements</li><li>3N/2 moves</li></ul></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(mN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><h1>Cardinal Sorting</h1><h2 id="Bucket-Sort">Bucket Sort</h2><h2 id="Cardinal-Sort">Cardinal Sort</h2><p><strong>Least Significant Digit</strong></p><h4 id="Sorting-with-Many-Keywords">Sorting with Many Keywords</h4><p><strong>Most Significant Digit</strong></p><h1>Comparison</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Sort</title>
      <link href="/2019/08/08/DataStructure-Sort/"/>
      <url>/2019/08/08/DataStructure-Sort/</url>
      
        <content type="html"><![CDATA[<h3 id="Lower-Bound-of-Time-Complexity">Lower Bound of Time Complexity</h3><h4 id="Inversion">Inversion</h4><p>For index i and j, if A[i] &gt; A[j] then (i, j) is an inversion.</p><p>For insertion sort:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N, I)=O(N+I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span></span></span></span></span></p><p><strong>Theorem A</strong>: For N different elements, the average number of inversions are</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo>=</mo><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">I=N(N-1)/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/4</span></span></span></span></span></p><p><strong>Theorem B</strong>: For any algorithm which only swaps the adjacent 2 elements, the average time complexity is:</p><p>From B we know that if we want to make our algorithms more efficient, we should eliminate more than one inversions each time! One solution is to swap 2 elements as far as possible.</p><h2 id="Shell-Sort">Shell Sort</h2><p>Define a decreasing sequence. This sequence is used to separate the whole sequence. The latter ones will not spoil the result of the former ones.</p><p>However, the worst case of Shell Sort will be:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T = \Theta(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>From some of the worst cases we know that if the increments are not coprime to each other, the sequence may not be effective.</p><p>There are, of course, some other <strong>incremental sequences</strong>:</p><ul><li>Hibbard: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>k</mi></msub><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">D_k = 2^k - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br>The worst case: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mrow><mn>3</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T = \Theta(N^{3/2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3/2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>Sedgewick</li></ul><h2 id="Heap-Sort">Heap Sort</h2><p>This is based on <strong>Selection Sort</strong>. By using minHeap, we can find the minimum element quickly.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = O(N\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><p>This algorithm, however, needs an extra space and it also needs some extra time to copy the elements.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><p>In reality, the algorithm uses the maxHeap and then adjust this heap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(ElementType A[], <span class="type">int</span> N)</span> &#123; </span><br><span class="line">  <span class="keyword">for</span> (i = N / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">    PercDown(A, i, N);   </span><br><span class="line">  <span class="keyword">for</span> (i = N - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    Swap(&amp;A[<span class="number">0</span>], &amp;A[i]);</span><br><span class="line">    PercDown(A, <span class="number">0.</span> i); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Theorem</strong>: The average time consumed for heap sort is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>2</mn><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>−</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2N\log N - O(N\log \log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><p><strong>Remark</strong>: Although this sorting method looks more efficient, it may not perform better than Shell sorting using <strong>Sedgewick increment sequence</strong>.</p><h2 id="Merge-Sort">Merge Sort</h2><p>The core concept is merging 2 sub sequence.</p><h3 id="Divide-and-Conquer">Divide and Conquer</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MSort</span><span class="params">(ElementType A[], ElementType TmpA[], <span class="type">int</span> L, <span class="type">int</span> RightEnd)</span> &#123;  </span><br><span class="line">  <span class="type">int</span> Center; </span><br><span class="line">  <span class="keyword">if</span> (L &lt; RightEnd) &#123;   </span><br><span class="line">    Center = (L + RightEnd) / <span class="number">2</span>; </span><br><span class="line">    MSort(A, TmpA, L, Center);  </span><br><span class="line">    MSort(A, TmpA, Center + <span class="number">1</span>, RightEnd);      </span><br><span class="line">    Merge(A, TmpA, L, Center + <span class="number">1</span>, RightEnd);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = T(N/2) + T(N/2) + O(N)\\T(N) = O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">/2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">/2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">Nl</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><h3 id="Non-recursive-algorithm">Non-recursive algorithm</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MergePass</span><span class="params">(ElementType A[], ElementType TmpA[], <span class="type">int</span> N, <span class="type">int</span> length)</span> &#123;   </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N<span class="number">-2</span>*length; i += <span class="number">2</span>*length)   </span><br><span class="line">    Merge1(A, TmpA, i, i + length, i + <span class="number">2</span>*length<span class="number">-1</span>);  </span><br><span class="line">  <span class="keyword">if</span> (i + length &lt; N)    </span><br><span class="line">    Merge(A, TmpA, i, i + length, N - <span class="number">1</span>);  </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    <span class="keyword">for</span> (j = i; j &lt; N; j++) TmpA[j] = A[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Quick Notes on Flask Blog</title>
      <link href="/2019/08/01/Quick-Notes-on-Flask-Blog/"/>
      <url>/2019/08/01/Quick-Notes-on-Flask-Blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>When I tried to synchronize my site.db to <a href="http://github.com">github.com</a>, something wrong happened. There is an error on nginx 502 Bad Gateway.</p></blockquote><p>When checking the error log on my server at:<br><code>cat /var/log/flaskblog/flaskblog.err.log</code><br>I found the error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3.OperationalError: attempt to write a readonly database</span><br></pre></td></tr></table></figure><p>To change the authority of writing in this database, I used:<br><code>chmod a+rw ./site.db</code><br>to give all users the authority to read and wirte this database file.</p><p>This solves the problem.</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Topological Sorting</title>
      <link href="/2019/08/01/DataStructure-Topological-Sorting/"/>
      <url>/2019/08/01/DataStructure-Topological-Sorting/</url>
      
        <content type="html"><![CDATA[<h1>Topological Sorting</h1><p><strong>AOV(Activity On Vertex) network</strong></p><h3 id="Topological-Order">Topological Order</h3><blockquote><p>a topological sort or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering.</p></blockquote><p>The process of getting the order is called <strong>topological sorting</strong>.</p><p>If AOV has a reasonable topological order, it has to be <strong>DAG(Directed Acyclic Graph)</strong>.</p><h2 id="Algorithm">Algorithm</h2><p>Find vertexes that has no in-degree, delete them and their out-degree.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TopSort</span><span class="params">()</span> &#123;   </span><br><span class="line">  <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; |V|; vnt++) &#123;  </span><br><span class="line">    v = in-degree is <span class="number">0</span> and not printed yet; <span class="comment">// do not try to scan the whole thing every time!    </span></span><br><span class="line">    <span class="keyword">if</span> (there is no such v) &#123;  </span><br><span class="line">      Error(<span class="string">&quot;loop exist&quot;</span>);  </span><br><span class="line">      <span class="keyword">break</span>;    </span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v; <span class="comment">// or store the number of v     </span></span><br><span class="line">    <span class="keyword">for</span> (each adjacent vertex w of v)         </span><br><span class="line">      Indegree[w]--;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TopSort</span><span class="params">()</span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (each vertex v in the graph) &#123;      </span><br><span class="line">    <span class="keyword">if</span> (Indegree[v] = <span class="number">0</span>) </span><br><span class="line">      Enqueue(v, q);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">while</span> (!isEmpty(q)) &#123;  </span><br><span class="line">    v = Dequeue(q);   </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v; <span class="comment">// or store the number of v      </span></span><br><span class="line">    cnt++;      </span><br><span class="line">    <span class="keyword">for</span> (each adjacent vertex w of v) &#123;        </span><br><span class="line">      <span class="keyword">if</span> (--Indegree[w] == <span class="number">0</span>)  </span><br><span class="line">        Enqueue(w, q);   </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">if</span> (cnt != |v|)    </span><br><span class="line">    Error(<span class="string">&quot;loop exist&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|+|E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Minimum Spanning Tree</title>
      <link href="/2019/08/01/DataStructure-Minimum-Spanning-Tree/"/>
      <url>/2019/08/01/DataStructure-Minimum-Spanning-Tree/</url>
      
        <content type="html"><![CDATA[<h1>Minimum Spanning Tree</h1><h2 id="Characteristics">Characteristics</h2><ul><li>A tree<ul><li>We can regard a tree as a special graph<ul><li>No loop</li><li>|V| - 1 edges with |V| vertexes</li></ul></li></ul></li><li>Spanning<ul><li>Include all nodes in this tree</li><li>|V| - 1 edges are in the graph</li></ul></li><li>Minimum<ul><li>The weighted sum is minimum</li></ul></li></ul><p>If there exists a <strong>minimum spanning tree</strong>, the graph must be connected.</p><h2 id="Greedy-Algorithm">Greedy Algorithm</h2><ul><li>Every step should be the optimal!</li><li>Optimal means that the weight should be as little as possible</li><li>Restrictions<ul><li>Only use the edges in the graph</li><li>Use |V| - 1 edges</li><li>No loop</li></ul></li></ul><h3 id="Prim-Algorithm-Grow-A-Tree">Prim Algorithm - Grow A Tree!</h3><p>This algorithm is very similar to <strong>Dijkstra</strong> algorithm. It is suitable for <strong>dense graph</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Prim</span><span class="params">()</span>&#123;  </span><br><span class="line">  MST = &#123;s&#125;; </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;  </span><br><span class="line">    v = vertex that is not included and has the <span class="built_in">list</span> dist to the tree;    </span><br><span class="line">    <span class="keyword">if</span> (no such v)   </span><br><span class="line">      <span class="keyword">break</span>;      </span><br><span class="line">    dist[v] = <span class="number">0</span>; <span class="comment">// include v     </span></span><br><span class="line">    <span class="keyword">for</span> (each adjacent vertex w of v) &#123; </span><br><span class="line">      <span class="comment">// Update distance to the tree           </span></span><br><span class="line">      <span class="keyword">if</span> (w is not included) &#123;        </span><br><span class="line">        <span class="keyword">if</span> (E(v, w) &lt; dist[w]) &#123;        </span><br><span class="line">          dist[w] = E(v, w);        </span><br><span class="line">          parent[w] = v;        </span><br><span class="line">        &#125;       </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">if</span> (number of edges in MST is less than |V|)   </span><br><span class="line">    Error(<span class="string">&quot;no MST!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="Kruskal-Algorithm-Combine-Trees-to-A-Forest">Kruskal Algorithm - Combine Trees to A Forest!</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Krustal</span><span class="params">()</span>&#123;  </span><br><span class="line">  MST = &#123;&#125;; </span><br><span class="line">  <span class="keyword">while</span>(MST has less edges than |V| - <span class="number">1</span> &amp;&amp; still edges in E) &#123;    </span><br><span class="line">    get an edge with the least weight <span class="title function_">E</span><span class="params">(v, w)</span>; <span class="comment">// MinHeap  </span></span><br><span class="line">    drop <span class="title function_">E</span><span class="params">(v, w)</span> from E;    </span><br><span class="line">    <span class="keyword">if</span> (E(v, w) does not form a loop) <span class="comment">// Union-find set    </span></span><br><span class="line">      include <span class="title function_">E</span><span class="params">(v, w)</span> into MST;     </span><br><span class="line">    <span class="keyword">else</span>        </span><br><span class="line">      ignore E(v, w);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">if</span> (number of edges in MST is less than |V|)    </span><br><span class="line">    Error(<span class="string">&quot;no MST!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Shortest Path Problem</title>
      <link href="/2019/07/31/DataStructure-Shortest-Path-Problem/"/>
      <url>/2019/07/31/DataStructure-Shortest-Path-Problem/</url>
      
        <content type="html"><![CDATA[<h1>Shortest Path Problem</h1><p>Find the minimum weight in all the paths between 2 vertexes. This is called the <strong>Shortest Path</strong>. The start point is called <strong>Source Vertex</strong> the end point is called <strong>Destination Vertex</strong>.</p><h2 id="Problems">Problems</h2><ul><li>Single-source Shortest Paths<ul><li>(directed) Unweighted graph</li><li>(directed) Weighted graph</li></ul></li><li>Multi-Source Shortest Paths</li></ul><h3 id="Single-Source-Shortest-Path-Algorithm-for-Unweighted-Graphs">Single Source Shortest Path Algorithm for Unweighted Graphs</h3><p>Find the shortest path in Non-decreasing order. It is very similar to <strong>BFS</strong>!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Unweighted</span><span class="params">(Vertex S)</span>&#123; </span><br><span class="line">  Enqueue(S, Q);  </span><br><span class="line">  <span class="keyword">while</span>(!IsEmpty(Q)) &#123;   </span><br><span class="line">    V = Dequeue(Q);   </span><br><span class="line">    <span class="keyword">for</span> (each adjacent vertex W of V) &#123;      </span><br><span class="line">      <span class="keyword">if</span> (dist[W] == <span class="number">-1</span>) &#123;           </span><br><span class="line">        dist[W] = dist[V] + <span class="number">1</span>;         </span><br><span class="line">        path[W] = V;          </span><br><span class="line">        Enqueue(W, Q);       </span><br><span class="line">      &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="comment">// dist[W] = distance from S to W// dist[S] = 0// path[W] = a vertex on the path from S to W</span></span><br></pre></td></tr></table></figure><h3 id="Single-Source-Shortest-Path-Algorithm-for-Weighted-Graphs">Single Source Shortest Path Algorithm for Weighted Graphs</h3><p>There is an interesting thing called <strong>negative-cost cycle</strong>. In this loop, the best way is to travel endlessly in this cycle.</p><h4 id="Dijkstra-Algorithm">Dijkstra Algorithm</h4><ul><li>S = {source s, vertexes that their shortest paths have already been found}</li><li>For any vertex that is not in S, dist[v] is the shortest path from s to v, but this path only consists the vertexes in S.</li><li>This algorithm requires the Non-decreasing order of generating paths.<ul><li>In this case, the shortest path <strong>must</strong> be only consisted of vertexes in S.</li><li>Each time choose a vertex that has the least distance.</li><li>When appending S, this action may affect another vertex (w) dist[w]!<ul><li>In this case, w is connected directly to v and!</li><li>dist[w] = min{dist[w], dist[v] + weight}</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(Vertex s)</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;   </span><br><span class="line">    V = vertex that are not inlcuded and has the minimum dist;   </span><br><span class="line">    <span class="keyword">if</span> (there is no such V)   </span><br><span class="line">      <span class="keyword">break</span>;      </span><br><span class="line">    collected[V] = <span class="literal">true</span>;    </span><br><span class="line">    <span class="keyword">for</span> (each adjacent vertex W) &#123;         </span><br><span class="line">      <span class="keyword">if</span> (collected[W] == <span class="literal">false</span>) &#123;     </span><br><span class="line">        <span class="keyword">if</span> (dist[V] + E&lt;V, W&gt; &lt; dist[W]) &#123;  </span><br><span class="line">          dist[W] = dist[V] + E&lt;V, W&gt;;    </span><br><span class="line">          path[W] = V;      </span><br><span class="line">        &#125;            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are several ways of getting V!</p><ul><li>Scan uncollected set, find the one with the minimum distance. This method is very suitable for <strong>Dense Graph</strong> (graph with a lot of edges). <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|^2+|E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></li><li>Store the distance of v in a MinHeap <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|\log |V|+|E|\log|V|=O(|E|\log|V|))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mclose">))</span></span></span></span></li></ul><h3 id="Multi-source-Shortest-Paths-Algorithms">Multi-source Shortest Paths Algorithms</h3><ul><li>Use the Single-source Shortest Path Algorithm on every vertex. This method is suitable for <strong>Sparse graph</strong>. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>×</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|^3+|E|\times |V|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></li><li><strong>Floyd Algorithm</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=O(|V|^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul><h4 id="Floyd-Algorithm">Floyd Algorithm</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>D</mi><mi>k</mi></msup><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">e</mi></mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>l</mi><mo>≤</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D^k[i][j] = \min({\rm distance}(i, (l\le k)), j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">distance</span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></span></p><p>The final shortest path is given by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>D</mi><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">D^{|V|-1}[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">∣</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Floyd</span><span class="params">()</span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;  </span><br><span class="line">      D[i][j] = G[i][j];</span><br><span class="line">      path[i][j] = <span class="number">-1</span>;    </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123; </span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (D[i][k] + D[k][j] &lt; D[i][j]) &#123;               </span><br><span class="line">          D[i][j] = D[i][k] + D[k][j];            </span><br><span class="line">          path[i][j] = k;             </span><br><span class="line">        &#125;      </span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure File Transfer</title>
      <link href="/2019/07/28/DataStructure-File-Transfer/"/>
      <url>/2019/07/28/DataStructure-File-Transfer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h1>Two Methods of Optimization</h1><h2 id="Merge-by-Rank">Merge by Rank</h2><p>The tree can always grow higher and higher if it is not optimized properly! If we try to merge the higher tree to the lower one, the total height will increase by 1. Thus, we should avoid this kind of merging.</p><p>To realize this optimization, we can store the height of the tree to the root node, in a negative way.</p><p>Then the union function will be like:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Union</span><span class="params">(SetType s, SetName root1, SetName root2)</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (s[root1] &gt; s[root2])  </span><br><span class="line">    s[root1] = root2;  </span><br><span class="line">  <span class="keyword">else</span> &#123;     </span><br><span class="line">    <span class="keyword">if</span> (root1 == root2) <span class="comment">// very important!         </span></span><br><span class="line">      s[root1]--;  </span><br><span class="line">    s[root2] = root1;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we can see, the height of a tree will not change if the height of the 2 components are different from each other. Only when the height are the same does the height change.</p><p>Of course, we can also use store the number of elements in the 2 subtrees.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Union</span><span class="params">(SetType s, SetName root1, SetName root2)</span> &#123; </span><br><span class="line">  <span class="keyword">if</span> (s[root1] &gt; s[root2])&#123;    </span><br><span class="line">    s[root2] += s[root1]; </span><br><span class="line">    s[root1] = root2;   </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">    s[root1] += s[root2];  </span><br><span class="line">    s[root2] = root1;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the worst condition, the height of the tree will be:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><h2 id="Path-Compression">Path Compression</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SetName <span class="title function_">Find</span><span class="params">(SetType s, <span class="type">int</span> x)</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (s[x] &lt; <span class="number">0</span>)    </span><br><span class="line">    <span class="keyword">return</span> x;  </span><br><span class="line">  <span class="keyword">else</span>     </span><br><span class="line">    <span class="keyword">return</span> s[x] = Find(s, s[x]); <span class="comment">// 3 things in this statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Find the root of the parent of x (also the root of x)</li><li>Turn x to the parent of x</li><li>Return the root</li></ol><h3 id="Tail-Recursion">Tail Recursion</h3><p>The recursion happens at the end of the function. Nothing needs to be done when the function is being called. The compiler will not push the whole function into stack. Instead, it will rewrite the frame in the stack.</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Troubleshooting and the Future of Networking</title>
      <link href="/2019/06/08/Troubleshooting-and-the-Future-of-Networking/"/>
      <url>/2019/06/08/Troubleshooting-and-the-Future-of-Networking/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro-to-Troubleshooting-and-the-Future-of-Networking">Intro to Troubleshooting and the Future of Networking</h2><h3 id="Intro-to-Troubleshooting-and-the-Future-of-Networking-2">Intro to Troubleshooting and the Future of Networking</h3><p><strong>Error-detection</strong>: The ability for a protocol or program to determine that something went wrong. <em>Eg: cyclic redundancy check</em></p><p><strong>Error-recovery</strong>: The ability for a protocol or program to attempt to fix it.</p><h2 id="Verifying-Connectivity">Verifying Connectivity</h2><h3 id="Pring-Internet-Control-Message-Protocol">Pring: Internet Control Message Protocol</h3><p><strong>Internet Control Message Protocol (ICMP)</strong>: Mainly used for a router or a remote host to communicate why transmission has failed back to the origin of the transmission.</p><p>The ICMP packet is very simple: a header with a few fields, a data section that is used to figure out which of the transmission generated the error.</p><table><thead><tr><th>8 bit</th><th>8</th><th>16</th><th>32</th><th>32</th></tr></thead><tbody><tr><td>type</td><td>code</td><td>checksum</td><td>Reset of the header</td><td>data section</td></tr></tbody></table><p><strong>type</strong>: what type of message is being delivered. <em>Eg: destination unreachable, time exceeded</em></p><p><strong>Code</strong>: indicate a more specific reason for the message than just type. <em>Eg: some individual codes for destination unreachable: destination network unreachable, destination port unreachable</em></p><p><strong>Ping</strong>: Ping lets you send a special type of ICMP message called an <strong>Echo Request</strong>. If the destination is up and running and able to communicate on the network, it will send back an ICMP <strong>Echo Reply</strong> message type.</p><h3 id="Traceroute">Traceroute</h3><p><strong>Traceroute</strong>: A utility that lets you discover the path between 2 nodes, and gives you information about each hop along the way.</p><p>The principle of traceroute is using <strong>TTL</strong>, once the TTL goes to 0, it will send an <strong>ICMP Time Exceeded</strong> message will be sent back to the originating host.</p><p>In Linux and MacOS, <strong>traceroute</strong> sends UDP packets to very high port numbers. On windows the command is <strong>tracert</strong>.</p><p>2 similar commands are <strong>mtr-Linux/MacOS</strong>, and <strong>pathping-Windows</strong></p><h3 id="Testing-Port-Connectivity">Testing Port Connectivity</h3><p>2 important tools on transport layer: <strong>netcat(nc)-Linux/MacOS</strong>(2 parameters: a host and a portm other parameters: -z(zero input and output), -v(verbose)) and <strong>Test-NetConnection-Windows</strong>.</p><h2 id="Digging-into-DNS">Digging into DNS</h2><h3 id="Name-Resolution-Tools">Name Resolution Tools</h3><p><strong>nslookup</strong>: domain name-&gt;host server and the resolution result.</p><p><strong>interaction mode</strong>:</p><ul><li>server + address (<em>Eg: server 8.8.8.8</em>) all the following name resolution queries will be attempted to be made using that server instead the default name server.</li><li>set type=<em>resource record type</em> (<em>Eg: set type=MX</em>) By default, nslookup will return A records, but this lets you explictly ask for Quad A or MX or even text record associated with the host.</li><li>set debug. This allows you to display the full display packet including any intermediary requests and all of the contents.</li></ul><h3 id="Public-DNS-Servers">Public DNS Servers</h3><p>An ISP almost always gives you access to a <strong>recursive name server</strong> as part of the service it provides.</p><p><strong>Public DNS Servers</strong>: Name servers specifically set up so that anyone can use them, for free.</p><p>For many years, the most commonly used DNS servers are run by <strong>Level 3 Communications</strong>， one of the largest ISPs in the world. The DNS Servers are 4.2.2.1 to 4.2.2.6.</p><p>The DNS servers on google are 8.8.8.8 and 8.8.4.4.</p><p>Most public DNS servers are available globally through <strong>anycast</strong>.</p><p>Make sure the name server is run by a reputable company, and try to use the name servers provided by your ISP outside of troubleshooting scenarios.</p><p>Most public DNS servers are also respond to <strong>ICMP Echo Request</strong> so they are also a choice for testing general internet connectivity using <strong>Ping</strong>.</p><h3 id="DNS-Registration-and-Expiration">DNS Registration and Expiration</h3><p><strong>Registrar</strong>: An organization responsible for assigning individual domain names to other organizations or individuals.</p><h3 id="Hosts-Files">Hosts Files</h3><p>The original way that numbered network addresses were correlated with words was through <strong>hosts files</strong>.</p><p><strong>Hosts File</strong>: A flat file that contains, on each line, a network address followed by the host name it can referred to as.</p><p>The Hosts File is still in use because of a special address, the <strong>Loopback address</strong>.</p><p><strong>Loopback Address</strong>: A way of sending network traffic to yourself. For IPv4 it is <strong>127.0.0.1</strong>.</p><p>Almost every hosts file in existence will, in the very least, contain a line that reads 127.0.0.1 localhost, most likely followed by ::1 localhost, where ::1 is the loopback address for IPv6.</p><p><strong>Hosts files</strong> are a popular way for computer viruses to disrupt and redirect users’ traffic.</p><h2 id="The-Cloud">The Cloud</h2><h3 id="What-is-the-Cloud">What is the Cloud</h3><p><strong>Cloud Computing</strong>: A technological approach where computing resources are provisioned in a shareable way, so that lots of users get what they need, when they need it.</p><p><strong>Virtualization</strong>: A single physical machine, called a host, could run many individual virtual instances, called guests.</p><p><strong>Hypervisor</strong>: A piece of software that runs and manages virtual machines, while also offering these guests a virtual operating platform that is indistinguishable from actual hardware.</p><p><strong>Public Cloud</strong>: A large cluster of machines run by another company.</p><p><strong>Private Cloud</strong>: Used by a single large corporation and generally physically hosted on its own premises.</p><p><strong>Hybird cloud</strong>: A term used to describe situations where companies might run things like their most sensitive proprietary techs on a private cloud, while entrusting their less-sensitive servers to a public cloud.</p><p><strong>Cloud Computing</strong>: A new model in computing where large clusters of machines let us use the total resources available in a better way.</p><h2 id="IPv6">IPv6</h2><h3 id="IPv6-Addressing-and-Subnetting">IPv6 Addressing and Subnetting</h3><p>IPv4 = 32 bits<br>IPv6 = 128 bits<br>There are 2 rules when it comes to shrotening an IPv6 address. The <strong>first</strong> is that you can remove any leading zeroes from a group. The <strong>second</strong> is that any number of consecutive groups composed of just zeroes can be replaced with two colons.</p><p>FF00:: reserved for multicast<br>FE80:: <strong>Link-local unicast addresses</strong>: Allow for local network segment communications and are configured based upon a host’s MAC address.</p><p>The first 64 bits are the Network ID and the last 64 bits are the Host ID.</p><h3 id="IPv6-Headers">IPv6 Headers</h3><p>Version(4 bits), Traffic Class(8 bits), Flow Label(20 bits), payload length(16 bits), Next Header, Hop Limit(8 bits (TTL)), Source Address(128 bits), Destination Address(128 bits), Datapayload.</p><h3 id="IPv6-and-IPv4-Harmony">IPv6 and IPv4 Harmony</h3><p><strong>IPv4 mapped address space</strong><br><strong>IPv6 tunnels</strong>: Servers take incoming IPv6 traffic and encapsulate it within traditional IPv4 datagram.</p><p><strong>IPv6 tunnel broker</strong>: Companies that provide IPv6 tunneling endpoints for you, so you do not have to introduce additional equipment to your network.</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Connecting to the Internet</title>
      <link href="/2019/06/07/Connecting-to-the-Internet/"/>
      <url>/2019/06/07/Connecting-to-the-Internet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Google crash course</p></blockquote><h2 id="Intro-to-Connecting-to-the-Internet">Intro to Connecting to the Internet</h2><h3 id="Intro-to-Connecting-to-the-Internet-2">Intro to Connecting to the Internet</h3><p>Various Internet connection technologies. Wans and wireless and Cellular networking.</p><h2 id="POTS-and-Dial-up">POTS and Dial-up</h2><h3 id="Dial-up-Modems-and-Point-to-Point-Protocols">Dial-up, Modems and Point-to-Point Protocols</h3><p><strong>Public switched telephone network (PSTN)</strong>: This is also refered to as <strong>Plain old telephone service (POTS)</strong>. The system is called <strong>USENET</strong> and still in use today. In the past, different organizations used the primitive form of <strong>Dial-up connection</strong> to exchange info. This depends on <strong>POTS</strong>. Connection is established by actually dialing a phone number.</p><p><strong>Dial-up</strong> connection is done by <strong>modems<br>(Modulator and Demodulator)</strong>. Early modems had very low <strong>Baud rates</strong>, which is a measurement of how many bits can be passed across a phone line in a second. The advent of USENET, baud rates increased from 110bps to 300bps to 14.4kbps.</p><h2 id="Broadband-Connection">Broadband Connection</h2><h3 id="Broadband">Broadband</h3><p>Any connectivity techonology that is not dial-up internet.</p><p><strong>T-carrier techonologies</strong>: Originally invented by AT&amp;T in order to transmit multiple phone calls over a single link. This was later used to transmit data in a faster way.</p><p>This tech requires a dedicated line for connection which means it is more expensive. It is often used in business rather than consumers.</p><p>Solutions include:</p><ul><li>T-Carrier technologies</li><li>DSL</li><li>Cable broadband</li><li>Fiber connections</li></ul><h3 id="T-Carrier-Technologies">T-Carrier Technologies</h3><p><strong>Transmission System 1</strong>: T1 for short. AT&amp;T invented a way to carry up tp 24 simutaneous phone calls across a piece of twisted pair copper. T1 comes to mean any twisted-pair copper connection capable of speed of 1.544 mbps.</p><h3 id="Digital-Subscriber-Lines">Digital Subscriber Lines</h3><p>The existing telephone lines was capable of transmitting more data than just voice-to-voice calls</p><p>The main idea of this tech is to use a range of frequences to transmit data.</p><p><strong>DSLAMs (Digital Subscriber Line Access Multiplexers)</strong>: The modems for DSL. They establish data connections across phone lines. Once the DSLAM is powered on the connection is established until the DSLAM is powered off.</p><p><strong>ADSL (Asymmetric Digital Subscriber Line)</strong>: Features different speeds for outbound and incoming data.</p><p><strong>SDSL (Symmetric Digital Subscirber Line)</strong>: Mainly used by businesses that hosted servers that needed to sent data to clients.</p><p><strong>HDSL (High Bit-rate Digital Subscriber Lines)</strong>: Further development. These are technologies that provision speeds above 1.544 megabits per second.</p><h3 id="Cable-Broadband">Cable Broadband</h3><p>Television: Wireless—&gt;Cable</p><p><strong>Cable Communications Policy Act</strong>: Deregulated the cable business in the US and caused a massive boom in growth.</p><p>The principle of Cable Broadband is similar to the DSL. One of the main difference is that cable is generally known as a shared bandwidth technology.</p><p>Techs like DSL and dial up, the connection goes to <strong>Central Office (CO)</strong>. This later became smaller pieces of automated hardware.</p><p>Cable Internet connections are usually managed by cable modem. This device is at the edge of a comsumer’s network and connects it to the <strong>cable modem termination system (CMTS)</strong>, which connects lots of cable connections to an ISP’s core network.</p><h3 id="Fiber-Connections">Fiber Connections</h3><p><strong>FTTX: Fiber To The X</strong>:</p><ul><li>FTTN: Fiber to the Neighborhood</li><li>FTTB: Fiber to the Building</li><li>FTTH: Fiber to the Home</li><li>FTTB and FTTH may both be referred to as FTTP: Fiber to the premises</li></ul><p>Instead of a modem, the demarcation point for fiber tech is known as <strong>Optical Network Terminator (ONT)</strong>, which converts data from protocols the fiber network can understand to those that are more traditional twisted pair copper networks that can understand.</p><h3 id="Broadband-Protocols">Broadband Protocols:</h3><p>There are 2 main protocols over the data-link layer.<br><strong>PPP (Point-to-Point Protocol)</strong><br><strong>PPPoE (Point-to-Point over Ethernet)</strong></p><h2 id="WANs">WANs</h2><h3 id="Wide-Area-Network-Technologies">Wide Area Network Technologies</h3><p><em>Quick summary</em>: For a IT support specialist, you decide to use non-routable address sapce for internal IPs. You set up a router and configure it to perform NAT. You configure a local DNS server and a DHCP server to make metwork configuration easier. Some workers need to connect to resources on the LAN while they are on the road. You configure a VPN server and make sure it is accessible via port forwarding. The CEO decides to build another office in another region. <strong>WAN</strong> tech comes into play.</p><p><strong>Wide Area Networks (WAN)</strong>: Acts like a single network, but spans across multiple physical locations.</p><h3 id="Point-to-Point-VPNs">Point-to-Point VPNs</h3><p><strong>Point-to-Point VPNs</strong>: A popular alternation for WANs tech. Built to be <strong>superfast</strong>. Also called <strong>Site-to-site VPN</strong>.</p><h2 id="Wireless-Networking">Wireless Networking</h2><h3 id="Intro-to-Wireless-Networking-Techonologies">Intro to Wireless Networking Techonologies</h3><p>Difference between infrastructure networks and ad hoc networks. What is wireless channels and wireless security protocols.</p><p><strong>IEEE 802.11 standards</strong>: also called the <strong>802.11 family</strong> made up the tech called <strong>WiFi</strong>.</p><p><strong>Frequency band</strong>: A certain section of the radio spectrum that has been agreed upon to be used for certain communications. <em>Eg: FM frequency band</em></p><p>The most frequently used frequency band are <strong>2.4GHz and 5Ghz</strong>. The frequently used specifications include <strong>802.11b</strong> , <strong>802.11a</strong>, <strong>802.11g</strong>, <strong>802.11n</strong>, <strong>802.11ac</strong>. The letter, the newer.</p><p><strong>Remark: 802.11 = physical and data link layers</strong><br>Dataframe:</p><table><thead><tr><th>2</th><th>2</th><th>6</th><th>6</th><th>6</th></tr></thead><tbody><tr><td>Frame Control</td><td>Duration/ID</td><td>Address 1</td><td>Address 2</td><td>Address 3</td></tr></tbody></table><table><thead><tr><th>2</th><th>6</th><th>0~7951</th><th>4</th></tr></thead><tbody><tr><td>Sequence Control</td><td>Address 4</td><td>Data payload</td><td>FCS</td></tr></tbody></table><p><strong>Frame Control field</strong>: A number of subfields that describe how the frame should be processed, including what version of 802.11 was used.</p><p><strong>Duration field</strong>: How long the total frame is.</p><p><strong>Wireless access point</strong>: A device that bridges the wireless and wired portions of a network.</p><p>The 4 <strong>addresses fields</strong>:</p><ol><li>source address (MAC address of the sending device)</li><li>intended destination on the network (MAC address)</li><li>receiving address (MAC of the access poing that should receive the frame)</li><li>transmitter address (MAC)</li></ol><p><strong>Sequence control field</strong>: A sequence contains the order of the frames.</p><p><strong>FCS (Frame Check Sequence)</strong>: checksum of a cyclical redundancy check just like the ethernet.</p><h3 id="Wireless-Network-Configuration">Wireless Network Configuration</h3><p>Three types of wireless network:</p><ul><li><p>Ad-hoc networks</p><p>: nodes speak to each other directly</p><ul><li>all nodes help pass on the messages. no support infrustructure. <em>Eg: some smart phones and establish ad-hoc network with other smart phones so people can exchange photos, videos, etc.</em></li><li>This can be a useful tool in disasterous situations.</li></ul></li><li><p>Wireless LANS (WLANS)</p><p>: one or more access points act as a bridge between a wireless and a wired network.</p><ul><li>Wireless devices will connect to the access point.</li></ul></li><li><p>Mesh networks</p><p>: hybrid of the 2.</p><ul><li>There will be only some wireless access points. Without having a cable to connect each of them.</li></ul></li></ul><h3 id="Wireless-Channels">Wireless Channels</h3><p><strong>Channels</strong>: Individual, smaller sections of the overall frequency band used by a wireless network. This tech solves the problem of <strong>collision domain</strong>.</p><p>Quick review: Collision domain: Any one network segment where one computer can interrupt another.</p><p>2.4GHz = 2.400GHz ~ 2.500GHz with 13 channels</p><h3 id="Wireless-Security">Wireless Security</h3><p>Any device in range can hypothetically intercept any transimission whether they are intended for them or not.</p><p><strong>Wired Equivvalent Privacy (WEP)</strong>: An encryption technology that provides a very low level of privacy.</p><p>The more bits in a key, the longer the time it takes for someone to crack the encryption. <strong>WEP</strong> only uses <strong>40 bits</strong> of encryption keys, very easy to crack.</p><p><strong>Wifi Protected Access (WPA)</strong>: uses a key of <strong>128 bits.</strong></p><p>The most commonly used encryption algorithm is <strong>WPA2</strong>, <strong>256 bits</strong> key.</p><p><strong>MAC filtering</strong>: Configure the access points to only allow for connections from a specific set of MAC addresses belonging to devices that are trusted.</p><h3 id="Cellular-Networking">Cellular Networking</h3><p>Also called <strong>Mobile networking</strong>. The frequences reserved for Cellular networking can travel longer distance. The frequencies in different cells are different and not overlapped.</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Networking Services</title>
      <link href="/2019/06/06/Networking-Services/"/>
      <url>/2019/06/06/Networking-Services/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Google crash course</p></blockquote><h1>Networking Service</h1><h2 id="Name-Resolution">Name Resolution</h2><p><strong>DNS(Domain Name System)</strong>: A global and highly distributed network service that resolves strings of letters into IP addresses for you.</p><p><strong>Domain Name</strong>: The term we use for something that can be resolved by DNS.</p><p><em>Eg: Domian Name: <a href="http://www.weather.com">www.weather.com</a> IP address: 186.192.1.1</em></p><p>If the company wants to shift their original data center to another place, by using DNS, it can change what IP the domain resolves to and users will not know.</p><p>DNS is of global structure, so it lets organizations to decide which IP it will resolves to.</p><h3 id="The-Many-Steps-of-Name-Resolution">The Many Steps of Name Resolution</h3><p>DNS servers are one of the things that need to be specifically configured at a node on a network.</p><blockquote><p>For a computer to operate on a modern network, a few things need to be configured.</p><blockquote><p>MAC addresses are hard coded and tied to specific pieces of hardware.</p><p>IP address, Subnet mask and Gateway for a host also need to be specific configured.</p><p>The DNS server will be the last one. The computer will also operate on network without a DNS server but this is not convenient.</p></blockquote></blockquote><p>There are 5 different types of DNS servers:</p><ul><li>Caching names servers</li><li>Recursive name servers<ul><li>Recursive name servers perform full DNS resolution requests.<ol><li>User-query-&gt;Cashing/Recursive Name Server-query-&gt;13 Root Server(Anycast tech, today we can regard these 13 servers as 13 authoritives, not 13 computers)</li><li>13 Root Servers-<strong>TLD</strong> name server-&gt;Caching/Recursive Name Server</li><li>Caching/Recursive Name Server-query-&gt;TLD Name Servers(can be globally distributed which are responsible for each TLD)</li><li>TLD Name Servers-<strong>Authoritive Name Server</strong>-&gt;Caching/Recursive Name Server. <strong>Authoritive Name Servers</strong> are responsible for the last 2 parts of any domain name, which is the resolution at which a single organization might be responsible for DNS looks ups.</li><li>Caching/Recursive Name Server-query-&gt;Name Servers</li></ol></li><li>Caching and recursive name servers are to store known domain name lookups for a certain amount of time.</li><li>These 2 are usually privided by ISP.</li></ul></li><li>Root name servers</li><li>TLD name servers</li><li>Authoritative name servers</li></ul><p><strong>Remark</strong>: All domain names in a global DNS system have a <strong>TTL</strong>.</p><p><strong>TTL(Time to live)</strong>: A value, in seconds, that can be configured by the owner of a doman name for how long a name server is allowed to cache an entry before it should discard it and perform a full resolution again.</p><p><strong>Anycast</strong>: A technique that is used to route traffic to different destinations depending on factors like location, congestion, or link health.</p><p><strong>TLD(Top-level domain)</strong>: Represents the top of hierarchal DNS name resolution system. The last part of any domain name. <em>Eg: www . facebook . <strong>com</strong></em></p><p>This strictly hierarchal system prevent malicious parties from redirecting, since your computer will send info to the IP it receives. We rely on the hierarchy system controled by trusted entities.</p><p>Normal phones and computers also store some temporary DNS cache as well. Thus they will not bother their Local Name Server for every TCP connection.</p><h3 id="DNS-and-UDP">DNS and UDP</h3><p><strong>UDP is connectionless</strong>, if using DNS with TCP, there will be too much packets(setting up and shutting down). A DNS server cares only about responding the incoming look ups, and a DNS resolvers simply needs to perform look ups and redo them if not succeed.</p><p>In modern network, the DNS look ups responses might be too large to fit in a UDP datagram. In this situation, a DNS name server will respond with a packet explaining that the response is too large. The DNS client will then establish a TCP connection.</p><h2 id="Name-Resolution-in-Practice">Name Resolution in Practice</h2><h3 id="Resource-Record-Types">Resource Record Types</h3><p>DNS in practice operates with a set of defined resource record types. This allows different kinds of DNS resolutions to take place.</p><p>An <strong>A record</strong> is used to point a certain domain name at a certain IPv4 IP address.</p><p>An IP address is connected to a domain name but a domain name may contain many IP addresses. This needs a technique called <strong>DNS Round robin</strong>. It helps to balance traffic between multiple IPs.</p><p><strong>AAAA - Quad A record</strong>: Very similar to an A record except it returns an IPv6 address.</p><p>A <strong>CNAME record</strong> is used to redirect traffic from one domain name to another. <em>Eg: www . microsoft . com the company also wants that if someone types microsoft . com in the browser, he will be properly redirected. By configuring a CNAME <a href="http://microsoft.com">microsoft.com</a> resolve to www . microsoft . com, the resolving client will know to perform another resolution attempt. This time for www . microsoft . com</em>. CNAME is also called <strong>Canonical Name</strong>.</p><p><strong>MX record - mail exchange</strong>: This resource record is used to deliver Email to the correct server. Many companies run their web service and email service on different machines with different IPs. <strong>MX record</strong> makes sure that the web traffic goes to the web server and email traffic to the email server.</p><p><strong>SRV record - service record</strong>: Similar to MX resource record type except that <strong>SRV record</strong> can be defined to return the specific of many different service types (MX only for email). <em>Eg: SRV records are often used to return the records like calendar and scheduling service</em></p><p><strong>TXT record - text</strong>: Often used to communicate configuration preferences about network services that user has trusted other organizations to handle for his domain. <em>Eg: TXT record used to convey additional info to an email as a service provider. A company handle the email delivery for the user!</em></p><h3 id="Anatomy-of-a-Domain-Name">Anatomy of a Domain Name</h3><p>Every domain name consists 3 main parts: <a href="http://www.google.com">www.google.com</a><br><strong>Top level domain (TLD)</strong>: The last part of a doamin name (com). As the internet getting more crowded, more TLDs are added. This is organized by <strong>ICANN</strong>, The Internet Corporation for Assigned Names and Numbers.</p><p><strong>Domain</strong>: The second part (google).<br><strong>Domains</strong>: Used to demarcate where control moves from a TLD name server to an authoritative name server.</p><p><strong>Subdomain</strong>: The “www” part, sometimes also referred to as <strong>host name</strong> if it is assigned to only one host. People can have many subdomain names like: <a href="http://host.sub.sub.subdomain.domain.com">host.sub.sub.subdomain.domain.com</a>. DNS can technically support up to <strong>127 levels</strong> of domain in total for a <strong>single fully qualified domain name</strong>.</p><p>Combine all these, <strong>Fully qualified domain name (FQDN)</strong>.</p><h3 id="DNS-Zones">DNS Zones</h3><p>A authoritive name server is responsible for a specific <strong>DNS zone</strong>.</p><p><strong>DNS zones</strong> are hierarcal concepts. Root name server: root zone. TLD namer server: zone covering its specific TLD. Authoritive name server: finer grain zones underneath. Zones <strong>do not overlap</strong>. This technique allows for easier control over multiple levels of a domain.</p><p>Zones are configured by <strong>Zone files</strong>, simple configuration files that declare all resource records for a particular zone. It has to contain <strong>SOA</strong>.</p><p><strong>Start of authority (SOA)</strong>: Declares the zone and the name of the name server that is authoritative for it. Along with <strong>SOA</strong>, <strong>NS</strong> is often found.</p><p><strong>NS records</strong>: Indicate other name servers that might also be responsible for this zone.</p><p><strong>Reverse lookup zone files</strong>: These let DNS resolvers ask for an IP and get the FQDN associated with it returned.</p><p><strong>Pointer resource record (PTR)</strong>: Resolves and IP to a name.</p><h2 id="Dynamic-Host-Configuration-Protocol">Dynamic Host Configuration Protocol</h2><h3 id="Overview-of-DHCP">Overview of DHCP</h3><p>4 things need to be configured:</p><ul><li>IP address</li><li>Subnet Mask</li><li>Gateway</li><li>Name server<br>The letter 3 are almost the same on all the nodes in the same network. The IP address, however, is different. This configuration process requires a technique called <strong>DHCP</strong>.</li></ul><p><strong>Dynamic Host Configuration Protocol (DHCP)</strong>: An application layer protocol that automates the configuration process of hosts on a network.</p><p>A machine can query a DHCP server when the computer connects to the network and receives all the configurations in one go. DHCP reduces the administritive overhead and help to configure lots of devices. It also helps to address the problem of having to choose what IP to assign to what device.</p><p><strong>Dynamic allocation</strong> is the most common. A range of IP addresses is set aside for client devices and one of these IPs is issued to these devices when they request one.</p><p><strong>Automatic allocation</strong>: A range of IPaddresses is set aside for assignment purposes. The main difference is the DHCP server is asked to keep track of which IP is assigned to certain devices in the past. It will assign the same IP to the same device each time if posiible.</p><p><strong>Fixed allocation</strong>: Requires a manually specified list of MAC address and their corresponding IPs. If MAC not found, it may fall back to <strong>Dynamic</strong> or <strong>Automatic</strong> allocation or even refuse to assign an IP. (Security measure)</p><p>Along with things like IP addresses and othre configurations, <strong>NHCP</strong> is also used to assign things like <strong>Network time protocol (NTP) servers</strong>: Used to keep all computer on a network synchronized in time.</p><h3 id="DHCP-in-Action">DHCP in Action</h3><p>DHCP is an application layer protocol which relies on transport, network, data-link and physical layers. Interestingly, the main purpose for DHCP is to configure network layer itself. How can it complete this process without the network layer.</p><p><strong>DHCP discovery</strong>: The process by which a client configured to use DHCP attempts to get network configuration info.</p><ol><li><p>Server discovery: the DHCP client sends a</p><p>DHCP discover message on to the network. Both the machine’s IP and the DHCP server’s IP are unknown. A specially crafted broadcast message is formed instead.</p><ul><li>DHCP server listens on UDP port 67 and the DHCP discover message is sent from port 68.</li><li>Encapsulated in a UDP datagram, source port 68, destination port 67.</li><li>Encapsulated in an IP datagram, destination IP: 255.255.255.255, source IP: 0.0.0.0.</li></ul></li><li><p>DHCP server will respond according to its configurations. The respond will be sent as DHCPOFFER message.</p><ul><li>source port 67, destination port 68</li><li>destination 255.255.255.255, source IP its actual IP.</li><li>This is also a broadcast and will reach every machine on the network. The client will know it is for him because the DHCPOFFER has the field that specifies the MAC addresses of the client machine.</li></ul></li><li><p>The client process the DHCPOFFER.</p><ul><li>Sometimes rejects when multiple DHCP servers respond. Maybe accept the IP in a certain range (rare).</li></ul></li><li><p>The client responds with a DHCPREQUEST message.</p><ul><li>source: 0.0.0.0:68, destination IP:255.255.255.255:67.</li></ul></li><li><p>The server responds with a DHCPACK message.</p><ul><li>source actual IP of the server, port 67, destination: 255.255.255.255:68</li></ul></li></ol><p>All these configurations are called <strong>DHCP lease</strong>. Once it is expired, the DHCP client will need to negotiate with a new lease. When a client disconnects the network, it also releases the DHCP lease.</p><h2 id="Network-Address-Translation">Network Address Translation</h2><h3 id="Basics-of-NAT">Basics of NAT</h3><p><strong>Network Address Translation (NAT)</strong> is a technique instead of a defined standard. It takes one IP address and translates it to another. Reasons: security safe guards, preserving limited amount of IPv4 space.</p><p><strong>NAT</strong> is a technology that allows a geteway, usually a router or firewall, to rewrite the source IP of an outgoing IP datagram while retaining the original IP in order to rewrite it into the response.</p><p><strong>IP masquerading</strong>: Many computers on a network and their IPs being translated into the router’s IP. This is also known as <strong>One-to-many NAT</strong>. It is used in lots of LANS today.</p><h3 id="NAT-and-the-Transport-Layer">NAT and the Transport Layer</h3><p>NAT on the network layer is simply translating one IP into another. In the transport layer, serveral additional techs is introduced, however.</p><p>One-to-many NAT is easy for outbound traffic but difficult for inbound traffic. One easy way to realize this is through <strong>Port preservation</strong>.</p><p><strong>Port preservation</strong>: A technique where the source port chosen by a client is the same port used by the router. When 2 machines choose the same port, the router will choose another random port instead.</p><p><strong>Port forwarding</strong>: A technique where specific destination ports can be configured to always be delivered to specific nodes.</p><h3 id="NAT-Non-Routable-Address-Space-and-Limits-of-IPv4">NAT, Non-Routable Address Space, and Limits of IPv4</h3><p>IANA was responsible to assign address blocks to the 5 <strong>Regional internet registries (RIRs)</strong>. The IPv4 addresses will run out. To solve this problem, we need NAT and Non-Routable Address Spcae.</p><p>The main idea of this solution is that, many machines can use the Non-Routable Address Space inside a network with a router with a IPv4 address to represent them.</p><h2 id="VPNs-and-Proxies">VPNs and Proxies</h2><h3 id="Virtual-Private-Networks">Virtual Private Networks</h3><p><strong>Virtual Private Networks (VPN)</strong>: A tech that allows for the extension of a private or local network to hosts that might not be on that local network. Like NAT, VPN is also a general technology concept instead of a strictly defined protocol.</p><p>Most VPNs use the payload section on the transport layer to carry an encrpted payload that actually contains the entire payload of the entire second set of packets (the network, the tranport and the application layers of a packet) intended to traverse the remote network.</p><p><strong>Two-factor authentication</strong>: A technique where more than just a username and password are required to authenticate.</p><p>Usually, a short-lived numeric token is generated by the user through a specialized piece of hardware or software.</p><h3 id="Proxy-Services">Proxy Services</h3><p><strong>Proxy service</strong>: A server that acts on behalf of a client in order to access another service. Benefits: Anonymity, Security, Content filtering, Increased performance.</p><p>The main idea of proxy is an intermidiate server between a client and another server.</p><p>Gateway routers are some sort of Proxy.</p><p><strong>Web Proxies</strong>: The most common one, used for Web services. Nowadays, web proxy can censor the traffic through it and stopped the unwanted ones. <em>Eg: prevent workers browsing twitter during working hours by denying the access</em>.</p><p><strong>Reverse proxy</strong>: A service that might appear to be a single server to external clients, but actually represents many servers living behind it. Just like <strong>DNS round-robin</strong>, this is used as another kind of load-balancing. Another application is in encrypting and decrypting process.</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Transport and Application Layers</title>
      <link href="/2019/06/05/Transport-and-Application-Layers/"/>
      <url>/2019/06/05/Transport-and-Application-Layers/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Google crash course</p></blockquote><h1>Transport and Application Layers</h1><h2 id="Intro">Intro</h2><p><strong>Transport layer</strong>: Allows traffic to be directed to specific network applications.</p><p><strong>Application layer</strong>: Allows these applications to communicate in a way they understand.</p><h2 id="The-Transport-Layer">The Transport Layer</h2><h4 id="Multiplex-and-Demultiplex">Multiplex and Demultiplex</h4><table><thead><tr><th>Processes</th><th>Multiplexer</th><th>IP</th></tr></thead><tbody><tr><td>IP</td><td>Demultiplexer</td><td>Processes</td></tr></tbody></table><p>The transport layer handles this multiplexing and demultiplexing through <strong>Ports</strong>.</p><p><strong>Port</strong>: A 16-bit number used to direct traffic to specific services running on a networked computer.</p><p>Different network services run while listening on specific ports for incoming requests.</p><p><em>Eg: HTTP(Hypertext Transfer Protocol, unencrypted):80<br>FTP(File Transfer Protocol): 21</em></p><p><strong>Socket Address</strong>: Aka <strong>Socket number</strong> 10.1.1.100:8010.1.1.100:80</p><h3 id="Dissection-of-a-TCP-Segment">Dissection of a TCP Segment</h3><p><strong>TCP segment</strong>: Made up of a TCP header and a data section (payload layer).</p><table><thead><tr><th>Bit0~Bit15</th><th>Bit15~Bit31</th></tr></thead><tbody><tr><td>Source port(16)</td><td>Destination port(16)</td></tr><tr><td>Sequence number(32)</td><td>Sequence number(32)</td></tr><tr><td>Acknowledgment number(32)</td><td>Acknowledgment number(32)</td></tr><tr><td>Header Length(4) empty(6) Control flags(6)</td><td>Window(16)</td></tr><tr><td>Checksum(16)</td><td>Urgent(16)</td></tr><tr><td>Options (0 or 16 if any)</td><td>Padding</td></tr><tr><td>Data payload (varies)</td><td>…</td></tr></tbody></table><p><strong>Source port</strong>: A high-numbered port chosen from a special section of ports known as <strong>ephemeral ports</strong>.</p><p><strong>Sequence number</strong>: A 32-bit number used to keep track of where in a sequence of TCP segments this one is expected to be.</p><p><strong>Acknowledgement number</strong>: The number of the next expected segment. <em>Eg: Sequence number 1 acknowledge number 2</em></p><p><strong>Data offset field</strong>: 4-bit communicates how long the TCP header for this segment is. The receiving device can understand where the actual data payload begins.</p><p><strong>Control flags</strong></p><p><strong>TCP window</strong>: Specifies the range of sequence numbers that might be sent before an acknowledgement is required.</p><p><strong>Urgent pointer field</strong>: Used in conjunction with one of the TCP control flags to point out particular segments that might be more important than others. Not common in modern networking.</p><p><strong>Options</strong>: Also rare in the real world. Sometimes used for more complicated flow control protocols.</p><h3 id="TCP-Control-Flags-and-the-Three-Way-Handshake">TCP Control Flags and the Three-Way Handshake</h3><p>The way TCP establishes a connection is through the use of different TCP Control Flags used in very specific order.</p><h4 id="Control-flags">Control flags</h4><ul><li>URG(urgent)<ul><li>A value of one here indicates that the segment is considered urgent and that the urgent pointer field has more data about this.</li></ul></li><li>ACK(acknowledged)<ul><li>A value of one in this field means that the acknowledgement number field should be examined.</li></ul></li><li>PSH(push)<ul><li>The transmitting device wants the receiving device to push currently-buffered data to the application on the receiving end as soon as possible.</li><li><strong>buffer</strong> is somewhere the data stored before it is sent.</li></ul></li><li>RST(reset)<ul><li>One of the sides in a TCP connection has not been able to properly recover from a series of missing or malformed segments.</li></ul></li><li>SYN(synchronize)<ul><li>It is used when first establishing a TCP connection and makes sure the receiving end knows to examine the sequence number field.</li></ul></li><li>FIN(finish)<ul><li>When this flag is set to one, it means the transmitting computer doesn’t have any more data to send and the connection can be closed.</li></ul></li></ul><p><strong>A typical connecting process should be like this</strong>:</p><ol><li>A———SYN——&gt;B</li><li>A&lt;—-SYN/ACK—-B</li><li>A———ACK——&gt;B</li></ol><p>This process is also called <strong>A Three-Way Handshake</strong></p><p><strong>Handshake</strong>: A way for 2 devices to ensure that they are apeaking the same protocol and will be able to understand each other.</p><p>This process is operated in <strong>Full Duplex</strong>. Each segment sent in either direction should be responded by a TCP segment with the ACK. This way, the other side always knows what has been received.</p><p>When the connection is going to be closed, there will be the <strong>Four-Way Handshake</strong>:</p><ol><li>A&lt;——FIN——B</li><li>A——-ACK—-&gt;B</li><li>A——-FIN—-&gt;B</li><li>A&lt;——ACK——B</li></ol><h3 id="TCP-Socket-States">TCP Socket States</h3><p><strong>Socket</strong>: The <strong>instantiation</strong> of an end-point in a potential TCP connection.</p><p><strong>Instantiation</strong>: The actual implementation of something defined elsewhere.</p><p>TCP Sockets require extra programs to instantiate them. <strong>Ports</strong> are more virtual descriptive. You can send info to any port you want, but you are only going to get a response if a program has opened a socket on that port.</p><h4 id="TCP-Socket-States-2">TCP Socket States</h4><p><strong>LISTEN</strong>: A TCP socket is ready and listening for incoming connections. (Server side only)</p><p><strong>SYN_SENT</strong>: A synchronization request has been sent, but the connection hasn’t been established yet. (Client side only)</p><p><strong>SYN-RECEIVED</strong>: A socket previously in a LISTEN state has received a synchronization request and sent a SYN/ACK back. But it has not received the final ACK from client yet. (Server side only)</p><p><strong>ESTABLISHED</strong>: The TCP connection is in working order and both sides are free to send each other data.</p><p><strong>FIN_WAIT</strong>: A FIN has been sent, but the corresponding ACK from the other end has not been recieved yet.</p><p><strong>CLOSE_WAIT</strong>: The connection has been closed at the TCP layer, but that the application that opened the socket has not released its hold on the socket yet.</p><p><strong>CLOSED</strong>: The connection has been fully terminated and that no further communication is possible.</p><p>These TCP socket states can vary from operating system to OS. TCP is universal, but choosing different states to describe the states is not as universal.</p><h3 id="Connection-Oriented-and-Connectionless-Protocols">Connection-Oriented and Connectionless Protocols</h3><p><strong>Connection-oriented protocol</strong>: Establishes a connection, and uses this to ensure that all data has been properly transmitted.</p><p>When the data transmitting fails, resending will be determined on the <strong>Transport Level</strong> by <strong>TCP</strong> (to determine when to resend it), since TCP expect an ACK! Thus, sequence numbers is especially important!</p><p><strong>Connectionless protocols</strong>: The most common one is called <strong>UDP(User Datagram Protocol)</strong>.</p><p>UDP doesn’t rely on connections and doesn’t support ACK. Just set a destination port and send the packet. <em>Eg: streaming video</em>.</p><h3 id="Firewalls">Firewalls</h3><p>A device that blocks traffic that meets certain criteria. They are most frequently used in the transport layer. Block and allow ports.</p><h2 id="The-Application-layer">The Application layer</h2><h3 id="The-Application-Layer-and-the-OSI-Model">The Application Layer and the OSI Model</h3><p><strong>OSI(Open System Interconnection)</strong>: 7 layers, adding <strong>Session</strong> and <strong>Presentation</strong> between <strong>Transport</strong> and <strong>Application</strong>.</p><p><strong>Session Layer</strong>: Facilitating the communication between actual <strong>applications</strong> and the <strong>transport layer</strong>. Takes <strong>application layer</strong> data and hands it off to the <strong>presentation layer</strong>.</p><p><strong>Presentation Layer</strong>: Responsible for making sure that the unencapsulated <strong>application layer</strong> data is able to be understood by the application in question. An OS might handle encryption or compression data.</p><h3 id="All-the-layers-working-in-Unison">All the layers working in Unison!!!</h3>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The Network Layer</title>
      <link href="/2019/06/04/The-Network-Layer/"/>
      <url>/2019/06/04/The-Network-Layer/</url>
      
        <content type="html"><![CDATA[<p>This is going to be a completely new part of my study in CS. This part won’t last long because I haven’t finished DataStructure and I’m going to learn assembly language.</p><p>I learn this simply because my server was banned by the GFW and I need some extra knowledge to prevent this from happening again.</p><p>Good Luck!</p><blockquote><p>Google Crash Course</p></blockquote><h1>The Network Layer</h1><p>Describing the IP addressing scheme and subnetingworks.</p><h2 id="The-Network-Layer">The Network Layer</h2><p>MAC addresses are useful in a small scale. But they are <strong>not ordered</strong>.<br><strong>Address resolution protocol</strong></p><h3 id="IP-Address">IP Address</h3><p>8 digits <strong>Dotted decimal notation</strong>: 11111111.11111111.11111111.11111111</p><p>IP Addresses are distributed in large areas and companies and organizations. IP addresses belong to networks, not to the devices attached to those networks. But the <strong>MAC</strong> address will not change.</p><p>Eg: You laptop’s IP will change if you change the network it connects from your home to a cafe. The MAC won’t.</p><p><strong>Dynamic Host Configuration Protocol</strong>: For a modern device, once it connects to a router, it will automatically be assigned an IP Address(<strong>Dynamic IP address</strong>).</p><p><strong>Static IP address</strong>: It has to be configured mannually. In most cases, static IP addresses are reserved for servers and network devices, while dynamic IP addresses are reserved for clients.</p><h3 id="IP-Datagrams-and-Encapsulation">IP Datagrams and Encapsulation</h3><p>Packet in this layer is called <strong>IP datagram</strong>.</p><p><strong>IP datagram</strong>: A highly structured series of fields that are strictly defined.</p><table><thead><tr><th>0~4</th><th>4~8</th><th>8~16</th><th>16~19</th><th>19~31</th></tr></thead><tbody><tr><td>Version</td><td>Header Length</td><td>Service Type</td><td>Total Length</td><td>Total Length</td></tr><tr><td>Identification</td><td>Identification</td><td>Identification</td><td>Flags</td><td>Fragment Offset</td></tr><tr><td>TTL</td><td>TTL</td><td>Protocol</td><td>Header Checksum</td><td>Header Checksum</td></tr><tr><td>-</td><td>-</td><td>Source IP Address</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>Destination IP Address</td><td>-</td><td>-</td></tr><tr><td>Options</td><td>Options</td><td>Options</td><td>Options</td><td>Padding</td></tr></tbody></table><p><strong>Remark</strong>: The most common version of IP is version 4, <strong>IPv4</strong>.</p><p><strong>Header Length field</strong>: Almost always 20 bytes in length when dealing with IPv4.</p><p><strong>Service Type field</strong>: These 8 digits can be used to specify details about quality of service, or <strong>QoS</strong>(to make routers choose which IP datagram is more important), technologies.</p><p><strong>Total Length field</strong>:Indicates the total length of the IP datagram it’s attached to. Thus the maximum size of a single datagram: <strong>65535</strong>.</p><p><strong>Identification field</strong>: 16-bit number used to group messages together.</p><p>If the data is larger than 65535, the IP layer needs to split this data up into many invidual packets.</p><p><strong>Flag field</strong>: Used to indicate if a datagram is allowed to be fragmented, or to indicate that the datagram has already been fragmented.</p><p><strong>Fragmentation</strong>: Process of taking a single IP datagram and splitting it up into several smaller datagrams.</p><p><strong>Time to Live (TTL) field</strong>: indicate how many router hops a datagram can traverse before it’s thrown away. In case of a loop, the routers needn’t to continue transfering the data.</p><p><strong>Protocol field</strong>: Contains data about what transport layer protocol is being used (TCP/UDP).</p><p><strong>Header checksum field</strong>: A checksum of the contents of the entire IP datagram header (as TTL changes, the checksum changes too!).</p><p><strong>Source IP Address and Destination IP Address</strong>:32 bits</p><p><strong>IP options field</strong>: Optional. Used to set special characteristics for datagrams primarily used for testing purposes.</p><p><strong>Padding</strong>: A series of 0 to ensure the header is the correct total size. (Since the size of IP optional fields is unknown).</p><h4 id="Data-payload-section">Data payload section</h4><p>This is what IP datagram is. And this process is called <strong>Encapsulation</strong>.</p><h2 id="Encapsulation">Encapsulation</h2><blockquote><blockquote><blockquote><blockquote><p>Message &gt; Application</p></blockquote><p>(TCP/UDP header)Message &gt; Transport</p></blockquote><p>(IP header)TCP segment or UDP datagram &gt; Network</p></blockquote><p>(Ethernet header)IP datagram(ethernet footer) &gt; Data-link</p></blockquote><h3 id="IP-Address-Classes">IP Address Classes</h3><p>2 sections: <strong>network ID</strong> and <strong>host ID</strong>.</p><p>Eg: 9.100.100.100<br>9 will be network ID, and 100.100.100 will be the host ID.</p><p><strong>Address class system</strong>: A way of defining how the global IP address space is split up.<br><em>Network ID and Host ID</em><br><strong>Class A</strong>:1+3(0~126, 0)<br><strong>Class B</strong>:2+2(128~191, 10)<br><strong>Class C</strong>:3+1(192~224, 110)<br>There are also Class D and E(used for testing purposes).</p><p>Inpractice, these classes have been replaced by <strong>CIDR</strong>: Classless inter-domain routing.</p><h3 id="Addresses-Resolution-Protocol-ARP">Addresses Resolution Protocol (ARP)</h3><p>A protocol used to discover the hardware address of a node with a certain IP address.</p><p><strong>ARP table</strong>: a list of IP addresses and the MAC addresses associated with them.</p><p>A Eg should be like this:</p><ol><li>Host A wants to send a message to 10.20.30.40 but this is not in its ARP table.</li><li>Host A broadcast FF: FF: FF: FF: FF: FF</li><li>ARP broadcast is received and ARP response is sent back. This will contain the MAC address in question.</li></ol><p>ARP table entries generally expire after a short amount of time to ensure changes in the network are accounted for.</p><h2 id="Subnetting">Subnetting</h2><h3 id="Subnet-masks">Subnet masks</h3><p>We have already know that IP addresses can be splitted into 2 sections. The Host ID and the Network ID.</p><p>If we go deeper into the IP addresses, we will need: <strong>Subnet ID</strong>.</p><p>In the Internet level, the core routers only care about the network ID and use it to send datagram to the <strong>gateway routers</strong>. Then the gateway routers (with some additional information) can send the datagram to the destination machine or the next router.</p><p>The Host ID is used for the last router to send the datagram to the recipient machine.</p><p>Subnet IDs are calculated by using <strong>Subnet masks</strong>: 32-bit numbers that are normally written out as 4 octets in decimal.</p><hr><p><em>How does it work?</em><br>IP address: 9.100.100.1009.100.100.100<br>Then in binary: 00001001.01100100.01100100.0110010000001001.01100100.01100100.01100100<br>Subnet mask: 11111111.11111111.11111111.0000000011111111.11111111.11111111.00000000</p><p>The “1” parts is to tell a router what part is the subnet ID.</p><p>In this case, only the last octect is available for the Host ID. Since 0 is not used and 255 is reserved for broadcast, only 1~254 are available to assign to the host.</p><p>This is the famous Subnet mask: 255.255.255.0255.255.255.0</p><p>Another example:<br>Subnet mask: 255.255.255.224255.255.255.224<br>also written by: 11111111.11111111.11111111.1110000011111111.11111111.11111111.11100000<br>In this case, the host ID space will be 5 bits.</p><p>Since this Subnet ID is consists of 27 “1”s and 5 “0”s, a quicker way to represent this should be: 9.100.100.100/279.100.100.100/27</p><p>Subnet mask is a way for a computer to use <strong>AND operators</strong> to determine if an IP address exists on the same network.</p><p>The computer that runs this operation can compare the result with its own network ID to determine if the address is on the same network.</p><h3 id="CIDR">CIDR</h3><p>A even more flexible way to describe blocks of IP addresses. It expands on the concept that subneting by using subnet masks to <strong>Demarcate</strong> networks.</p><p><strong>Demarcate</strong>: to demarcate sth means to set sth off.</p><p><strong>Demarcation point</strong>: To describe where one network or system ends and another one begins.</p><p><strong>CIDR notation</strong>: 9.100.100.100/249.100.100.100/24</p><p>If a company wants 2 Class C, it can simply use Subnet mask of 255.255.254.0/23255.255.254.0/23. This also saves 2 IP addressed since 256∗2−2=510256∗2−2=510.</p><h2 id="Routers">Routers</h2><h3 id="Basic-Concepts">Basic Concepts</h3><p><strong>Router</strong>: A network device that forwards traffic depending on the destination address of that traffic.</p><ol><li>Receive data packet</li><li>Examines destination IP</li><li>Looks up IP destination network in routing table</li><li>Forward traffic to destination</li></ol><h3 id="Routing-table">Routing table</h3><p>4 Coulumns:</p><ul><li>Destination network(IP and Subnet address / CIDR)</li><li>Next hop</li><li>Total hops</li><li>Interface</li></ul><h3 id="Interior-Gateway-Protocol">Interior Gateway Protocol</h3><p>Problem: Quickest path?<br><strong>Routing protocols</strong>: Routers communicates to each other. It can be divided into 2 categories: <strong>interior gateway protocols</strong> and <strong>exterior gateway protocols</strong>.</p><p><strong>Interior gateway protocols</strong>: Used by routers to share info within a single <strong>autonomous system</strong>, which is a collection of networks all fall under the control of a single network operator. Eg: Many routers employed by a internet service provider who is usually in reaches or usually national scale.</p><p><strong>Interior gateway protocols</strong> are further split into 2 categories: <strong>Link state routing protocols</strong> and <strong>distance-vector protocols</strong>.</p><p><strong>Distance-vector protocols</strong> are older of standard, list of networks are how far away in terms of hubs. Then the router will send this list to every routers it connects. In CS, a list is called a <strong>vector</strong>.</p><blockquote><p>Distance-vector protocols care about the neighbors while Link state routing protocols are more complex(more data and a strong algorithm).</p></blockquote><h3 id="Exterior-gateway-protocols">Exterior gateway protocols</h3><p>Exchange info between different organizations.</p><p><strong>Internet Assigned Numbers Authority (IANA)</strong>: NGO that helps manage things like IP address allocation and <strong>ASN, Autonomous System Number</strong> allocation.</p><p><strong>ASN</strong>: Numbers assigned to indicidual autonomous systems.</p><h3 id="Non-Routable-Address-Space">Non-Routable Address Space</h3><p>The establishment of RFC, Request for Comments.</p><p>Not all computers on the internet need to connect to other computers on the internet! Non-Routabnle Address Space allows for nodes on such a network to communicate with each other but no gateway router will attend to forward traffic to this type of network.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>10.0.0.0</mn><mi mathvariant="normal">/</mi><mn>810.0.0.0</mn><mi mathvariant="normal">/</mi><mn>8</mn><mspace linebreak="newline"></mspace><mn>172.16.0.0</mn><mi mathvariant="normal">/</mi><mn>12172.16.0.0</mn><mi mathvariant="normal">/</mi><mn>12</mn><mspace linebreak="newline"></mspace><mn>192.168.0.0</mn><mi mathvariant="normal">/</mi><mn>16192.168.0.0</mn><mi mathvariant="normal">/</mi><mn>16</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">10.0.0.0/810.0.0.0/8\\172.16.0.0/12172.16.0.0/12\\192.168.0.0/16192.168.0.0/16\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10.0.0.0/810.0.0.0/8</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">172.16.0.0/12172.16.0.0/12</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">192.168.0.0/16192.168.0.0/16</span></span><span class="mspace newline"></span></span></span></span></p><p>This Non-routable address space is also related to <strong>NAT, Network Address Translation</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Isomorphism of Trees</title>
      <link href="/2019/05/03/DataStructure-Isomorphism-of-Trees/"/>
      <url>/2019/05/03/DataStructure-Isomorphism-of-Trees/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h4 id="Understanding-of-the-Puzzle">Understanding of the Puzzle</h4><p>We simply regard the trees as the same as long as they have the same children for every node.</p><h2 id="Divide-and-Conquer">Divide and Conquer</h2><ul><li>The representation of a binary tree</li><li>Build a Binary Tree</li><li>Judge whether they are Isomers.</li></ul><h3 id="Representing-a-Binary-Tree">Representing a Binary Tree</h3><p>Static Linked List: A Special Array.</p><h3 id="Structure-of-the-Program">Structure of the Program</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BinTree <span class="title function_">Build</span><span class="params">()</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Judge</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;  </span><br><span class="line">  Build tree1; </span><br><span class="line">  Build tree2;  </span><br><span class="line">  Judge isomers;  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Design-the-Functions">Design the Functions</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ElementType char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Tree int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Null -1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span> </span><br><span class="line">  ElementType Element; </span><br><span class="line">  Tree Left;  </span><br><span class="line">  Tree Right;</span><br><span class="line">&#125;T1[MaxTree], T2[MaxTree];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Graph Traversal</title>
      <link href="/2019/04/30/DataStructure-Graph-Traversal/"/>
      <url>/2019/04/30/DataStructure-Graph-Traversal/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="DFS-Depth-First-Search">DFS(Depth First Search)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(Vertex V)</span>&#123;   </span><br><span class="line">  visited[V] = <span class="literal">true</span>;   </span><br><span class="line">  <span class="keyword">for</span>(each adjacent vertex w)&#123;  </span><br><span class="line">    <span class="keyword">if</span>(!visited[w])       </span><br><span class="line">      DFS(w);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Complexity</strong><br>Adjacent List: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N+E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span><br>Adjacent Matrix: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h2 id="BFS-Breadth-First-Search">BFS(Breadth First Search)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(Vertex V)</span>&#123; </span><br><span class="line">  visited[V] = <span class="literal">true</span>;  </span><br><span class="line">  Enqueue(V, Q);  </span><br><span class="line">  <span class="keyword">while</span>(!IsEmpty(Q))&#123; </span><br><span class="line">    V = Dequeue(Q);  </span><br><span class="line">    <span class="keyword">for</span>(each adjacent vertex W of V)            <span class="keyword">if</span>(!visited[V])&#123;  </span><br><span class="line">      visited[V] = <span class="literal">true</span>;  </span><br><span class="line">      Enqueue(W, Q);    </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Complexity</strong><br>Adjacent List: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N+E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span><br>Adjacent Matrix: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h3 id="Problem-Disconnected-Graph">Problem: Disconnected Graph</h3><p><strong>Connected Component</strong>: Extreme large subGraph of a undirected graph.</p><ul><li>Extreme large number of vertexes</li><li>Extreme large number of edges</li></ul><p><strong>Strongly Connected</strong>: V and W are connected in both directions.</p><ul><li>Remark: The 2 paths need not be the same!</li></ul><p><strong>Strongly Connected Graph</strong>: Any given pair of vertexes are strongly connected.</p><p><strong>Strongly Connected Component</strong>: Extreme large subGraph of a directed graph.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListComponents</span><span class="params">(Graph G)</span>&#123;  </span><br><span class="line">  <span class="keyword">for</span> (each V in G)  </span><br><span class="line">    <span class="keyword">if</span>(!visited[V])  </span><br><span class="line">      DFS(V);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Graph</title>
      <link href="/2019/04/29/DataStructure-Graph/"/>
      <url>/2019/04/29/DataStructure-Graph/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Graph">Graph</h2><p>It is used to represent a many-to-many relationship.</p><p>It is so powerful because it includes both linear lists(one to one) and trees(one to many).</p><h3 id="Components">Components</h3><ul><li>Vertex(V): the set of all vertexes.</li><li>Edge: the set of all sides.<ul><li>(v, w). Double directions.</li><li>. From v to w (single direction).</li><li>No multiple edges or multiple loops.</li></ul></li></ul><p><em>A Quick Review: Definition of Abstract Data Type</em></p><p>Name: <strong>Graph</strong><br>DataSet: <strong>G(V, E)</strong>. V is <strong>Nonempty</strong> E is limited.</p><h3 id="Operation-Set">Operation Set</h3><ul><li>Graph Create()</li><li>Graph InsertVertex(Grapg G, Vertex v)</li><li>Graph InsertEdge(Graph G, Edge e)</li><li>void DFS(Graph G, Vertex v)</li><li>void BFS(Graph G, Vertex v)</li><li>void ShortestPath(Graph G, Vertex v, int Dist[])</li><li>void MST(Graph G)</li><li>…</li></ul><h3 id="Terminology">Terminology</h3><ul><li>Undirected Graph</li><li>Directed Graph</li><li>Network(the edges have weight)</li></ul><h3 id="Creating-a-Graph">Creating a Graph</h3><h4 id="Adjacency-Matrix">Adjacency Matrix</h4><p>G[i][j] = 1, if is an edge in G.<br>G[i][j] = 0, else.</p><p><strong>The matrix is symmetric</strong>, thus we can use a <strong>1-d array</strong>. The subscript will be:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>i</mi><mo>×</mo><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i\times (i+1) / 2 + j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></span></p><p>This can also be applied to network. G[i][j] will be the edge’s weight.</p><h5 id="Advantages">Advantages</h5><ul><li>Easy to understand</li><li>Easy to find out whether there exists an edge</li><li>Easy to find an arbitrary vertex’s all adjacent vertexes.</li><li>Easy to calculate the degree of an arbitrary vertex.<ul><li>The number of edges flowing out of a vertex is <strong>OutDegree</strong>.</li><li>The number of edges flowing out of a vertex is <strong>InDegree</strong>.</li></ul></li></ul><h5 id="Disadvantages">Disadvantages</h5><ul><li>Wasting space, especially for <strong>sparse graph</strong><ul><li>Useful for <strong>complete graph</strong> or <strong>dense graph</strong>.</li></ul></li><li>Wasting time, especially for sparse graph.</li></ul><h4 id="Adjacent-List">Adjacent List</h4><p>G[N] is a pointer array, representing each row in the matrix(a linked list). It only stores nonempty element.</p><blockquote><p>This is actually not as efficient as expected. Each node has a tag and a pointer. If it is a network, there will also be a place to store its weight.</p></blockquote><h5 id="Properties">Properties</h5><ul><li>Easy to find out all connected vertexes.</li><li>Save space for a sparse graph.<ul><li>N head pointers</li><li>2E nodes(each has 2 domains)</li></ul></li><li>Number of vertexes of a given vertex<ul><li>Undirected Graph: Easy</li><li>Directed Graph: Difficult.<br>It is only easy to calculate the OutDegree. To sum the InDegree, we need to create a reversed one.</li></ul></li><li>Difficult to check whether there exists an edge between any given pair of vertexes.</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Set</title>
      <link href="/2019/04/27/DataStructure-Set/"/>
      <url>/2019/04/27/DataStructure-Set/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Set">Set</h2><h3 id="Operations">Operations</h3><p>There are some basic operations about sets. Eg: Union, Intersection, Set Difference…</p><h3 id="Union-Find-Set">Union-Find Set</h3><p><strong>Problem</strong>: There are n nodes. Some of them are connected. How do we know whether arbitrary 2 of them are connected?</p><p><em>Answer: Make n sets to include n nodes. Then union those connected. Find whether 2 given nodes are in the same set.</em></p><h3 id="Creating-Union-Find-Set">Creating Union-Find Set</h3><h4 id="How-to-Store-a-Set">How to Store a Set?</h4><p>Tree. The root will be a set. Each node will be an element.</p><p><strong>Parental Representation</strong>: The child point to the parents. In a set, we wish to find the root more easily.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>   </span><br><span class="line">  ElementType Data;  </span><br><span class="line">  <span class="type">int</span> Parent;</span><br><span class="line">&#125;SetType;</span><br></pre></td></tr></table></figure><h4 id="Operation-Set">Operation Set</h4><ul><li>int Find(SetType S[], ElementType X)</li><li>void Union(SetType S[], ElementType X1, ElementType X2)<ul><li>Sometimes the tree will be higher and the Find function may not be as efficient. We need to Union the relative small set to the larger one.</li><li>We can change Parent part of the structure. Using -2, -7 etc instead of -1!</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Huffman Tree</title>
      <link href="/2019/04/26/DataStructure-Huffman-Tree/"/>
      <url>/2019/04/26/DataStructure-Huffman-Tree/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Huffman-Tree">Huffman Tree</h2><p>Question: How can we fit a 100 mark test into a 5 standards judging system?</p><p>We need to carefully arrange our if clauses in accordance with the frequency of the actual result. <strong>(Decision Tree)</strong></p><p><strong>Cost:</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">o</mi><mo>×</mo><mi mathvariant="normal">l</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">y</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">s</mi></mrow></mrow><annotation encoding="application/x-tex">\sum\rm ratio\times layers</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">ratio</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">layers</span></span></span></span></span></p><h3 id="Definition">Definition</h3><p><strong>Weighed Path Length</strong>: A binary tree with n nodes with weight w. The distance between root and each leaf is l. Then the WPL for each leaf node will be</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>W</mi><mi>P</mi><mi>L</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>w</mi><mi>k</mi></msub><msub><mi>l</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">WPL = \sum_{i=1}^nw_kl_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>Huffman Tree is also called Optimal Binary Tree with the least WPL.</p><h3 id="Creating-a-Huffman-Tree">Creating a Huffman Tree</h3><p>Merge the two binary tree with the least weight every time.</p><p>Structure of a Huffman Tree</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef struct TreeNode *HuffmanTree;struct TreeNode&#123;    int Weight;    HuffmanTree Left, Right;&#125;</span><br></pre></td></tr></table></figure><p>The new problem will be: <strong>How to find the 2 binary tree with the least weight?</strong></p><p><em>A: Heap.</em></p><h3 id="Properties">Properties</h3><ul><li>Without a node with degree 1.</li><li>A Huffman Tree with n nodes has 2n-1 nodes.</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_2=n_0-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><ul><li>After swaping the left and right tree of a Huffman Tree, it is still a Huffman Tree.</li><li>It is possible to build 2 Huffman Trees with the same WPL (1,2,3,3).</li></ul><h3 id="Huffman-Encoding">Huffman Encoding</h3><p>To avoid ambiguity, we introduce <strong>prefix code</strong>.</p><p>As long as all the characters are placed on the leaf nodes, there will not be a character which is the prefix code of another character.</p><p>Then we build a Huffman Tree (<strong>NOTE: we do not need to make each leaf have the same degree!</strong>).</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Heap</title>
      <link href="/2019/04/23/DataStructure-Heap/"/>
      <url>/2019/04/23/DataStructure-Heap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Heap">Heap</h2><h4 id="What-is-heap">What is heap?</h4><p>When a computer is doing many things at the same time, different tasks will have different priorities.</p><p>Thus we have a special data structure: <strong>Priority Queue</strong>.</p><h3 id="Creating-a-heap">Creating a heap</h3><p>We need 2 functions: <em>insert and delete</em></p><ul><li>Array<br>difficult to delete a element</li><li>linked list</li><li>Ordered Array<br>difficult to insert</li><li>Ordered linked list</li><li>Tree</li></ul><h3 id="Tree">Tree</h3><p>Tree has some great characteristics in realizing heap. The insert process is related to the height of a tree while the delete process involves the left or right node of a tree.</p><h4 id="Binary-Search-Tree">Binary Search Tree?</h4><p><strong>Problem</strong>: When you delete too many nodes, the tree won’t be balanced anymore.</p><p>Which is more important? Insert or delete?<br><strong>Delete</strong><br>Because deleting is much more difficult to do.</p><p>So, how can we arrange the structure of a tree?<br><strong>Place the largest one on the root</strong></p><p>What kind of tree should we use?</p><h3 id="Heap-Complete-Binary-Tree">Heap: Complete Binary Tree</h3><h4 id="Properties">Properties</h4><ol><li>Array</li><li>Ordered<ul><li>MaxHeap</li><li>MinHeap</li></ul></li></ol><h4 id="Operation-Set">Operation Set</h4><ul><li>MaxHeap Create(int MaxSize)</li><li>Boolean IsFull(MaxHeap H)</li><li>Insert(MaxHeap H, ElementType item)</li><li>Boolean IsEmpty(MaxHeap H)</li><li>ElementType DeleteMax(MaxHeap H) //Return the maxium element</li></ul><h4 id="Creating-a-Heap">Creating a Heap</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HeapStruct</span> *<span class="title">MaxHeap</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HeapStruct</span>&#123;</span>  </span><br><span class="line">  ElementType *Elements;   </span><br><span class="line">  <span class="type">int</span> Size;   </span><br><span class="line">  <span class="type">int</span> Capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Review: Properties of tree stored in an array.</em></p><h4 id="Insert">Insert</h4><p><strong>REMARK</strong>: We usually store data begin with index 1. The index 0 will be used to store a sentinel(max).</p><h4 id="Delete">Delete</h4><p>Put the last element on the root and check whether the tree is still ordered.</p><h4 id="Creating-the-MaxHeap">Creating the MaxHeap</h4><ul><li>Insert to an empty heap O(NlogN)</li><li>O(N)<ol><li>Insert in order to meet the requirements of a complete binary tree.</li><li>Adjusting the positions to meet the requirements of a ordered tree.(From the bottom)</li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Tree Application</title>
      <link href="/2019/04/13/DataStructure-Tree-Application/"/>
      <url>/2019/04/13/DataStructure-Tree-Application/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Binary-Search-Tree-BST">Binary Search Tree (BST)</h2><h3 id="Properties">Properties</h3><ul><li>Left subTrees’s values are smaller than their roots</li><li>Right subTrees’s values are larger than their roots</li><li>Left and Right subTrees are all BSTs</li></ul><h3 id="API">API</h3><ul><li>Position Find(ElementType X, BinTree BST)</li><li>Position FindMin(BinTree BST)</li><li>Position FindMax(BinTree BST)</li><li>BinTree Insert(ElementType X, BinTree BST)</li><li>BinTree Delete(ElementType X, BinTree BST)</li></ul><h4 id="Find">Find</h4><ol><li><p>Recursion</p></li><li><p>Loop</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(BST)&#123; </span><br><span class="line">  <span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">    BST = BST-&gt;Right; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data)  </span><br><span class="line">    BST = BST-&gt;Left; </span><br><span class="line">  <span class="keyword">else</span>   </span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Insert">Insert</h3><p>Very Similar to Find. However, we should store the location of the root!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!BST)&#123;   </span><br><span class="line">  BST = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>  TreeNode); </span><br><span class="line">  BST-&gt;Data = X;  </span><br><span class="line">  BST-&gt;Left = BST-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(X &lt; BST-&gt;Data)  </span><br><span class="line">    BST-&gt;Left = Insert(X, BST-&gt;Data)    <span class="keyword">else</span> <span class="keyword">if</span>(X&gt;BST-&gt;Data)    </span><br><span class="line">    BST-&gt;Right = Insert(X, BST-&gt;Right);</span><br><span class="line">  <span class="keyword">return</span> BST</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete">Delete</h3><p><strong>Three Conditions</strong></p><ul><li>Leaf</li><li>Only one child</li><li>Two Cildren</li></ul><hr><p><strong>Two Children</strong></p><p>The main idea is to convert this condition into the other 2 simpler ones above.</p><p><strong>Methods</strong></p><ul><li>Replace it with the smallest in the left and convert it into deleting the smallest one in left (Only one child)</li><li>Replace it with the largest in the right and convert it into deleting the largest one in the right (Only one child)</li></ul><hr><h2 id="Balanced-Binary-Tree">Balanced Binary Tree</h2><p><strong>Balance Factor</strong>: BF(T) = h(left) - h(right)</p><p>For a <strong>Balanced Binary Tree</strong> (AVL tree), for every node in this tree the difference between any left and right subtree is no larger than 1.</p><hr><p><strong>What is the least number of nodes for a Balanced Binary Tree?</strong><br><em>Fibonacci sequence!</em></p><hr><h3 id="Adjusting-Balance-Binary-Tree">Adjusting Balance Binary Tree</h3><ol><li>Right right rotation<ul><li>Because the trouble node is on the right subtree of the right subtree of the detector, this is called RR insert.</li></ul></li><li>Left left rotation</li><li>Left right rotation</li><li>Right left rotation<br><em>Remark: When two detector-troublenode appear, we should handle the pair below the tree. This may also solve the upper problem.</em></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Binary Tree</title>
      <link href="/2019/04/07/DataStructure-Binary-Tree/"/>
      <url>/2019/04/07/DataStructure-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Binary-Tree">Binary Tree</h2><h3 id="Properties">Properties</h3><ul><li>Degree = 2.</li><li>L and R are different.</li><li>Layer i has a maximum number of nodes 2^(i-1)</li><li>Degree = K, node sum = 2^(k-1)</li><li>For any not-null binary tree, n0 = leaf, n2 = nodes which have 2 non-leaf nodes, then <strong>n0 = n2+1</strong></li></ul><h3 id="Operation-Set">Operation Set</h3><ul><li>Boolean IsEmpty(BinTree BT)</li><li>void Traversal(BinTree BT)<ul><li>PreOrderTraversal:rLR</li><li>InOrderTraversal:LrR</li><li>PostOrderTraversal:LRr</li><li>LevelOrderTraversal:UD,LR</li></ul></li><li>BinTree CreatBinTree()</li></ul><h3 id="Special-Binary-Tree">Special Binary Tree</h3><ul><li>Skewed Binary Tree</li><li>Perfect Binary Tree(Full Binary Tree)</li><li>Complete Binary Tree(Number every node from up to down and left to right, they will be the same as Perfect Binary Tree)</li></ul><h3 id="Creating-Binary-Tree">Creating Binary Tree</h3><h4 id="Array-Complete-Binary-Tree">Array: Complete Binary Tree</h4><hr><h5 id="Properties-2">Properties</h5><ul><li>Node i’s parent = [i/2]</li><li>Left Child = 2i if 2i &lt;= n</li><li>Right Child = 2i+1 if 2i+1 &lt;= n</li><li>We can also convert a common Binary Tree into a Complete Binary Tree (wasting space).</li></ul><h4 id="Linked-List-Binary-Tree">Linked List: Binary Tree</h4><hr><h5 id="Structure">Structure</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">BinTree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> BinTree Position;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">  ElementTyle Data;  </span><br><span class="line">  BinTree Left; </span><br><span class="line">  BinTree Right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Traversal">Traversal</h3><ul><li>PreOrderTraversal:rLR<ol><li>Accessing r</li><li>PreOrderTraversal its left SubTree.</li><li>PreOrderTraversal its right SubTree.</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrderTraversal</span><span class="params">(BinTree BT)</span>&#123;   </span><br><span class="line">  <span class="keyword">if</span>(BT)&#123;      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);    </span><br><span class="line">    PreOrderTraversal(BT-&gt;Left);  </span><br><span class="line">    PreOrderTraversal(BT-&gt;Right);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>InOrderTraversal:LrR<ul><li>Similar to PreOrderTraversal</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InOrderTraversal(BT-&gt;Left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br><span class="line">InOrderTraversal(BT-&gt;Right);</span><br></pre></td></tr></table></figure><ul><li>PostOrderTraversal:LrR<ul><li>Similar to PreOrderTraversal</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PostOrderTraversal(BT-&gt;Left);</span><br><span class="line">PostOrderTraversal(BT-&gt;Right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, BT-&gt;Data);</span><br></pre></td></tr></table></figure><hr><h4 id="Problem-Can-we-avoid-recursion">Problem: Can we avoid recursion?</h4><p>Since all recursions are realized by Stack, we can use Stack to simulate this process.</p><ol><li>Push every node encountered and traversal its left SubTree.</li><li>When the left SubTree traversal is finished, pop this node and access(print) it.</li><li>Traversal its right SubTree.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraversal</span><span class="params">(BinTree BT)</span>&#123;  </span><br><span class="line">  BinTree T = BT;  </span><br><span class="line">  Stack S = CreateStack(MaxSize); </span><br><span class="line">  <span class="keyword">while</span>(T || !IsEmpty(S))&#123;  </span><br><span class="line">    <span class="keyword">while</span>(T)&#123;     </span><br><span class="line">      Push(S, T);         </span><br><span class="line">      T = T-&gt;Left;     </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))&#123;   </span><br><span class="line">      T = Pop(S);      </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, T-&gt;Data);  </span><br><span class="line">      T = T-&gt;Right;   </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Problem</strong></p><ol><li>How about Pre?</li><li>How about Post?</li></ol><hr><p><strong>The key issue of Traversal of a Binary Tree is how to convert a 2d tree into a linear thing</strong><br>We have to access a node from its parent. The problem is if we access its left Child, we cannot access its right Child if we dump the parent node itself. So we need to store the right child or at least itself to access the right Child.</p><p>To store these Node temporarily unnecessary, we may use queue or stack.</p><ul><li><p>LevelOrderTraversal:UD,LR</p><h4 id="Queue">Queue</h4><p>Add left child and right child to the queue when accessing a node. Delete and access the node in the queue and then add its children into the queue.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrderTraversal</span><span class="params">(BinTree BT)</span>&#123;  </span><br><span class="line">  Queue Q;</span><br><span class="line">  BinTree T;</span><br><span class="line">  <span class="keyword">if</span> (!BT) <span class="keyword">return</span>;</span><br><span class="line">  Q = CreateQueue(MaxSize); </span><br><span class="line">  AddQ(Q, BT); </span><br><span class="line">  <span class="keyword">while</span>(!IsEmptyQ(Q))&#123;  </span><br><span class="line">    T = DeleteQ(Q);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, T-&gt;Data);  </span><br><span class="line">    <span class="keyword">if</span>(T-&gt;Left) AddQ(Q, T-&gt;Left);     </span><br><span class="line">    <span class="keyword">if</span>(T-&gt;Right) AddQ(Q, T-&gt;Right); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="New-Ideas">New Ideas</h3><ul><li>All Pre, In, Post actually follow the same path (UD, LR). Every Node will be met 3 times. The only difference is when we decide to print it out.<ul><li>In the recursion, the sub function will eventually turn to the function which called itself.</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Tree</title>
      <link href="/2019/04/07/DataStructure-Tree/"/>
      <url>/2019/04/07/DataStructure-Tree/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Tree">Tree</h2><p>A Structure used for managing and organizing different levels of data.</p><h3 id="Properties">Properties</h3><ul><li>A special node: Root®</li><li>The rest nodes can be divided into m nonoverlapping subsets called SubTree.</li><li>SubTrees do not overlap.</li><li>Every Node has one parent except r.</li><li>A tree with N nodes has N-1 sides.</li></ul><h3 id="Terms">Terms</h3><ol><li>Degree: The number of SubTrees for a Node.</li><li>Degree of a Tree: The maximum Degree for all nodes of a tree.</li><li>Leaf</li><li>Parent</li><li>Child</li><li>Sibling</li><li>Path and the Distance of Path: From Node n1 to Node nk, the sequence of n1, n2, n3… is a path. The number of sides it contains is called the distance of Path.</li><li>Ancestor: All nodes in the path from r to a certain node.</li><li>Descendant: All nodes contained by all SubTrees of a certain node.</li><li>Level: level of r is 1. The level of a certain node is the level of its parent +1.</li><li>Depth: the largest level.</li></ol><h3 id="Creating-a-Tree">Creating a Tree</h3><p>A new method: Child-Sibling Method.<br>One pointer to the Child, the other pointer to the Child’s Sibling.</p><p>This is called <strong>Binary Tree</strong></p><h3 id="Basic-Operations">Basic Operations</h3><ul><li>Search efficiently<ul><li>Static Search: only searching, without inserting or deleting.</li><li>Dynamic Search: including inserting and deleting</li></ul></li></ul><h4 id="Static-Search">Static Search</h4><p><strong>Sequential Search</strong></p><p><strong>Binary Search</strong><br>Requirements: stored in order and stored in an array.</p><p>When the L and R get reversed in order, search failed.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right)&#123;  </span><br><span class="line">  mid = (left+right)/<span class="number">2</span>;   </span><br><span class="line">  <span class="keyword">if</span>(K &lt; Tbl-&gt;ELement[mid])  right = mid<span class="number">-1</span>;  </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(K &gt; Tbl-&gt;Element[mid])  left = mid+<span class="number">1</span>;  </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Why is binary search so fast?</strong></p><p>We got a decision tree!<br>The time we search will not surpass the depth of a tree.<br>For a tree with n Nodes, the ultimate time will be [logn] + 1</p><p><strong>ASL = SUM(time required to search every node)/node_number</strong></p><h3 id="New-Ideas">New Ideas</h3><ul><li>Setting Sentinel: In a loop, we need to check whether we have meet the boundary every time. To set a sentinel, we make the boundary value to be what we need to search and abandon the traditional boundary check, so when the loop is at its end, it will meet the sentinel and break.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">SequentialSearch</span> <span class="params">(List Tbl, ElementType K)</span>&#123; </span><br><span class="line">  <span class="type">int</span> i;   </span><br><span class="line">  Tbl-&gt;Element[<span class="number">0</span>] = K;  </span><br><span class="line">  <span class="keyword">for</span>(i = Tbl-&gt;Length; Tbl-&gt;Element[i] != K, i--); </span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Queue</title>
      <link href="/2019/04/06/DataStructure-Queue/"/>
      <url>/2019/04/06/DataStructure-Queue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h2 id="Queue">Queue</h2><blockquote><p>A restricted linear table.</p></blockquote><p>Queue and Round-robin Queue</p><h3 id="Properties">Properties</h3><ul><li>AddQ</li><li>DeleteQ</li><li>FIFO</li></ul><h3 id="Operation-Set">Operation Set</h3><ul><li>Queue CreateQueue(int Maxsize)</li><li>int IsFull(Queue Q, int MaxSize)</li><li>void AddQ(Queue Q, ElementType item)</li><li>int IsEmpty(Queue Q)</li><li>ElementType DeleteQ(Queue Q)</li><li>indicators<ul><li>front(begins with -1)</li><li>rear(begins with -1)</li></ul></li></ul><h3 id="Round-robin-Queue">Round-robin Queue</h3><p>A more efficient way to make use of space.</p><p><strong>Questions:</strong></p><ul><li><em>How to tell whether a queue is full?</em></li><li><em>Why is it difficult to tell whther it is full? What are the reasons?</em></li></ul><p><strong>Answer:</strong></p><ul><li><em>There are n results of rear - front while there are n+1 conditions about a round-robin queue</em></li></ul><p><strong>Solutions:</strong></p><ul><li><em>Use another indicator(Size(0 or n)/tag(the last move is add or delete?))</em></li><li>(Common)<em>Use only n-1 blocks</em></li></ul><h3 id="Creating-Round-robin-Queue">Creating Round-robin Queue</h3><h4 id="Array">Array</h4><ol><li>Add<ol><li>Check if the queue is full by <code>(rear + 1) % MaxSize == front</code></li><li>Use Mod function to move the rear to the next block.</li></ol></li><li>Delete:<ol><li>Check if the queue is empty by <code>front == rear</code></li><li>Use Mod function to move the front to the next block.</li></ol></li></ol><h4 id="Linked-List">Linked List</h4><p>Front at the head of the linked list, Rear at the end of the linked list.</p><p><strong>Structure</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>    </span><br><span class="line">  ElementType Data;   </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rear</span>;</span>  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">front</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line">Queue PtrQ;</span><br></pre></td></tr></table></figure><h3 id="Exerciese">Exerciese</h3><p><em>Q: How to use 2 stacks to create a queue?</em></p><ol><li><em>Fill Stack 1</em></li><li><em>Once Stack 1 is full, get all items to Stack 2</em></li><li><em>Fill Stack 1</em></li><li><em>The head of the queue will be the top of Stack 2 and the rear of the queue will be the top of Stack1</em></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Stack</title>
      <link href="/2019/04/06/DataStructure-Stack/"/>
      <url>/2019/04/06/DataStructure-Stack/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhejiang University</p></blockquote><h1>Stack</h1><h3 id="Problem">Problem</h3><p>How to make computer understand the priority of calculating?</p><h3 id="Expression">Expression</h3><p><strong>Nifix Expression</strong> is what we are customed to use. But <strong>Postfix Expression</strong> is easier for a computer to understand. We need a structure to store numbers and operators in order and get them out in the reverse order.<br>Eg:6 2 / 3 - 4 2 * +<br>store 6-&gt;store 2-&gt;6 2 out and divide store 3 in-&gt; store 3-&gt;3 3 out and minus store 0 in……</p><h3 id="Properties-of-Stack">Properties of Stack</h3><ul><li>It is a limited linear table.</li><li>Push and Pop at the same end.</li><li>LIFO.</li></ul><h3 id="Operations-Set">Operations Set</h3><ul><li>CreateStack</li><li>IsFull</li><li>Push</li><li>IsEmpty</li><li>Pop</li></ul><h3 id="Creating-Stack">Creating Stack</h3><h4 id="Array-indicator-on-top">Array+indicator on top</h4><p>Puzzle: How to create 2 Stacks and use their space most efficiently?</p><h5 id="Example">Example</h5><table><thead><tr><th>Stack1</th><th>Stack2</th></tr></thead><tbody><tr><td>L TO R</td><td>R TO L</td></tr></tbody></table><h5 id="Exercises">Exercises</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line">ElementType S[MaxSize];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(ElementType *S, <span class="type">int</span> top, ElementType item)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (top==MaxSize<span class="number">-1</span>) &#123; </span><br><span class="line">    <span class="built_in">printf</span>(“堆栈满”);  </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;   </span><br><span class="line">    S[++top] = item;  </span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Wrong: Top is a parameter. This will not change the value outside the function</p><h4 id="Linked-list-Linked-Stack">Linked list (Linked Stack)</h4><p>Choose the head will be easier to operator. It is more difficult to get the Node ahead of the Rear.</p><h2 id="Application">Application</h2><h3 id="Find-the-Value-of-an-Expression">Find the Value of an Expression</h3><ol><li>Convert postfix to nifix.<ul><li>The sequence of number do not change. Output immediately.</li><li>The sequence of operators will change<ul><li>Store the ‘waiting’ operators.</li><li>Compare the ‘waiting’ operators and the last operator. Pop all the ‘waiting operators’ of higher priority and then push the current operator.</li><li>If all objects are handled, pop all operators in the stack.</li></ul></li><li>In case of brackets.<ul><li>Outside the brackets, we need to calculate the result in the brackets. Inside the brackets, they(left bracket) have the lowest priority instead.</li><li>Once get the right bracket, pop out the operators in the stack until meeting the left bracket.</li></ul></li><li>In case of 2 operators of the same priority, the first one will have a higher priority (calculate from left to right).</li></ul></li><li>Calculate the nifix expression.</li></ol><h3 id="Other-utilities">Other utilities</h3><p><strong>Call of a function and recursion</strong><br><strong>Depth first search</strong><br><strong>…</strong></p><h3 id="New-Ideas">New Ideas</h3><ol><li>To request a piece of space:<br><code>Data = (int*)malloc(sizeof(int)*MaxSize);</code></li><li>Be really careful about the boundary conditions.</li><li>Pay attentation: ‘\n’ at the end of a printf clause is needed.</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure Linked List</title>
      <link href="/2019/04/02/DataStructure-Linked-List/"/>
      <url>/2019/04/02/DataStructure-Linked-List/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zhe Jiang University</p></blockquote><h3 id="Design">Design</h3><p>Target: Find the sum and the product of 2 polynomials.</p><h5 id="Data-Structure">Data Structure</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span> *<span class="title">Polynomial</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span>&#123;</span></span><br><span class="line">  <span class="type">int</span> coef; </span><br><span class="line">  <span class="type">int</span> expon; </span><br><span class="line">  Polynomial link;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Structure-of-the-program">Structure of the program</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Polynomial P1, P2, PP, PS;</span><br><span class="line"></span><br><span class="line">P1 = ReadPoly();</span><br><span class="line">P2 = ReadPoly();</span><br><span class="line">PP = Multi(P1, P2);</span><br><span class="line">PrintPoly(PP);</span><br><span class="line">PS = Add(P1, P2);</span><br><span class="line">PrintPoly(PS);</span><br></pre></td></tr></table></figure><hr><h3 id="Some-New-Ideas">Some New Ideas</h3><ol><li><p>If you want to pass in a variable and let the function change it, you have to pass in a more ‘fundamental’ thing - that is - a pointer to this variable. If passing the value itself, there will be a ‘shell’ to preent it from being changed.</p></li><li><p>(linked list) Getting the node just before the target node can be sometimes more flexible. It is easier to delete a node.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = Rear-&gt;link;</span><br><span class="line">Rear-&gt;link = t-&gt;link;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br></pre></td></tr></table></figure></li><li><p>Creating a linked list: in writing a connecting function, in order to avoid if-clauses to find whether it is the first node of a list, you can just create am empty node at the head of a linked list and in the end delete it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P-&gt;link = <span class="literal">NULL</span>; </span><br><span class="line">Rear = P; </span><br><span class="line"><span class="keyword">while</span>(N--)&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;c, &amp;e); </span><br><span class="line">  Attach(c, e, &amp;Rear); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>The usage of scanf is easier than expected. The computer will stop getting input every time it meets a space or an enter. The way to get input can simply be like the example below.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N); </span><br><span class="line">P = (Polynomial)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PolyNode)); </span><br><span class="line">P-&gt;link = <span class="literal">NULL</span>; </span><br><span class="line">Rear = P; </span><br><span class="line"><span class="keyword">while</span>(N--)&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;c, &amp;e); </span><br><span class="line">  Attach(c, e, &amp;Rear); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>REMARK: The pause enter or space will be dumped by the computer instead of being inputed.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Third Post</title>
      <link href="/2019/03/17/Third-Post/"/>
      <url>/2019/03/17/Third-Post/</url>
      
        <content type="html"><![CDATA[<p>This post is just for test.</p><p>There seems to be something wrong with the preview function on the home page.</p><p>I will see if there is something wrong.</p><blockquote><p>developer TC</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A Quick Start of Markdown</title>
      <link href="/2019/03/15/A-Quick-Start-of-Markdown/"/>
      <url>/2019/03/15/A-Quick-Start-of-Markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to our reference guides for basic syntax and extended syntax.</p><h2 id="Basic-Syntax">Basic Syntax</h2><p>These are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements.</p><h2 id="Element-Markdown-Syntax">Element Markdown Syntax</h2><h4 id="Heading">Heading</h4><p>The more # you get, the smaller the heading will be.<br>#H1 ##H2 ###H3</p><h1>H1</h1><h2 id="H2">H2</h2><h3 id="H3">H3</h3><hr><h3 id="Fonts">Fonts</h3><p><strong>bold</strong> ——<strong>bold</strong></p><p><em>Italic</em>——<em>italicized text</em></p><h3 id="blockquote">blockquote</h3><p>&gt;blockquote——</p><blockquote><p>blockquote</p></blockquote><h3 id="Ordered-List">Ordered List</h3><p>1.First item</p><p>2.Second item</p><p>3.Third item</p><ol><li>First item</li><li>Second item</li><li>Third item</li></ol><h3 id="Unordered-List">Unordered List</h3><p>- First item</p><p>- Second item</p><p>- Third item</p><ul><li>First item</li><li>Second item</li><li>Third item</li></ul><h3 id="Code">Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code`——`code</span><br></pre></td></tr></table></figure><h3 id="Horizontal-Rule">Horizontal Rule</h3><p>—</p><hr><h3 id="Link">Link</h3><p><a href="%5Bhttps://www.example.com%5D(https://www.example.com/)">title</a></p><p><a href="https://www.example.com/">title</a></p><h3 id="Image">Image</h3><p>![alt text](image.jpg)</p><h2 id="Extended-Syntax">Extended Syntax</h2><p>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.</p><h2 id="Element-Markdown-Syntax-2">Element Markdown Syntax</h2><h3 id="Table">Table</h3><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h3 id="Fenced-Code-Block">Fenced Code Block</h3><p>```<br>{<br>“firstName”: “John”,<br>“lastName”: “Smith”,<br>“age”: 25<br>}<br>```</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> </span><br><span class="line">  <span class="string">&quot;Smith&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Strikethrough">Strikethrough</h3><p>~~The world is flat.~~</p><p><s>The world is flat.</s></p><h3 id="Task-List">Task List</h3><p>- [x] Write the press release</p><p>- [ ] Update the website</p><p>- [ ] Contact the media</p><ul><li>Write the press release</li><li>Update the website</li><li>Contact the media</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Post</title>
      <link href="/2019/03/15/First-Post/"/>
      <url>/2019/03/15/First-Post/</url>
      
        <content type="html"><![CDATA[<p>This is my first Blog.<br>Let’s celebrate and enjoy this site!</p><p>I have just cleared the database!<br>Welcome and share something interesting!</p><hr><blockquote><p><em>developer tctco</em></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
