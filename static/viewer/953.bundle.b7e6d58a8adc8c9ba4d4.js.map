{"version":3,"file":"953.bundle.b7e6d58a8adc8c9ba4d4.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\r\n\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n  Tooltip,\r\n  Icon,\r\n} from '@ohif/ui';\r\nimport classNames from 'classnames';\r\nimport hydrateStructuredReport from '../utils/hydrateStructuredReport';\r\n\r\nconst { formatDate } = utils;\r\n\r\nconst MEASUREMENT_TRACKING_EXTENSION_ID =\r\n  '@ohif/extension-measurement-tracking';\r\n\r\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\r\n\r\nfunction OHIFCornerstoneSRViewport(props) {\r\n  const {\r\n    children,\r\n    dataSource,\r\n    displaySets,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('SRViewport');\r\n\r\n  const {\r\n    displaySetService,\r\n    cornerstoneViewportService,\r\n    measurementService,\r\n  } = servicesManager.services;\r\n\r\n  // SR viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SR viewport should only have a single display set');\r\n  }\r\n\r\n  const srDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\r\n  const [measurementSelected, setMeasurementSelected] = useState(0);\r\n  const [measurementCount, setMeasurementCount] = useState(1);\r\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(\r\n    null\r\n  );\r\n  const [\r\n    referencedDisplaySetMetadata,\r\n    setReferencedDisplaySetMetadata,\r\n  ] = useState(null);\r\n  const [isHydrated, setIsHydrated] = useState(srDisplaySet.isHydrated);\r\n  const [element, setElement] = useState(null);\r\n  const { viewports, activeViewportIndex } = viewportGrid;\r\n\r\n  // Optional hook into tracking extension, if present.\r\n  let trackedMeasurements;\r\n  let sendTrackedMeasurementsEvent;\r\n\r\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\r\n    MEASUREMENT_TRACKING_EXTENSION_ID\r\n  );\r\n\r\n  if (hasMeasurementTrackingExtension) {\r\n    const contextModule = extensionManager.getModuleEntry(\r\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\r\n    );\r\n\r\n    const tracked = useContext(contextModule.context);\r\n    trackedMeasurements = tracked?.[0];\r\n    sendTrackedMeasurementsEvent = tracked?.[1];\r\n  }\r\n  if (!sendTrackedMeasurementsEvent) {\r\n    // if no panels from measurement-tracking extension is used, this code will run\r\n    trackedMeasurements = null;\r\n    sendTrackedMeasurementsEvent = (eventName, { displaySetInstanceUID }) => {\r\n      measurementService.clearMeasurements();\r\n      const { SeriesInstanceUIDs } = hydrateStructuredReport(\r\n        { servicesManager, extensionManager },\r\n        displaySetInstanceUID\r\n      );\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(\r\n        SeriesInstanceUIDs[0]\r\n      );\r\n      if (displaySets.length) {\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportIndex: activeViewportIndex,\r\n          displaySetInstanceUIDs: [displaySets[0].displaySetInstanceUID],\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store the tracking identifiers per viewport in order to be able to\r\n   * show the SR measurements on the referenced image on the correct viewport,\r\n   * when multiple viewports are used.\r\n   */\r\n  const setTrackingIdentifiers = useCallback(\r\n    measurementSelected => {\r\n      const { measurements } = srDisplaySet;\r\n\r\n      setTrackingUniqueIdentifiersForElement(\r\n        element,\r\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\r\n        measurementSelected\r\n      );\r\n    },\r\n    [element, measurementSelected, srDisplaySet]\r\n  );\r\n\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const updateViewport = useCallback(\r\n    newMeasurementSelected => {\r\n      const {\r\n        StudyInstanceUID,\r\n        displaySetInstanceUID,\r\n        sopClassUids,\r\n      } = srDisplaySet;\r\n\r\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n        return;\r\n      }\r\n\r\n      if (sopClassUids && sopClassUids.length > 1) {\r\n        // Todo: what happens if there are multiple SOP Classes? Why we are\r\n        // not throwing an error?\r\n        console.warn(\r\n          'More than one SOPClassUID in the same series is not yet supported.'\r\n        );\r\n      }\r\n\r\n      _getViewportReferencedDisplaySetData(\r\n        srDisplaySet,\r\n        newMeasurementSelected,\r\n        displaySetService\r\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\r\n        setMeasurementSelected(newMeasurementSelected);\r\n        setActiveImageDisplaySetData(referencedDisplaySet);\r\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\r\n\r\n        if (\r\n          referencedDisplaySet.displaySetInstanceUID ===\r\n          activeImageDisplaySetData?.displaySetInstanceUID\r\n        ) {\r\n          const { measurements } = srDisplaySet;\r\n\r\n          // it means that we have a new referenced display set, and the\r\n          // imageIdIndex will handle it by updating the viewport, but if they\r\n          // are the same we just need to use measurementService to jump to the\r\n          // new measurement\r\n          const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n            viewportIndex\r\n          );\r\n\r\n          const csViewport = cornerstoneViewportService.getCornerstoneViewport(\r\n            viewportInfo.getViewportId()\r\n          );\r\n\r\n          const imageIds = csViewport.getImageIds();\r\n\r\n          const imageIdIndex = imageIds.indexOf(\r\n            measurements[newMeasurementSelected].imageId\r\n          );\r\n\r\n          if (imageIdIndex !== -1) {\r\n            csViewport.setImageIdIndex(imageIdIndex);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportIndex]\r\n  );\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    if (!activeImageDisplaySetData) {\r\n      return null;\r\n    }\r\n\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const { measurements } = srDisplaySet;\r\n    const measurement = measurements[measurementSelected];\r\n\r\n    if (!measurement) {\r\n      return null;\r\n    }\r\n\r\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\r\n      image => image.imageId === measurement.imageId\r\n    );\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        // should be passed second since we don't want SR displaySet to\r\n        // override the activeImageDisplaySetData\r\n        displaySets={[activeImageDisplaySetData]}\r\n        viewportOptions={{\r\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\r\n        }}\r\n        onElementEnabled={onElementEnabled}\r\n        initialImageIndex={initialImageIndex}\r\n      ></Component>\r\n    );\r\n  }, [activeImageDisplaySetData, viewportIndex, measurementSelected]);\r\n\r\n  const onMeasurementChange = useCallback(\r\n    direction => {\r\n      let newMeasurementSelected = measurementSelected;\r\n\r\n      if (direction === 'right') {\r\n        newMeasurementSelected++;\r\n\r\n        if (newMeasurementSelected >= measurementCount) {\r\n          newMeasurementSelected = 0;\r\n        }\r\n      } else {\r\n        newMeasurementSelected--;\r\n\r\n        if (newMeasurementSelected < 0) {\r\n          newMeasurementSelected = measurementCount - 1;\r\n        }\r\n      }\r\n\r\n      setTrackingIdentifiers(newMeasurementSelected);\r\n      updateViewport(newMeasurementSelected);\r\n    },\r\n    [\r\n      measurementSelected,\r\n      measurementCount,\r\n      updateViewport,\r\n      setTrackingIdentifiers,\r\n    ]\r\n  );\r\n\r\n  /**\r\n   Cleanup the SR viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports[activeViewportIndex];\r\n        if (\r\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\r\n        ) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Loading the measurements from the SR viewport, which goes through the\r\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\r\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\r\n   * we are changing the state here? isHydrated is always false at this stage, and\r\n   * if it is hydrated we don't even use the SR viewport.\r\n   */\r\n  useEffect(() => {\r\n    if (!srDisplaySet.isLoaded) {\r\n      srDisplaySet.load();\r\n    }\r\n    setIsHydrated(srDisplaySet.isHydrated);\r\n\r\n    const numMeasurements = srDisplaySet.measurements.length;\r\n    setMeasurementCount(numMeasurements);\r\n  }, [srDisplaySet]);\r\n\r\n  /**\r\n   * Hook to update the tracking identifiers when the selected measurement changes or\r\n   * the element changes\r\n   */\r\n  useEffect(() => {\r\n    if (!element || !srDisplaySet.isLoaded) {\r\n      return;\r\n    }\r\n    setTrackingIdentifiers(measurementSelected);\r\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\r\n\r\n  /**\r\n   * Todo: what is this, not sure what it does regarding the react aspect,\r\n   * it is updating a local variable? which is not state.\r\n   */\r\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  useEffect(() => {\r\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  }, [trackedMeasurements]);\r\n\r\n  /**\r\n   * Data fetching for the SR displaySet, which updates the measurements and\r\n   * also gets the referenced image displaySet that SR is based on.\r\n   */\r\n  useEffect(() => {\r\n    updateViewport(measurementSelected);\r\n  }, [dataSource, srDisplaySet]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n    SeriesNumber,\r\n  } = referencedDisplaySetMetadata;\r\n\r\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onArrowsClick={onMeasurementChange}\r\n        getStatusComponent={() =>\r\n          _getStatusComponent({\r\n            srDisplaySet,\r\n            viewportIndex,\r\n            isTracked: false,\r\n            isRehydratable: srDisplaySet.isRehydratable,\r\n            isLocked,\r\n            sendTrackedMeasurementsEvent,\r\n          })\r\n        }\r\n        studyData={{\r\n          label: viewportLabel,\r\n          useAltStyling: true,\r\n          studyDate: formatDate(StudyDate),\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: SeriesDescription || '',\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneSRViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nOHIFCornerstoneSRViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nasync function _getViewportReferencedDisplaySetData(\r\n  displaySet,\r\n  measurementSelected,\r\n  displaySetService\r\n) {\r\n  const { measurements } = displaySet;\r\n  const measurement = measurements[measurementSelected];\r\n\r\n  const { displaySetInstanceUID } = measurement;\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\r\n}\r\n\r\nfunction _getStatusComponent({\r\n  srDisplaySet,\r\n  viewportIndex,\r\n  isRehydratable,\r\n  isLocked,\r\n  sendTrackedMeasurementsEvent,\r\n}) {\r\n  const onPillClick = () => {\r\n    sendTrackedMeasurementsEvent('RESTORE_PROMPT_HYDRATE_SR', {\r\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\r\n      viewportIndex,\r\n    });\r\n  };\r\n\r\n  // 1 - Incompatible\r\n  // 2 - Locked\r\n  // 3 - Rehydratable / Open\r\n  const state =\r\n    isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (state) {\r\n    case 1:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n            backgroundColor: '#98e5c1',\r\n            border: 'solid 1.5px #000000',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"exclamation\"\r\n            style={{ color: '#000', width: '12px', height: '12px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => (\r\n        <div>\r\n          This structured report is not compatible\r\n          <br />\r\n          with this application.\r\n        </div>\r\n      );\r\n      break;\r\n    case 2:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 bg-black rounded-full\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"lock\"\r\n            style={{ color: '#05D97C', width: '8px', height: '11px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => (\r\n        <div>\r\n          This structured report is currently read-only\r\n          <br />\r\n          because you are tracking measurements in\r\n          <br />\r\n          another viewport.\r\n        </div>\r\n      );\r\n      break;\r\n    case 3:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n            border: 'solid 1.5px #000000',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"arrow-left\"\r\n            style={{ color: '#000', width: '14px', height: '14px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => <div>Click to restore measurements.</div>;\r\n  }\r\n\r\n  const StatusPill = () => (\r\n    <div\r\n      className={classNames(\r\n        'group relative flex items-center justify-center px-2 rounded-full cursor-default bg-customgreen-100',\r\n        {\r\n          'hover:bg-customblue-100': state === 3,\r\n          'cursor-pointer': state === 3,\r\n        }\r\n      )}\r\n      style={{\r\n        height: '24px',\r\n        width: '55px',\r\n      }}\r\n      onClick={() => {\r\n        if (state === 3) {\r\n          if (onPillClick) {\r\n            onPillClick();\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <span className=\"pr-1 text-lg font-bold leading-none text-black\">SR</span>\r\n      <StatusIcon />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\r\n          <StatusPill />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusPill />}\r\n    </>\r\n  );\r\n}\r\n\r\n// function _onDoubleClick() {\r\n//   const cancelActiveManipulatorsForElement = cornerstoneTools.getModule(\r\n//     'manipulatorState'\r\n//   ).setters.cancelActiveManipulatorsForElement;\r\n//   const enabledElements = cornerstoneTools.store.state.enabledElements;\r\n//   enabledElements.forEach(element => {\r\n//     cancelActiveManipulatorsForElement(element);\r\n//   });\r\n// }\r\n\r\nexport default OHIFCornerstoneSRViewport;\r\n"],"names":["formatDate","utils","MEASUREMENT_TRACKING_EXTENSION_ID","SR_TOOLGROUP_BASE_NAME","OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","t","useTranslation","displaySetService","cornerstoneViewportService","measurementService","services","length","Error","srDisplaySet","viewportGrid","viewportGridService","useViewportGrid","viewportDialogState","viewportDialogApi","useViewportDialog","measurementSelected","setMeasurementSelected","useState","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","isHydrated","setIsHydrated","element","setElement","viewports","activeViewportIndex","trackedMeasurements","sendTrackedMeasurementsEvent","registeredExtensionIds","includes","contextModule","getModuleEntry","tracked","useContext","context","eventName","displaySetInstanceUID","clearMeasurements","SeriesInstanceUIDs","hydrateStructuredReport","getDisplaySetsForSeries","setDisplaySetsForViewport","displaySetInstanceUIDs","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","onElementEnabled","evt","detail","updateViewport","newMeasurementSelected","StudyInstanceUID","sopClassUids","console","warn","async","displaySet","referencedDisplaySet","getDisplaySetByUID","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getViewportReferencedDisplaySetData","then","viewportInfo","getViewportInfoByIndex","csViewport","getCornerstoneViewport","getViewportId","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","component","Component","initialImageIndex","findIndex","image","viewportOptions","toolGroupId","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","activeViewport","unsubscribe","isLoaded","load","numMeasurements","isLocked","trackedSeries","childrenWithProps","child","index","React","key","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","isRehydratable","onPillClick","state","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","name","color","StatusPill","classNames","onClick","content","position","_getStatusComponent","isTracked","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","message","type","actions","onSubmit","onOutsideClick","propTypes","PropTypes","customProps","defaultProps"],"sourceRoot":""}