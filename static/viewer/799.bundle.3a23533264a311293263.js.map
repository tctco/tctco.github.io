{"version":3,"file":"799.bundle.3a23533264a311293263.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\n\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useCine,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n  Tooltip,\r\n  Icon,\r\n} from '@ohif/ui';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { eventTarget, Enums } from '@cornerstonejs/core';\r\nimport { annotation } from '@cornerstonejs/tools';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\n\r\nconst { formatDate } = utils;\r\n\r\nfunction TrackedCornerstoneViewport(props) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n    viewportOptions,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('TrackedViewport');\r\n\r\n  const {\r\n    measurementService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  // Todo: handling more than one displaySet on the same viewport\r\n  const displaySet = displaySets[0];\r\n\r\n  const [trackedMeasurements] = useTrackedMeasurements();\r\n  const [{ activeViewportIndex }] = useViewportGrid();\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [viewportDialogState] = useViewportDialog();\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\r\n  const [element, setElement] = useState(null);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const {\r\n    Modality,\r\n    SeriesDate,\r\n    SeriesDescription,\r\n    SeriesInstanceUID,\r\n    SeriesNumber,\r\n  } = displaySet;\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    SpacingBetweenSlices,\r\n    ManufacturerModelName,\r\n  } = displaySet.images[0];\r\n\r\n  const cineHandler = () => {\r\n    if (!cines || !cines[viewportIndex] || !element) {\r\n      return;\r\n    }\r\n\r\n    const cine = cines[viewportIndex];\r\n    const isPlaying = cine.isPlaying || false;\r\n    const frameRate = cine.frameRate || 24;\r\n\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    if (isPlaying) {\r\n      cineService.playClip(element, {\r\n        framesPerSecond: validFrameRate,\r\n      });\r\n    } else {\r\n      cineService.stopClip(element);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isTracked) {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {\r\n        global: {\r\n          lineDash: '',\r\n        },\r\n      });\r\n\r\n      cornerstoneViewportService\r\n        .getRenderingEngine()\r\n        .renderViewport(viewportId);\r\n\r\n      return;\r\n    }\r\n\r\n    annotation.config.style.setViewportToolStyles(`viewport-${viewportIndex}`, {\r\n      global: {\r\n        lineDash: '4,4',\r\n      },\r\n    });\r\n\r\n    cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n    return () => {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {});\r\n    };\r\n  }, [isTracked]);\r\n\r\n  // unmount cleanup\r\n  useEffect(() => {\r\n    eventTarget.addEventListener(\r\n      Enums.Events.STACK_VIEWPORT_NEW_STACK,\r\n      cineHandler\r\n    );\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportIndex, isPlaying: false });\r\n      eventTarget.removeEventListener(\r\n        Enums.Events.STACK_VIEWPORT_NEW_STACK,\r\n        cineHandler\r\n      );\r\n    };\r\n  }, [element]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportIndex] || !element) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      if (element && cines?.[viewportIndex]?.isPlaying) {\r\n        cineService.stopClip(element);\r\n      }\r\n    };\r\n  }, [cines, viewportIndex, cineService, element, cineHandler]);\r\n\r\n  if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n    setIsTracked(!isTracked);\r\n  }\r\n\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  function switchMeasurement(direction) {\r\n    const newTrackedMeasurementUID = _getNextMeasurementUID(\r\n      direction,\r\n      servicesManager,\r\n      trackedMeasurementUID,\r\n      trackedMeasurements\r\n    );\r\n\r\n    if (!newTrackedMeasurementUID) {\r\n      return;\r\n    }\r\n\r\n    setTrackedMeasurementUID(newTrackedMeasurementUID);\r\n\r\n    measurementService.jumpToMeasurement(\r\n      viewportIndex,\r\n      newTrackedMeasurementUID\r\n    );\r\n  }\r\n\r\n  const getCornerstoneViewport = () => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    return <Component {...props} onElementEnabled={onElementEnabled} />;\r\n  };\r\n\r\n  const cine = cines[viewportIndex];\r\n  const isPlaying = (cine && cine.isPlaying) || false;\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        useAltStyling={isTracked}\r\n        onArrowsClick={direction => switchMeasurement(direction)}\r\n        getStatusComponent={() => _getStatusComponent(isTracked)}\r\n        studyData={{\r\n          label: viewportLabel,\r\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\r\n          currentSeries: SeriesNumber, // TODO - switch entire currentSeries to be UID based or actual position based\r\n          seriesDescription: SeriesDescription,\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness\r\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\r\n              : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n        showNavArrows={!isCineEnabled}\r\n        showCine={isCineEnabled}\r\n        cineProps={{\r\n          isPlaying,\r\n          onClose: () => commandsManager.runCommand('toggleCine'),\r\n          onPlayPauseChange: isPlaying =>\r\n            cineService.setCine({\r\n              id: activeViewportIndex,\r\n              isPlaying,\r\n            }),\r\n          onFrameRateChange: frameRate =>\r\n            cineService.setCine({\r\n              id: activeViewportIndex,\r\n              frameRate,\r\n            }),\r\n        }}\r\n      />\r\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              id={viewportDialogState.id}\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nTrackedCornerstoneViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nfunction _getNextMeasurementUID(\r\n  direction,\r\n  servicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { measurementService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for this series,\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(m =>\r\n    trackedSeries.includes(m.referenceSeriesUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const uids = filteredMeasurements.map(fm => fm.uid);\r\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    if (direction === 'left') {\r\n      measurementIndex--;\r\n\r\n      if (measurementIndex < 0) {\r\n        measurementIndex = measurementCount - 1;\r\n      }\r\n    } else if (direction === 'right') {\r\n      measurementIndex++;\r\n\r\n      if (measurementIndex === measurementCount) {\r\n        measurementIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = uids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nfunction _getStatusComponent(isTracked) {\r\n  const trackedIcon = isTracked ? 'tracked' : 'dotted-circle';\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Tooltip\r\n        position=\"bottom-left\"\r\n        content={\r\n          <div className=\"flex py-2\">\r\n            <div className=\"flex pt-1\">\r\n              <Icon name=\"info-link\" className=\"w-4 text-primary-main\" />\r\n            </div>\r\n            <div className=\"flex ml-4\">\r\n              <span className=\"text-base text-common-light\">\r\n                {isTracked ? (\r\n                  <>\r\n                    Series is\r\n                    <span className=\"font-bold text-white\"> tracked</span> and\r\n                    can be viewed <br /> in the measurement panel\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Measurements for\r\n                    <span className=\"font-bold text-white\"> untracked </span>\r\n                    series <br /> will not be shown in the <br /> measurements\r\n                    panel\r\n                  </>\r\n                )}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        }\r\n      >\r\n        <Icon name={trackedIcon} className=\"w-6 text-primary-light\" />\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackedCornerstoneViewport;\r\n"],"names":["formatDate","utils","TrackedCornerstoneViewport","props","children","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","commandsManager","viewportOptions","t","useTranslation","measurementService","cornerstoneViewportService","services","displaySet","trackedMeasurements","useTrackedMeasurements","activeViewportIndex","useViewportGrid","isCineEnabled","cines","cineService","useCine","viewportDialogState","useViewportDialog","isTracked","setIsTracked","useState","trackedMeasurementUID","setTrackedMeasurementUID","element","setElement","trackedSeries","context","viewportId","Modality","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","ManufacturerModelName","images","cineHandler","cine","isPlaying","frameRate","validFrameRate","Math","max","playClip","framesPerSecond","stopClip","useEffect","annotation","global","lineDash","getRenderingEngine","renderViewport","eventTarget","Enums","setCine","id","includes","onElementEnabled","evt","detail","onDoubleClick","stopPropagation","preventDefault","useAltStyling","onArrowsClick","direction","newTrackedMeasurementUID","trackedMeasurementId","measurements","getMeasurements","filteredMeasurements","filter","m","referenceSeriesUID","length","measurementCount","uids","map","fm","uid","measurementIndex","findIndex","_getNextMeasurementUID","jumpToMeasurement","switchMeasurement","getStatusComponent","trackedIcon","className","position","content","name","_getStatusComponent","studyData","label","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","showNavArrows","showCine","cineProps","onClose","runCommand","onPlayPauseChange","onFrameRateChange","component","Component","getModuleEntry","getCornerstoneViewport","message","type","actions","onSubmit","onOutsideClick","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}